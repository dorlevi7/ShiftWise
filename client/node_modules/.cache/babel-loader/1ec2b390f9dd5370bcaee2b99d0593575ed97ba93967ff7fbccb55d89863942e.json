{"ast":null,"code":"// utils/utils.js\n\nexport const calculateWeekKey = weekOffset => {\n  const today = new Date();\n  const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n  const formatDate = date => `${date.getFullYear()}_${String(date.getMonth() + 1).padStart(2, '0')}_${String(date.getDate()).padStart(2, '0')}`;\n  return `week_${formatDate(firstDayOfWeek)}`;\n};\nexport const calculateWeekRange = weekOffset => {\n  const today = new Date();\n  const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n  const lastDayOfWeek = new Date(firstDayOfWeek);\n  lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);\n  const formatDate = date => {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  };\n  return `${formatDate(firstDayOfWeek)} - ${formatDate(lastDayOfWeek)}`;\n};\nexport const getWeekDates = weekOffset => {\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const currentDate = new Date();\n  const firstDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + weekOffset * 7));\n  return daysOfWeek.map((dayName, index) => {\n    const date = new Date(firstDayOfWeek);\n    date.setDate(firstDayOfWeek.getDate() + index);\n    return {\n      dayName,\n      date: date.toLocaleDateString('en-GB') // הפורמט הרצוי: DD/MM/YYYY\n    };\n  });\n};","map":{"version":3,"names":["calculateWeekKey","weekOffset","today","Date","firstDayOfWeek","setDate","getDate","getDay","formatDate","date","getFullYear","String","getMonth","padStart","calculateWeekRange","lastDayOfWeek","day","month","year","getWeekDates","daysOfWeek","currentDate","map","dayName","index","toLocaleDateString"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/utils/utils.js"],"sourcesContent":["// utils/utils.js\n\nexport const calculateWeekKey = (weekOffset) => {\n    const today = new Date();\n    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n    const formatDate = (date) =>\n        `${date.getFullYear()}_${String(date.getMonth() + 1).padStart(2, '0')}_${String(date.getDate()).padStart(2, '0')}`;\n    return `week_${formatDate(firstDayOfWeek)}`;\n};\n\nexport const calculateWeekRange = (weekOffset) => {\n    const today = new Date();\n    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n    const lastDayOfWeek = new Date(firstDayOfWeek);\n    lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);\n\n    const formatDate = (date) => {\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        return `${day}/${month}/${year}`;\n    };\n\n    return `${formatDate(firstDayOfWeek)} - ${formatDate(lastDayOfWeek)}`;\n};\n\nexport const getWeekDates = (weekOffset) => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentDate = new Date();\n    const firstDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + weekOffset * 7));\n\n    return daysOfWeek.map((dayName, index) => {\n        const date = new Date(firstDayOfWeek);\n        date.setDate(firstDayOfWeek.getDate() + index);\n        return {\n            dayName,\n            date: date.toLocaleDateString('en-GB'), // הפורמט הרצוי: DD/MM/YYYY\n        };\n    });\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,gBAAgB,GAAIC,UAAU,IAAK;EAC5C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,cAAc,GAAG,IAAID,IAAI,CAACD,KAAK,CAACG,OAAO,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAAC,GAAGN,UAAU,GAAG,CAAC,CAAC,CAAC;EACjG,MAAMO,UAAU,GAAIC,IAAI,IACpB,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIC,MAAM,CAACF,IAAI,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,MAAM,CAACF,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EACtH,OAAO,QAAQL,UAAU,CAACJ,cAAc,CAAC,EAAE;AAC/C,CAAC;AAED,OAAO,MAAMU,kBAAkB,GAAIb,UAAU,IAAK;EAC9C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,cAAc,GAAG,IAAID,IAAI,CAACD,KAAK,CAACG,OAAO,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAAC,GAAGN,UAAU,GAAG,CAAC,CAAC,CAAC;EACjG,MAAMc,aAAa,GAAG,IAAIZ,IAAI,CAACC,cAAc,CAAC;EAC9CW,aAAa,CAACV,OAAO,CAACD,cAAc,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAEnD,MAAME,UAAU,GAAIC,IAAI,IAAK;IACzB,MAAMO,GAAG,GAAGL,MAAM,CAACF,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACnD,MAAMI,KAAK,GAAGN,MAAM,CAACF,IAAI,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMK,IAAI,GAAGT,IAAI,CAACC,WAAW,CAAC,CAAC;IAC/B,OAAO,GAAGM,GAAG,IAAIC,KAAK,IAAIC,IAAI,EAAE;EACpC,CAAC;EAED,OAAO,GAAGV,UAAU,CAACJ,cAAc,CAAC,MAAMI,UAAU,CAACO,aAAa,CAAC,EAAE;AACzE,CAAC;AAED,OAAO,MAAMI,YAAY,GAAIlB,UAAU,IAAK;EACxC,MAAMmB,UAAU,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;EACjG,MAAMC,WAAW,GAAG,IAAIlB,IAAI,CAAC,CAAC;EAC9B,MAAMC,cAAc,GAAG,IAAID,IAAI,CAACkB,WAAW,CAAChB,OAAO,CAACgB,WAAW,CAACf,OAAO,CAAC,CAAC,GAAGe,WAAW,CAACd,MAAM,CAAC,CAAC,GAAGN,UAAU,GAAG,CAAC,CAAC,CAAC;EAEnH,OAAOmB,UAAU,CAACE,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;IACtC,MAAMf,IAAI,GAAG,IAAIN,IAAI,CAACC,cAAc,CAAC;IACrCK,IAAI,CAACJ,OAAO,CAACD,cAAc,CAACE,OAAO,CAAC,CAAC,GAAGkB,KAAK,CAAC;IAC9C,OAAO;MACHD,OAAO;MACPd,IAAI,EAAEA,IAAI,CAACgB,kBAAkB,CAAC,OAAO,CAAC,CAAE;IAC5C,CAAC;EACL,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}