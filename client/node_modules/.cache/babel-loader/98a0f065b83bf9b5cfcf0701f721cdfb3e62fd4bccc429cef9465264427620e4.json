{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n\n  const selectMorningOrNoonShift = async (userId, day, updatedAvailability, weekKey, currentCompany) => {\n    var _updatedAvailability$, _updatedAvailability$2;\n    const previousDay = calculatePreviousDay(day);\n\n    // בדיקה אם יש משמרת לילה ביום הקודם והפיכתה ל-disabled\n    if ((_updatedAvailability$ = updatedAvailability[userId]) !== null && _updatedAvailability$ !== void 0 && (_updatedAvailability$2 = _updatedAvailability$['Night']) !== null && _updatedAvailability$2 !== void 0 && _updatedAvailability$2[previousDay]) {\n      updatedAvailability[userId]['Night'][previousDay].status = 'disabled';\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'disabled');\n    }\n  };\n  const selectNightShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n    const nextDay = calculateNextDay(day);\n    if (day === 'Saturday') {\n      var _updatedAvailability$3, _updatedAvailability$4, _updatedAvailability$5, _updatedAvailability$6;\n      // עדכון משמרות של יום ראשון בשבוע הבא\n      const nextWeekKey = calculateWeekKey(weekOffset + 1); // מפתח השבוע הבא\n      if ((_updatedAvailability$3 = updatedAvailability[userId]) !== null && _updatedAvailability$3 !== void 0 && (_updatedAvailability$4 = _updatedAvailability$3['Morning']) !== null && _updatedAvailability$4 !== void 0 && _updatedAvailability$4['Sunday']) {\n        await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Morning', 'Sunday', 'disabled');\n      }\n      if ((_updatedAvailability$5 = updatedAvailability[userId]) !== null && _updatedAvailability$5 !== void 0 && (_updatedAvailability$6 = _updatedAvailability$5['Noon']) !== null && _updatedAvailability$6 !== void 0 && _updatedAvailability$6['Sunday']) {\n        await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Noon', 'Sunday', 'disabled');\n      }\n    } else {\n      var _updatedAvailability$7, _updatedAvailability$8, _updatedAvailability$9, _updatedAvailability$10;\n      // עדכון משמרות של היום הבא\n      if ((_updatedAvailability$7 = updatedAvailability[userId]) !== null && _updatedAvailability$7 !== void 0 && (_updatedAvailability$8 = _updatedAvailability$7['Morning']) !== null && _updatedAvailability$8 !== void 0 && _updatedAvailability$8[nextDay]) {\n        updatedAvailability[userId]['Morning'][nextDay].status = 'disabled';\n        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'disabled');\n      }\n      if ((_updatedAvailability$9 = updatedAvailability[userId]) !== null && _updatedAvailability$9 !== void 0 && (_updatedAvailability$10 = _updatedAvailability$9['Noon']) !== null && _updatedAvailability$10 !== void 0 && _updatedAvailability$10[nextDay]) {\n        updatedAvailability[userId]['Noon'][nextDay].status = 'disabled';\n        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'disabled');\n      }\n    }\n  };\n  const deselectMorningOrNoonShift = async (userId, day, updatedAvailability, weekKey, currentCompany) => {\n    var _updatedAvailability$14, _updatedAvailability$15, _updatedAvailability$16;\n    const previousDay = calculatePreviousDay(day);\n\n    // בדיקה אם משמרות אחרות ביום הקודם נבחרו\n    const hasOtherSelectedShifts = ['Morning', 'Noon', 'Evening'].some(s => {\n      var _updatedAvailability$11, _updatedAvailability$12, _updatedAvailability$13;\n      return ((_updatedAvailability$11 = updatedAvailability[userId]) === null || _updatedAvailability$11 === void 0 ? void 0 : (_updatedAvailability$12 = _updatedAvailability$11[s]) === null || _updatedAvailability$12 === void 0 ? void 0 : (_updatedAvailability$13 = _updatedAvailability$12[previousDay]) === null || _updatedAvailability$13 === void 0 ? void 0 : _updatedAvailability$13.status) === 'selected';\n    });\n\n    // אם משמרת הלילה ביום הקודם במצב \"disabled\" ואין משמרות אחרות שנבחרו\n    if (((_updatedAvailability$14 = updatedAvailability[userId]) === null || _updatedAvailability$14 === void 0 ? void 0 : (_updatedAvailability$15 = _updatedAvailability$14['Night']) === null || _updatedAvailability$15 === void 0 ? void 0 : (_updatedAvailability$16 = _updatedAvailability$15[previousDay]) === null || _updatedAvailability$16 === void 0 ? void 0 : _updatedAvailability$16.status) === 'disabled' && !hasOtherSelectedShifts) {\n      // עדכון סטטוס משמרת הלילה ל-\"default\"\n      updatedAvailability[userId]['Night'][previousDay].status = 'default';\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'default');\n    }\n  };\n  const deselectNightShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n    const nextDay = calculateNextDay(day);\n\n    // אם היום הוא שבת, יש לבדוק את יום ראשון בשבוע הבא\n    if (day === 'Saturday') {\n      const nextWeekKey = calculateWeekKey(weekOffset + 1); // מפתח השבוע הבא\n\n      // בדיקה אם יש משמרות נבחרות ביום ראשון\n      const hasSelectedShiftsOnSunday = ['Morning', 'Noon', 'Evening', 'Night'].some(s => {\n        var _updatedAvailability$17, _updatedAvailability$18, _updatedAvailability$19;\n        return ((_updatedAvailability$17 = updatedAvailability[userId]) === null || _updatedAvailability$17 === void 0 ? void 0 : (_updatedAvailability$18 = _updatedAvailability$17[s]) === null || _updatedAvailability$18 === void 0 ? void 0 : (_updatedAvailability$19 = _updatedAvailability$18['Sunday']) === null || _updatedAvailability$19 === void 0 ? void 0 : _updatedAvailability$19.status) === 'selected';\n      });\n      if (!hasSelectedShiftsOnSunday) {\n        var _updatedAvailability$20, _updatedAvailability$21, _updatedAvailability$22, _updatedAvailability$23;\n        if ((_updatedAvailability$20 = updatedAvailability[userId]) !== null && _updatedAvailability$20 !== void 0 && (_updatedAvailability$21 = _updatedAvailability$20['Morning']) !== null && _updatedAvailability$21 !== void 0 && _updatedAvailability$21['Sunday']) {\n          await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Morning', 'Sunday', 'default');\n        }\n        if ((_updatedAvailability$22 = updatedAvailability[userId]) !== null && _updatedAvailability$22 !== void 0 && (_updatedAvailability$23 = _updatedAvailability$22['Noon']) !== null && _updatedAvailability$23 !== void 0 && _updatedAvailability$23['Sunday']) {\n          await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Noon', 'Sunday', 'default');\n        }\n      }\n    } else {\n      // אם היום אינו שבת, יש לבדוק את היום הבא\n      const hasSelectedShiftsOnNextDay = ['Morning', 'Noon', 'Evening', 'Night'].some(s => {\n        var _updatedAvailability$24, _updatedAvailability$25, _updatedAvailability$26;\n        return ((_updatedAvailability$24 = updatedAvailability[userId]) === null || _updatedAvailability$24 === void 0 ? void 0 : (_updatedAvailability$25 = _updatedAvailability$24[s]) === null || _updatedAvailability$25 === void 0 ? void 0 : (_updatedAvailability$26 = _updatedAvailability$25[nextDay]) === null || _updatedAvailability$26 === void 0 ? void 0 : _updatedAvailability$26.status) === 'selected';\n      });\n      if (!hasSelectedShiftsOnNextDay) {\n        var _updatedAvailability$27, _updatedAvailability$28, _updatedAvailability$29, _updatedAvailability$30, _updatedAvailability$31, _updatedAvailability$32;\n        if (((_updatedAvailability$27 = updatedAvailability[userId]) === null || _updatedAvailability$27 === void 0 ? void 0 : (_updatedAvailability$28 = _updatedAvailability$27['Morning']) === null || _updatedAvailability$28 === void 0 ? void 0 : (_updatedAvailability$29 = _updatedAvailability$28[nextDay]) === null || _updatedAvailability$29 === void 0 ? void 0 : _updatedAvailability$29.status) === 'disabled') {\n          updatedAvailability[userId]['Morning'][nextDay].status = 'default';\n          await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'default');\n        }\n        if (((_updatedAvailability$30 = updatedAvailability[userId]) === null || _updatedAvailability$30 === void 0 ? void 0 : (_updatedAvailability$31 = _updatedAvailability$30['Noon']) === null || _updatedAvailability$31 === void 0 ? void 0 : (_updatedAvailability$32 = _updatedAvailability$31[nextDay]) === null || _updatedAvailability$32 === void 0 ? void 0 : _updatedAvailability$32.status) === 'disabled') {\n          updatedAvailability[userId]['Noon'][nextDay].status = 'default';\n          await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'default');\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת זמינות ומשתמשים\n        const [availabilityData, usersData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers()]);\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n\n        // חישוב תאריכים לשבוע הנוכחי\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = status => {\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n\n      // Update the current shift's status to 'selected' or 'default'\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        // Disable other shifts on the same day\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n\n        // Handle unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        // Undo selection and revert unique rules\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n            if (otherShift === 'Morning' || otherShift === 'Noon') {\n              var _updatedAvailability$33, _updatedAvailability$34, _updatedAvailability$35;\n              // Check if the previous night's shift is not selected\n              const previousDay = calculatePreviousDay(day);\n              if (((_updatedAvailability$33 = updatedAvailability[userId]) === null || _updatedAvailability$33 === void 0 ? void 0 : (_updatedAvailability$34 = _updatedAvailability$33['Night']) === null || _updatedAvailability$34 === void 0 ? void 0 : (_updatedAvailability$35 = _updatedAvailability$34[previousDay]) === null || _updatedAvailability$35 === void 0 ? void 0 : _updatedAvailability$35.status) !== 'selected') {\n                updatedAvailability[userId][otherShift][day].status = 'default';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n              }\n            } else if (otherShift === 'Night') {\n              var _updatedAvailability$36, _updatedAvailability$37, _updatedAvailability$38, _updatedAvailability$39, _updatedAvailability$40, _updatedAvailability$41;\n              // Check if none of the next day's morning or noon shifts are selected\n              const nextDay = calculateNextDay(day);\n              if (!(((_updatedAvailability$36 = updatedAvailability[userId]) === null || _updatedAvailability$36 === void 0 ? void 0 : (_updatedAvailability$37 = _updatedAvailability$36['Morning']) === null || _updatedAvailability$37 === void 0 ? void 0 : (_updatedAvailability$38 = _updatedAvailability$37[nextDay]) === null || _updatedAvailability$38 === void 0 ? void 0 : _updatedAvailability$38.status) === 'selected' || ((_updatedAvailability$39 = updatedAvailability[userId]) === null || _updatedAvailability$39 === void 0 ? void 0 : (_updatedAvailability$40 = _updatedAvailability$39['Noon']) === null || _updatedAvailability$40 === void 0 ? void 0 : (_updatedAvailability$41 = _updatedAvailability$40[nextDay]) === null || _updatedAvailability$41 === void 0 ? void 0 : _updatedAvailability$41.status) === 'selected')) {\n                updatedAvailability[userId][otherShift][day].status = 'default';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n              }\n            } else {\n              updatedAvailability[userId][otherShift][day].status = 'default';\n              await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n            }\n          }\n        }\n\n        // Revert unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n\n      // Update state with the modified availability\n      setAvailability(updatedAvailability);\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n\n  // Helper functions to calculate previous and next days\n  const calculatePreviousDay = currentDay => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentIndex = daysOfWeek.indexOf(currentDay);\n    return currentIndex > 0 ? daysOfWeek[currentIndex - 1] : daysOfWeek[6];\n  };\n  const calculateNextDay = currentDay => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentIndex = daysOfWeek.indexOf(currentDay);\n    return currentIndex < 6 ? daysOfWeek[currentIndex + 1] : daysOfWeek[0];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(-1),\n          children: \"Previous Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"week-range\",\n          children: calculateWeekRange(weekOffset)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(1),\n          children: \"Next Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading schedule...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"schedule-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Shift\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 33\n            }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 51\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"date\",\n                children: weekDates[index]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 45\n              }, this)]\n            }, day, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: shift\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 37\n            }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: Object.entries(availability).map(([userId, userData]) => {\n                var _userData$shift;\n                const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n                if (availabilityInfo !== null && availabilityInfo !== void 0 && availabilityInfo.isAvailable) {\n                  var _users$userId;\n                  const statusClass = getStatusClass(availabilityInfo.status);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `availability-entry ${statusClass}`,\n                    onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                    style: {\n                      backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ecf0f1',\n                      color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                      pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                      cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                    },\n                    children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                  }, userId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 61\n                  }, this);\n                }\n                return null;\n              })\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 45\n            }, this))]\n          }, shift, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"LKVZQ73zzDjLcbfagMCmzpo06i4=\");\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","getAllAvailabilities","getUsers","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","updateAvailabilityStatus","Navbar","jsxDEV","_jsxDEV","ScheduleScreen","_s","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","userId","day","updatedAvailability","weekKey","_updatedAvailability$","_updatedAvailability$2","previousDay","calculatePreviousDay","status","nextDay","calculateNextDay","_updatedAvailability$3","_updatedAvailability$4","_updatedAvailability$5","_updatedAvailability$6","nextWeekKey","_updatedAvailability$7","_updatedAvailability$8","_updatedAvailability$9","_updatedAvailability$10","_updatedAvailability$14","_updatedAvailability$15","_updatedAvailability$16","hasOtherSelectedShifts","some","s","_updatedAvailability$11","_updatedAvailability$12","_updatedAvailability$13","hasSelectedShiftsOnSunday","_updatedAvailability$17","_updatedAvailability$18","_updatedAvailability$19","_updatedAvailability$20","_updatedAvailability$21","_updatedAvailability$22","_updatedAvailability$23","hasSelectedShiftsOnNextDay","_updatedAvailability$24","_updatedAvailability$25","_updatedAvailability$26","_updatedAvailability$27","_updatedAvailability$28","_updatedAvailability$29","_updatedAvailability$30","_updatedAvailability$31","_updatedAvailability$32","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","JSON","parse","localStorage","getItem","companyId","company","id","availabilityData","usersData","Promise","all","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","console","handleWeekChange","direction","prevOffset","getStatusClass","handleStatusUpdate","shift","currentStatus","newStatus","otherShift","_updatedAvailability$33","_updatedAvailability$34","_updatedAvailability$35","_updatedAvailability$36","_updatedAvailability$37","_updatedAvailability$38","_updatedAvailability$39","_updatedAvailability$40","_updatedAvailability$41","currentDay","daysOfWeek","currentIndex","indexOf","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","index","Object","entries","userData","_userData$shift","availabilityInfo","isAvailable","_users$userId","statusClass","style","backgroundColor","color","pointerEvents","cursor","name","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n\n    const selectMorningOrNoonShift = async (userId, day, updatedAvailability, weekKey, currentCompany) => {\n        const previousDay = calculatePreviousDay(day);\n\n        // בדיקה אם יש משמרת לילה ביום הקודם והפיכתה ל-disabled\n        if (updatedAvailability[userId]?.['Night']?.[previousDay]) {\n            updatedAvailability[userId]['Night'][previousDay].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'disabled');\n        }\n    };\n\n    const selectNightShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n        const nextDay = calculateNextDay(day);\n\n        if (day === 'Saturday') {\n            // עדכון משמרות של יום ראשון בשבוע הבא\n            const nextWeekKey = calculateWeekKey(weekOffset + 1); // מפתח השבוע הבא\n            if (updatedAvailability[userId]?.['Morning']?.['Sunday']) {\n                await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Morning', 'Sunday', 'disabled');\n            }\n            if (updatedAvailability[userId]?.['Noon']?.['Sunday']) {\n                await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Noon', 'Sunday', 'disabled');\n            }\n        } else {\n            // עדכון משמרות של היום הבא\n            if (updatedAvailability[userId]?.['Morning']?.[nextDay]) {\n                updatedAvailability[userId]['Morning'][nextDay].status = 'disabled';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'disabled');\n            }\n            if (updatedAvailability[userId]?.['Noon']?.[nextDay]) {\n                updatedAvailability[userId]['Noon'][nextDay].status = 'disabled';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'disabled');\n            }\n        }\n    };\n\n    const deselectMorningOrNoonShift = async (userId, day, updatedAvailability, weekKey, currentCompany) => {\n        const previousDay = calculatePreviousDay(day);\n\n        // בדיקה אם משמרות אחרות ביום הקודם נבחרו\n        const hasOtherSelectedShifts = ['Morning', 'Noon', 'Evening'].some(\n            (s) => updatedAvailability[userId]?.[s]?.[previousDay]?.status === 'selected'\n        );\n\n        // אם משמרת הלילה ביום הקודם במצב \"disabled\" ואין משמרות אחרות שנבחרו\n        if (\n            updatedAvailability[userId]?.['Night']?.[previousDay]?.status === 'disabled' &&\n            !hasOtherSelectedShifts\n        ) {\n            // עדכון סטטוס משמרת הלילה ל-\"default\"\n            updatedAvailability[userId]['Night'][previousDay].status = 'default';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'default');\n        }\n    };\n\n    const deselectNightShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n        const nextDay = calculateNextDay(day);\n\n        // אם היום הוא שבת, יש לבדוק את יום ראשון בשבוע הבא\n        if (day === 'Saturday') {\n            const nextWeekKey = calculateWeekKey(weekOffset + 1); // מפתח השבוע הבא\n\n            // בדיקה אם יש משמרות נבחרות ביום ראשון\n            const hasSelectedShiftsOnSunday = ['Morning', 'Noon', 'Evening', 'Night'].some(\n                (s) => updatedAvailability[userId]?.[s]?.['Sunday']?.status === 'selected'\n            );\n\n            if (!hasSelectedShiftsOnSunday) {\n                if (updatedAvailability[userId]?.['Morning']?.['Sunday']) {\n                    await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Morning', 'Sunday', 'default');\n                }\n                if (updatedAvailability[userId]?.['Noon']?.['Sunday']) {\n                    await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Noon', 'Sunday', 'default');\n                }\n            }\n        } else {\n            // אם היום אינו שבת, יש לבדוק את היום הבא\n            const hasSelectedShiftsOnNextDay = ['Morning', 'Noon', 'Evening', 'Night'].some(\n                (s) => updatedAvailability[userId]?.[s]?.[nextDay]?.status === 'selected'\n            );\n\n            if (!hasSelectedShiftsOnNextDay) {\n                if (updatedAvailability[userId]?.['Morning']?.[nextDay]?.status === 'disabled') {\n                    updatedAvailability[userId]['Morning'][nextDay].status = 'default';\n                    await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'default');\n                }\n                if (updatedAvailability[userId]?.['Noon']?.[nextDay]?.status === 'disabled') {\n                    updatedAvailability[userId]['Noon'][nextDay].status = 'default';\n                    await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'default');\n                }\n            }\n        }\n    };\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת זמינות ומשתמשים\n                const [availabilityData, usersData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers()\n                ]);\n\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n\n                // חישוב תאריכים לשבוע הנוכחי\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n                });\n                setWeekDates(dates);\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status) => {\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            // Update the current shift's status to 'selected' or 'default'\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                // Disable other shifts on the same day\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                // Handle unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                // Undo selection and revert unique rules\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n                        if (otherShift === 'Morning' || otherShift === 'Noon') {\n                            // Check if the previous night's shift is not selected\n                            const previousDay = calculatePreviousDay(day);\n                            if (\n                                updatedAvailability[userId]?.['Night']?.[previousDay]?.status !== 'selected'\n                            ) {\n                                updatedAvailability[userId][otherShift][day].status = 'default';\n                                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                            }\n                        } else if (otherShift === 'Night') {\n                            // Check if none of the next day's morning or noon shifts are selected\n                            const nextDay = calculateNextDay(day);\n                            if (\n                                !(\n                                    updatedAvailability[userId]?.['Morning']?.[nextDay]?.status === 'selected' ||\n                                    updatedAvailability[userId]?.['Noon']?.[nextDay]?.status === 'selected'\n                                )\n                            ) {\n                                updatedAvailability[userId][otherShift][day].status = 'default';\n                                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                            }\n                        } else {\n                            updatedAvailability[userId][otherShift][day].status = 'default';\n                            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                        }\n                    }\n                }\n\n                // Revert unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            // Update state with the modified availability\n            setAvailability(updatedAvailability);\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    // Helper functions to calculate previous and next days\n    const calculatePreviousDay = (currentDay) => {\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = daysOfWeek.indexOf(currentDay);\n        return currentIndex > 0 ? daysOfWeek[currentIndex - 1] : daysOfWeek[6];\n    };\n\n    const calculateNextDay = (currentDay) => {\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = daysOfWeek.indexOf(currentDay);\n        return currentIndex < 6 ? daysOfWeek[currentIndex + 1] : daysOfWeek[0];\n    };\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div> {/* רווח לניווט */}\n\n            <div className=\"schedule-container\">\n                <h2>Weekly Schedule</h2>\n                <div className=\"week-navigation\">\n                    <button onClick={() => handleWeekChange(-1)}>Previous Week</button>\n                    <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                    <button onClick={() => handleWeekChange(1)}>Next Week</button>\n                </div>\n\n                {isLoading ? (\n                    <p>Loading schedule...</p>\n                ) : error ? (\n                    <p className=\"error\">{error}</p>\n                ) : (\n                    <table className=\"schedule-table\">\n                        <thead>\n                            <tr>\n                                <th>Shift</th>\n                                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                    (day, index) => (\n                                        <th key={day}>\n                                            {day} <br />\n                                            <span className=\"date\">{weekDates[index]}</span>\n                                        </th>\n                                    )\n                                )}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                <tr key={shift}>\n                                    <td>{shift}</td>\n                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                        (day) => (\n                                            <td key={day}>\n                                                {Object.entries(availability).map(([userId, userData]) => {\n                                                    const availabilityInfo = userData?.[shift]?.[day];\n                                                    if (availabilityInfo?.isAvailable) {\n                                                        const statusClass = getStatusClass(availabilityInfo.status);\n                                                        return (\n                                                            <div\n                                                                key={userId}\n                                                                className={`availability-entry ${statusClass}`}\n                                                                onClick={() =>\n                                                                    handleStatusUpdate(\n                                                                        userId,\n                                                                        shift,\n                                                                        day,\n                                                                        availabilityInfo.status\n                                                                    )\n                                                                }\n                                                                style={{\n                                                                    backgroundColor:\n                                                                        availabilityInfo.status === 'selected'\n                                                                            ? '#2ecc71'\n                                                                            : availabilityInfo.status === 'disabled'\n                                                                                ? '#e74c3c'\n                                                                                : '#ecf0f1',\n                                                                    color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                    pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                    cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                }}\n                                                            >\n                                                                {users[userId]?.name || 'Unknown'}\n                                                            </div>\n                                                        );\n                                                    }\n                                                    return null;\n                                                })}\n                                            </td>\n                                        )\n                                    )}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default ScheduleScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}