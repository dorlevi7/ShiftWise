{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { saveAvailability, getAvailability, saveNecessaryEmployees, getNecessaryEmployees } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AvailabilityScreen = () => {\n  _s();\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [availability, setAvailability] = useState(null);\n  const [notes, setNotes] = useState('');\n  const [currentWeek, setCurrentWeek] = useState(1);\n  const [userData, setUserData] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      if (loggedUser.user.role === 'admin') {\n        const fetchEmployees = async () => {\n          try {\n            const usersData = await getUsers();\n            const companyId = loggedUser.company.id;\n            if (companyId) {\n              const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n                id,\n                ...user\n              })).filter(user => {\n                var _user$companyIds;\n                return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(company => company.companyId === companyId);\n              });\n              setEmployees(filteredEmployees);\n            }\n          } catch (error) {\n            console.error('Error fetching employees:', error);\n          }\n        };\n        fetchEmployees();\n      } else {\n        setSelectedEmployeeId(loggedUser.id);\n      }\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const fetchAvailability = async () => {\n      if (!selectedEmployeeId || !userData) return;\n      const companyId = userData.company.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      try {\n        const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n        setAvailability(initializeAvailability(fetchedAvailability || {}));\n        setNotes((fetchedAvailability === null || fetchedAvailability === void 0 ? void 0 : fetchedAvailability.notes) || '');\n      } catch (error) {\n        console.error('Error fetching availability:', error);\n        alert('Failed to fetch availability. Please try again.');\n      }\n    };\n    fetchAvailability();\n  }, [currentWeek, selectedEmployeeId, userData]);\n  const initializeAvailability = existingAvailability => {\n    return shifts.reduce((acc, shift) => {\n      acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n        var _existingAvailability, _existingAvailability2, _existingAvailability3, _existingAvailability4;\n        dayAcc[day] = {\n          isAvailable: ((_existingAvailability = existingAvailability[shift]) === null || _existingAvailability === void 0 ? void 0 : (_existingAvailability2 = _existingAvailability[day]) === null || _existingAvailability2 === void 0 ? void 0 : _existingAvailability2.isAvailable) || false,\n          status: ((_existingAvailability3 = existingAvailability[shift]) === null || _existingAvailability3 === void 0 ? void 0 : (_existingAvailability4 = _existingAvailability3[day]) === null || _existingAvailability4 === void 0 ? void 0 : _existingAvailability4.status) || 'default'\n        };\n        return dayAcc;\n      }, {});\n      return acc;\n    }, {});\n  };\n  const handleAvailabilityChange = (shift, day) => {\n    setAvailability(prev => ({\n      ...prev,\n      [shift]: {\n        ...prev[shift],\n        [day]: {\n          ...prev[shift][day],\n          isAvailable: !prev[shift][day].isAvailable\n        }\n      }\n    }));\n  };\n  const handleDayColumnClick = day => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = shifts.every(shift => {\n        var _updatedAvailability$, _updatedAvailability$2;\n        return (_updatedAvailability$ = updatedAvailability[shift]) === null || _updatedAvailability$ === void 0 ? void 0 : (_updatedAvailability$2 = _updatedAvailability$[day]) === null || _updatedAvailability$2 === void 0 ? void 0 : _updatedAvailability$2.isAvailable;\n      });\n      shifts.forEach(shift => {\n        updatedAvailability[shift][day].isAvailable = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleShiftRowClick = shift => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = daysOfWeek.every(day => {\n        var _updatedAvailability$3, _updatedAvailability$4;\n        return (_updatedAvailability$3 = updatedAvailability[shift]) === null || _updatedAvailability$3 === void 0 ? void 0 : (_updatedAvailability$4 = _updatedAvailability$3[day]) === null || _updatedAvailability$4 === void 0 ? void 0 : _updatedAvailability$4.isAvailable;\n      });\n      daysOfWeek.forEach(day => {\n        updatedAvailability[shift][day].isAvailable = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleSelectAll = () => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = shifts.every(shift => daysOfWeek.every(day => updatedAvailability[shift][day].isAvailable));\n      shifts.forEach(shift => {\n        daysOfWeek.forEach(day => {\n          updatedAvailability[shift][day].isAvailable = !allSelected;\n        });\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleSubmit = async () => {\n    if (!selectedEmployeeId) {\n      toast.error('Please select an employee to save availability.');\n      return;\n    }\n    const companyId = userData.company.id;\n    const weekKey = calculateWeekKey(currentWeek);\n    try {\n      // שמירת זמינות של המשתמש\n      const dataToSave = {\n        ...availability,\n        notes\n      };\n      await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n\n      // בדיקה אם יש כבר נתונים של necessaryEmployees ב-DB\n      let necessaryEmployees = await getNecessaryEmployees(companyId, weekKey);\n\n      // אם אין נתונים ב-DB, לאתחל אותם\n      if (!necessaryEmployees || Object.keys(necessaryEmployees).length === 0) {\n        necessaryEmployees = daysOfWeek.reduce((acc, day) => {\n          acc[day] = {\n            Morning: 0,\n            Noon: 0,\n            Evening: 0,\n            Night: 0\n          };\n          return acc;\n        }, {});\n\n        // שמירה ל-DB רק במקרה של אתחול\n        await saveNecessaryEmployees(companyId, weekKey, necessaryEmployees);\n      }\n      toast.success('Availability and notes saved successfully!');\n    } catch (error) {\n      console.error('Error saving availability or necessary employees:', error);\n      toast.error('Failed to save data. Please try again.');\n    }\n  };\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"availability-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weekly Availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), userData.user.role === 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"employee-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"employeeDropdown\",\n          children: \"Select Employee:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"employeeDropdown\",\n          onChange: e => setSelectedEmployeeId(e.target.value),\n          value: selectedEmployeeId || '',\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select an employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: employee.id,\n            children: employee.name\n          }, employee.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this), selectedEmployeeId && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"navigation-button\",\n            onClick: () => handleWeekChange(-1),\n            children: \"Previous Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"week-range\",\n            children: calculateWeekRange(currentWeek)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"navigation-button\",\n            onClick: () => handleWeekChange(1),\n            children: \"Next Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"availability-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                onClick: handleSelectAll,\n                className: \"clickable\",\n                children: \"Select All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 37\n              }, this), daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n                onClick: () => handleDayColumnClick(day),\n                className: \"clickable\",\n                children: day\n              }, day, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 41\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: shifts.map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handleShiftRowClick(shift),\n                className: \"clickable\",\n                children: shift\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 41\n              }, this), daysOfWeek.map(day => {\n                var _availability$shift, _availability$shift$d;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: (availability === null || availability === void 0 ? void 0 : (_availability$shift = availability[shift]) === null || _availability$shift === void 0 ? void 0 : (_availability$shift$d = _availability$shift[day]) === null || _availability$shift$d === void 0 ? void 0 : _availability$shift$d.isAvailable) || false,\n                    onChange: () => handleAvailabilityChange(shift, day)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 49\n                  }, this)\n                }, day, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 45\n                }, this);\n              })]\n            }, shift, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"notes-textarea\",\n          placeholder: \"Write weekly notes here...\",\n          value: notes,\n          onChange: e => setNotes(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n};\n_s(AvailabilityScreen, \"4OAXJ4Osdzm4DFQWbqbVGRLWEwM=\", false, function () {\n  return [useNavigate];\n});\n_c = AvailabilityScreen;\nexport default AvailabilityScreen;\nvar _c;\n$RefreshReg$(_c, \"AvailabilityScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Navbar","saveAvailability","getAvailability","saveNecessaryEmployees","getNecessaryEmployees","getUsers","calculateWeekKey","calculateWeekRange","toast","ToastContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","AvailabilityScreen","_s","daysOfWeek","shifts","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","availability","setAvailability","notes","setNotes","currentWeek","setCurrentWeek","userData","setUserData","weekOffset","setWeekOffset","navigate","loggedUser","JSON","parse","localStorage","getItem","user","role","fetchEmployees","usersData","companyId","company","id","filteredEmployees","Object","entries","map","filter","_user$companyIds","companyIds","some","error","console","fetchAvailability","weekKey","fetchedAvailability","initializeAvailability","alert","existingAvailability","reduce","acc","shift","dayAcc","day","_existingAvailability","_existingAvailability2","_existingAvailability3","_existingAvailability4","isAvailable","status","handleAvailabilityChange","prev","handleDayColumnClick","updatedAvailability","stringify","allSelected","every","_updatedAvailability$","_updatedAvailability$2","forEach","handleShiftRowClick","_updatedAvailability$3","_updatedAvailability$4","handleSelectAll","handleSubmit","dataToSave","necessaryEmployees","keys","length","Morning","Noon","Evening","Night","success","handleWeekChange","direction","prevOffset","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","onChange","e","target","value","employee","name","onClick","_availability$shift","_availability$shift$d","type","checked","placeholder","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { saveAvailability, getAvailability, saveNecessaryEmployees, getNecessaryEmployees } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\n\nconst AvailabilityScreen = () => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n\n    const [employees, setEmployees] = useState([]);\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [availability, setAvailability] = useState(null);\n    const [notes, setNotes] = useState('');\n    const [currentWeek, setCurrentWeek] = useState(1);\n    const [userData, setUserData] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n\n            if (loggedUser.user.role === 'admin') {\n                const fetchEmployees = async () => {\n                    try {\n                        const usersData = await getUsers();\n                        const companyId = loggedUser.company.id;\n\n                        if (companyId) {\n                            const filteredEmployees = Object.entries(usersData)\n                                .map(([id, user]) => ({ id, ...user }))\n                                .filter((user) =>\n                                    user.companyIds?.some((company) => company.companyId === companyId)\n                                );\n\n                            setEmployees(filteredEmployees);\n                        }\n                    } catch (error) {\n                        console.error('Error fetching employees:', error);\n                    }\n                };\n\n                fetchEmployees();\n            } else {\n                setSelectedEmployeeId(loggedUser.id);\n            }\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchAvailability = async () => {\n            if (!selectedEmployeeId || !userData) return;\n\n            const companyId = userData.company.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            try {\n                const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n                setAvailability(initializeAvailability(fetchedAvailability || {}));\n                setNotes(fetchedAvailability?.notes || '');\n            } catch (error) {\n                console.error('Error fetching availability:', error);\n                alert('Failed to fetch availability. Please try again.');\n            }\n        };\n\n        fetchAvailability();\n    }, [currentWeek, selectedEmployeeId, userData]);\n\n    const initializeAvailability = (existingAvailability) => {\n        return shifts.reduce((acc, shift) => {\n            acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n                dayAcc[day] = {\n                    isAvailable: existingAvailability[shift]?.[day]?.isAvailable || false,\n                    status: existingAvailability[shift]?.[day]?.status || 'default'\n                };\n                return dayAcc;\n            }, {});\n            return acc;\n        }, {});\n    };\n\n    const handleAvailabilityChange = (shift, day) => {\n        setAvailability((prev) => ({\n            ...prev,\n            [shift]: {\n                ...prev[shift],\n                [day]: {\n                    ...prev[shift][day],\n                    isAvailable: !prev[shift][day].isAvailable,\n                },\n            },\n        }));\n    };\n\n    const handleDayColumnClick = (day) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = shifts.every((shift) => updatedAvailability[shift]?.[day]?.isAvailable);\n\n            shifts.forEach((shift) => {\n                updatedAvailability[shift][day].isAvailable = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleShiftRowClick = (shift) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = daysOfWeek.every((day) => updatedAvailability[shift]?.[day]?.isAvailable);\n\n            daysOfWeek.forEach((day) => {\n                updatedAvailability[shift][day].isAvailable = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleSelectAll = () => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = shifts.every((shift) =>\n                daysOfWeek.every((day) => updatedAvailability[shift][day].isAvailable)\n            );\n\n            shifts.forEach((shift) => {\n                daysOfWeek.forEach((day) => {\n                    updatedAvailability[shift][day].isAvailable = !allSelected;\n                });\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleSubmit = async () => {\n        if (!selectedEmployeeId) {\n            toast.error('Please select an employee to save availability.');\n            return;\n        }\n\n        const companyId = userData.company.id;\n        const weekKey = calculateWeekKey(currentWeek);\n\n        try {\n            // שמירת זמינות של המשתמש\n            const dataToSave = {\n                ...availability,\n                notes,\n            };\n            await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n\n            // בדיקה אם יש כבר נתונים של necessaryEmployees ב-DB\n            let necessaryEmployees = await getNecessaryEmployees(companyId, weekKey);\n\n            // אם אין נתונים ב-DB, לאתחל אותם\n            if (!necessaryEmployees || Object.keys(necessaryEmployees).length === 0) {\n                necessaryEmployees = daysOfWeek.reduce((acc, day) => {\n                    acc[day] = {\n                        Morning: 0,\n                        Noon: 0,\n                        Evening: 0,\n                        Night: 0,\n                    };\n                    return acc;\n                }, {});\n\n                // שמירה ל-DB רק במקרה של אתחול\n                await saveNecessaryEmployees(companyId, weekKey, necessaryEmployees);\n            }\n\n            toast.success('Availability and notes saved successfully!');\n        } catch (error) {\n            console.error('Error saving availability or necessary employees:', error);\n            toast.error('Failed to save data. Please try again.');\n        }\n    };\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n\n\n    if (!userData) {\n        return <p>Loading...</p>;\n    }\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div>\n            <div className=\"availability-container\">\n                <h1>Weekly Availability</h1>\n                {userData.user.role === 'admin' && (\n                    <div className=\"employee-selector\">\n                        <label htmlFor=\"employeeDropdown\">Select Employee:</label>\n                        <select\n                            id=\"employeeDropdown\"\n                            onChange={(e) => setSelectedEmployeeId(e.target.value)}\n                            value={selectedEmployeeId || ''}\n                        >\n                            <option value=\"\">Select an employee</option>\n                            {employees.map((employee) => (\n                                <option key={employee.id} value={employee.id}>\n                                    {employee.name}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                )}\n                {selectedEmployeeId && (\n                    <>\n                        <div className=\"week-navigation\">\n                            <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                Previous Week\n                            </button>\n                            <h2 className=\"week-range\">{calculateWeekRange(currentWeek)}</h2>\n                            <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                Next Week\n                            </button>\n                        </div>\n                        <table className=\"availability-table\">\n                            <thead>\n                                <tr>\n                                    <th onClick={handleSelectAll} className=\"clickable\">Select All</th>\n                                    {daysOfWeek.map((day) => (\n                                        <th key={day} onClick={() => handleDayColumnClick(day)} className=\"clickable\">\n                                            {day}\n                                        </th>\n                                    ))}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {shifts.map((shift) => (\n                                    <tr key={shift}>\n                                        <td onClick={() => handleShiftRowClick(shift)} className=\"clickable\">\n                                            {shift}\n                                        </td>\n                                        {daysOfWeek.map((day) => (\n                                            <td key={day}>\n                                                <input\n                                                    type=\"checkbox\"\n                                                    checked={availability?.[shift]?.[day]?.isAvailable || false}\n                                                    onChange={() => handleAvailabilityChange(shift, day)}\n                                                />\n                                            </td>\n                                        ))}\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                        <textarea\n                            className=\"notes-textarea\"\n                            placeholder=\"Write weekly notes here...\"\n                            value={notes}\n                            onChange={(e) => setNotes(e.target.value)}\n                        ></textarea>\n                        <button className=\"submit-button\" onClick={handleSubmit}>\n                            Submit\n                        </button>\n                    </>\n                )}\n            </div>\n\n            <ToastContainer />\n        </div>\n    );\n};\n\nexport default AvailabilityScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,gBAAgB,EAAEC,eAAe,EAAEC,sBAAsB,EAAEC,qBAAqB,QAAQ,iCAAiC;AAClI,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,gBAAgB,EAAEC,kBAAkB,QAAQ,gBAAgB;AACrE,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C,OAAO,kCAAkC;AACzC,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9B,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;EACjG,MAAMC,MAAM,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;EAEtD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACuB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC2B,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC6B,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC+B,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACiC,UAAU,EAAEC,aAAa,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC;EAE/C,MAAMmC,QAAQ,GAAGjC,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMmC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3D,IAAI,CAACJ,UAAU,EAAE;MACbD,QAAQ,CAAC,GAAG,CAAC;IACjB,CAAC,MAAM;MACHH,WAAW,CAACI,UAAU,CAAC;MAEvB,IAAIA,UAAU,CAACK,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;QAClC,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;UAC/B,IAAI;YACA,MAAMC,SAAS,GAAG,MAAMpC,QAAQ,CAAC,CAAC;YAClC,MAAMqC,SAAS,GAAGT,UAAU,CAACU,OAAO,CAACC,EAAE;YAEvC,IAAIF,SAAS,EAAE;cACX,MAAMG,iBAAiB,GAAGC,MAAM,CAACC,OAAO,CAACN,SAAS,CAAC,CAC9CO,GAAG,CAAC,CAAC,CAACJ,EAAE,EAAEN,IAAI,CAAC,MAAM;gBAAEM,EAAE;gBAAE,GAAGN;cAAK,CAAC,CAAC,CAAC,CACtCW,MAAM,CAAEX,IAAI;gBAAA,IAAAY,gBAAA;gBAAA,QAAAA,gBAAA,GACTZ,IAAI,CAACa,UAAU,cAAAD,gBAAA,uBAAfA,gBAAA,CAAiBE,IAAI,CAAET,OAAO,IAAKA,OAAO,CAACD,SAAS,KAAKA,SAAS,CAAC;cAAA,CACvE,CAAC;cAELvB,YAAY,CAAC0B,iBAAiB,CAAC;YACnC;UACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;YACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACrD;QACJ,CAAC;QAEDb,cAAc,CAAC,CAAC;MACpB,CAAC,MAAM;QACHnB,qBAAqB,CAACY,UAAU,CAACW,EAAE,CAAC;MACxC;IACJ;EACJ,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAEdlC,SAAS,CAAC,MAAM;IACZ,MAAMyD,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI,CAACnC,kBAAkB,IAAI,CAACQ,QAAQ,EAAE;MAEtC,MAAMc,SAAS,GAAGd,QAAQ,CAACe,OAAO,CAACC,EAAE;MACrC,MAAMY,OAAO,GAAGlD,gBAAgB,CAACoB,WAAW,CAAC;MAE7C,IAAI;QACA,MAAM+B,mBAAmB,GAAG,MAAMvD,eAAe,CAACwC,SAAS,EAAEc,OAAO,EAAEpC,kBAAkB,CAAC;QACzFG,eAAe,CAACmC,sBAAsB,CAACD,mBAAmB,IAAI,CAAC,CAAC,CAAC,CAAC;QAClEhC,QAAQ,CAAC,CAAAgC,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEjC,KAAK,KAAI,EAAE,CAAC;MAC9C,CAAC,CAAC,OAAO6B,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDM,KAAK,CAAC,iDAAiD,CAAC;MAC5D;IACJ,CAAC;IAEDJ,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAAC7B,WAAW,EAAEN,kBAAkB,EAAEQ,QAAQ,CAAC,CAAC;EAE/C,MAAM8B,sBAAsB,GAAIE,oBAAoB,IAAK;IACrD,OAAO3C,MAAM,CAAC4C,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;MACjCD,GAAG,CAACC,KAAK,CAAC,GAAG/C,UAAU,CAAC6C,MAAM,CAAC,CAACG,MAAM,EAAEC,GAAG,KAAK;QAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;QAC5CL,MAAM,CAACC,GAAG,CAAC,GAAG;UACVK,WAAW,EAAE,EAAAJ,qBAAA,GAAAN,oBAAoB,CAACG,KAAK,CAAC,cAAAG,qBAAA,wBAAAC,sBAAA,GAA3BD,qBAAA,CAA8BD,GAAG,CAAC,cAAAE,sBAAA,uBAAlCA,sBAAA,CAAoCG,WAAW,KAAI,KAAK;UACrEC,MAAM,EAAE,EAAAH,sBAAA,GAAAR,oBAAoB,CAACG,KAAK,CAAC,cAAAK,sBAAA,wBAAAC,sBAAA,GAA3BD,sBAAA,CAA8BH,GAAG,CAAC,cAAAI,sBAAA,uBAAlCA,sBAAA,CAAoCE,MAAM,KAAI;QAC1D,CAAC;QACD,OAAOP,MAAM;MACjB,CAAC,EAAE,CAAC,CAAC,CAAC;MACN,OAAOF,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC;EAED,MAAMU,wBAAwB,GAAGA,CAACT,KAAK,EAAEE,GAAG,KAAK;IAC7C1C,eAAe,CAAEkD,IAAI,KAAM;MACvB,GAAGA,IAAI;MACP,CAACV,KAAK,GAAG;QACL,GAAGU,IAAI,CAACV,KAAK,CAAC;QACd,CAACE,GAAG,GAAG;UACH,GAAGQ,IAAI,CAACV,KAAK,CAAC,CAACE,GAAG,CAAC;UACnBK,WAAW,EAAE,CAACG,IAAI,CAACV,KAAK,CAAC,CAACE,GAAG,CAAC,CAACK;QACnC;MACJ;IACJ,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMI,oBAAoB,GAAIT,GAAG,IAAK;IAClC1C,eAAe,CAAEkD,IAAI,IAAK;MACtB,MAAME,mBAAmB,GAAGzC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC0C,SAAS,CAACH,IAAI,CAAC,CAAC;MAC5D,MAAMI,WAAW,GAAG5D,MAAM,CAAC6D,KAAK,CAAEf,KAAK;QAAA,IAAAgB,qBAAA,EAAAC,sBAAA;QAAA,QAAAD,qBAAA,GAAKJ,mBAAmB,CAACZ,KAAK,CAAC,cAAAgB,qBAAA,wBAAAC,sBAAA,GAA1BD,qBAAA,CAA6Bd,GAAG,CAAC,cAAAe,sBAAA,uBAAjCA,sBAAA,CAAmCV,WAAW;MAAA,EAAC;MAE3FrD,MAAM,CAACgE,OAAO,CAAElB,KAAK,IAAK;QACtBY,mBAAmB,CAACZ,KAAK,CAAC,CAACE,GAAG,CAAC,CAACK,WAAW,GAAG,CAACO,WAAW;MAC9D,CAAC,CAAC;MAEF,OAAOF,mBAAmB;IAC9B,CAAC,CAAC;EACN,CAAC;EAED,MAAMO,mBAAmB,GAAInB,KAAK,IAAK;IACnCxC,eAAe,CAAEkD,IAAI,IAAK;MACtB,MAAME,mBAAmB,GAAGzC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC0C,SAAS,CAACH,IAAI,CAAC,CAAC;MAC5D,MAAMI,WAAW,GAAG7D,UAAU,CAAC8D,KAAK,CAAEb,GAAG;QAAA,IAAAkB,sBAAA,EAAAC,sBAAA;QAAA,QAAAD,sBAAA,GAAKR,mBAAmB,CAACZ,KAAK,CAAC,cAAAoB,sBAAA,wBAAAC,sBAAA,GAA1BD,sBAAA,CAA6BlB,GAAG,CAAC,cAAAmB,sBAAA,uBAAjCA,sBAAA,CAAmCd,WAAW;MAAA,EAAC;MAE7FtD,UAAU,CAACiE,OAAO,CAAEhB,GAAG,IAAK;QACxBU,mBAAmB,CAACZ,KAAK,CAAC,CAACE,GAAG,CAAC,CAACK,WAAW,GAAG,CAACO,WAAW;MAC9D,CAAC,CAAC;MAEF,OAAOF,mBAAmB;IAC9B,CAAC,CAAC;EACN,CAAC;EAED,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC1B9D,eAAe,CAAEkD,IAAI,IAAK;MACtB,MAAME,mBAAmB,GAAGzC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC0C,SAAS,CAACH,IAAI,CAAC,CAAC;MAC5D,MAAMI,WAAW,GAAG5D,MAAM,CAAC6D,KAAK,CAAEf,KAAK,IACnC/C,UAAU,CAAC8D,KAAK,CAAEb,GAAG,IAAKU,mBAAmB,CAACZ,KAAK,CAAC,CAACE,GAAG,CAAC,CAACK,WAAW,CACzE,CAAC;MAEDrD,MAAM,CAACgE,OAAO,CAAElB,KAAK,IAAK;QACtB/C,UAAU,CAACiE,OAAO,CAAEhB,GAAG,IAAK;UACxBU,mBAAmB,CAACZ,KAAK,CAAC,CAACE,GAAG,CAAC,CAACK,WAAW,GAAG,CAACO,WAAW;QAC9D,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,OAAOF,mBAAmB;IAC9B,CAAC,CAAC;EACN,CAAC;EAED,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAAClE,kBAAkB,EAAE;MACrBZ,KAAK,CAAC6C,KAAK,CAAC,iDAAiD,CAAC;MAC9D;IACJ;IAEA,MAAMX,SAAS,GAAGd,QAAQ,CAACe,OAAO,CAACC,EAAE;IACrC,MAAMY,OAAO,GAAGlD,gBAAgB,CAACoB,WAAW,CAAC;IAE7C,IAAI;MACA;MACA,MAAM6D,UAAU,GAAG;QACf,GAAGjE,YAAY;QACfE;MACJ,CAAC;MACD,MAAMvB,gBAAgB,CAACyC,SAAS,EAAEc,OAAO,EAAEpC,kBAAkB,EAAEmE,UAAU,CAAC;;MAE1E;MACA,IAAIC,kBAAkB,GAAG,MAAMpF,qBAAqB,CAACsC,SAAS,EAAEc,OAAO,CAAC;;MAExE;MACA,IAAI,CAACgC,kBAAkB,IAAI1C,MAAM,CAAC2C,IAAI,CAACD,kBAAkB,CAAC,CAACE,MAAM,KAAK,CAAC,EAAE;QACrEF,kBAAkB,GAAGxE,UAAU,CAAC6C,MAAM,CAAC,CAACC,GAAG,EAAEG,GAAG,KAAK;UACjDH,GAAG,CAACG,GAAG,CAAC,GAAG;YACP0B,OAAO,EAAE,CAAC;YACVC,IAAI,EAAE,CAAC;YACPC,OAAO,EAAE,CAAC;YACVC,KAAK,EAAE;UACX,CAAC;UACD,OAAOhC,GAAG;QACd,CAAC,EAAE,CAAC,CAAC,CAAC;;QAEN;QACA,MAAM3D,sBAAsB,CAACuC,SAAS,EAAEc,OAAO,EAAEgC,kBAAkB,CAAC;MACxE;MAEAhF,KAAK,CAACuF,OAAO,CAAC,4CAA4C,CAAC;IAC/D,CAAC,CAAC,OAAO1C,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;MACzE7C,KAAK,CAAC6C,KAAK,CAAC,wCAAwC,CAAC;IACzD;EACJ,CAAC;EAED,MAAM2C,gBAAgB,GAAIC,SAAS,IAAK;IACpClE,aAAa,CAAEmE,UAAU,IAAKA,UAAU,GAAGD,SAAS,CAAC;EACzD,CAAC;EAID,IAAI,CAACrE,QAAQ,EAAE;IACX,oBAAOjB,OAAA;MAAAwF,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC5B;EAEA,oBACI5F,OAAA;IAAAwF,QAAA,gBACIxF,OAAA,CAACX,MAAM;MAAAoG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV5F,OAAA;MAAK6F,SAAS,EAAC;IAAoB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC1C5F,OAAA;MAAK6F,SAAS,EAAC,wBAAwB;MAAAL,QAAA,gBACnCxF,OAAA;QAAAwF,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC3B3E,QAAQ,CAACU,IAAI,CAACC,IAAI,KAAK,OAAO,iBAC3B5B,OAAA;QAAK6F,SAAS,EAAC,mBAAmB;QAAAL,QAAA,gBAC9BxF,OAAA;UAAO8F,OAAO,EAAC,kBAAkB;UAAAN,QAAA,EAAC;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC1D5F,OAAA;UACIiC,EAAE,EAAC,kBAAkB;UACrB8D,QAAQ,EAAGC,CAAC,IAAKtF,qBAAqB,CAACsF,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;UACvDA,KAAK,EAAEzF,kBAAkB,IAAI,EAAG;UAAA+E,QAAA,gBAEhCxF,OAAA;YAAQkG,KAAK,EAAC,EAAE;YAAAV,QAAA,EAAC;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAC3CrF,SAAS,CAAC8B,GAAG,CAAE8D,QAAQ,iBACpBnG,OAAA;YAA0BkG,KAAK,EAAEC,QAAQ,CAAClE,EAAG;YAAAuD,QAAA,EACxCW,QAAQ,CAACC;UAAI,GADLD,QAAQ,CAAClE,EAAE;YAAAwD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEhB,CACX,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CACR,EACAnF,kBAAkB,iBACfT,OAAA,CAAAE,SAAA;QAAAsF,QAAA,gBACIxF,OAAA;UAAK6F,SAAS,EAAC,iBAAiB;UAAAL,QAAA,gBAC5BxF,OAAA;YAAQ6F,SAAS,EAAC,mBAAmB;YAACQ,OAAO,EAAEA,CAAA,KAAMhB,gBAAgB,CAAC,CAAC,CAAC,CAAE;YAAAG,QAAA,EAAC;UAE3E;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT5F,OAAA;YAAI6F,SAAS,EAAC,YAAY;YAAAL,QAAA,EAAE5F,kBAAkB,CAACmB,WAAW;UAAC;YAAA0E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACjE5F,OAAA;YAAQ6F,SAAS,EAAC,mBAAmB;YAACQ,OAAO,EAAEA,CAAA,KAAMhB,gBAAgB,CAAC,CAAC,CAAE;YAAAG,QAAA,EAAC;UAE1E;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC,eACN5F,OAAA;UAAO6F,SAAS,EAAC,oBAAoB;UAAAL,QAAA,gBACjCxF,OAAA;YAAAwF,QAAA,eACIxF,OAAA;cAAAwF,QAAA,gBACIxF,OAAA;gBAAIqG,OAAO,EAAE3B,eAAgB;gBAACmB,SAAS,EAAC,WAAW;gBAAAL,QAAA,EAAC;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EAClEvF,UAAU,CAACgC,GAAG,CAAEiB,GAAG,iBAChBtD,OAAA;gBAAcqG,OAAO,EAAEA,CAAA,KAAMtC,oBAAoB,CAACT,GAAG,CAAE;gBAACuC,SAAS,EAAC,WAAW;gBAAAL,QAAA,EACxElC;cAAG,GADCA,GAAG;gBAAAmC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAER,CACP,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACR5F,OAAA;YAAAwF,QAAA,EACKlF,MAAM,CAAC+B,GAAG,CAAEe,KAAK,iBACdpD,OAAA;cAAAwF,QAAA,gBACIxF,OAAA;gBAAIqG,OAAO,EAAEA,CAAA,KAAM9B,mBAAmB,CAACnB,KAAK,CAAE;gBAACyC,SAAS,EAAC,WAAW;gBAAAL,QAAA,EAC/DpC;cAAK;gBAAAqC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC,EACJvF,UAAU,CAACgC,GAAG,CAAEiB,GAAG;gBAAA,IAAAgD,mBAAA,EAAAC,qBAAA;gBAAA,oBAChBvG,OAAA;kBAAAwF,QAAA,eACIxF,OAAA;oBACIwG,IAAI,EAAC,UAAU;oBACfC,OAAO,EAAE,CAAA9F,YAAY,aAAZA,YAAY,wBAAA2F,mBAAA,GAAZ3F,YAAY,CAAGyC,KAAK,CAAC,cAAAkD,mBAAA,wBAAAC,qBAAA,GAArBD,mBAAA,CAAwBhD,GAAG,CAAC,cAAAiD,qBAAA,uBAA5BA,qBAAA,CAA8B5C,WAAW,KAAI,KAAM;oBAC5DoC,QAAQ,EAAEA,CAAA,KAAMlC,wBAAwB,CAACT,KAAK,EAAEE,GAAG;kBAAE;oBAAAmC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACxD;gBAAC,GALGtC,GAAG;kBAAAmC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAMR,CAAC;cAAA,CACR,CAAC;YAAA,GAZGxC,KAAK;cAAAqC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAaV,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACR5F,OAAA;UACI6F,SAAS,EAAC,gBAAgB;UAC1Ba,WAAW,EAAC,4BAA4B;UACxCR,KAAK,EAAErF,KAAM;UACbkF,QAAQ,EAAGC,CAAC,IAAKlF,QAAQ,CAACkF,CAAC,CAACC,MAAM,CAACC,KAAK;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC,eACZ5F,OAAA;UAAQ6F,SAAS,EAAC,eAAe;UAACQ,OAAO,EAAE1B,YAAa;UAAAa,QAAA,EAAC;QAEzD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACX,CACL;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAEN5F,OAAA,CAACF,cAAc;MAAA2F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEd,CAAC;AAACxF,EAAA,CA9QID,kBAAkB;EAAA,QAYHf,WAAW;AAAA;AAAAuH,EAAA,GAZ1BxG,kBAAkB;AAgRxB,eAAeA,kBAAkB;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}