{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js\",\n  _s = $RefreshSig$();\n// React and core libraries\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Internal components and styles\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport '../styles/StatisticsScreen.css';\n\n// Services\nimport { getUsers } from '../services/userService';\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utils\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StatisticsScreen = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [stats, setStats] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const [weeksRange, setWeeksRange] = useState(1);\n  const navigate = useNavigate();\n  useEffect(() => {\n    window.scrollTo({\n      top: 0\n    });\n  }, []);\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      const fetchEmployees = async () => {\n        try {\n          const usersData = await getUsers();\n          const companyId = loggedUser.company.id;\n          const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n            id,\n            ...user\n          })).filter(user => {\n            var _user$companyIds;\n            return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(c => c.companyId === companyId);\n          });\n          setEmployees(filteredEmployees);\n        } catch (error) {\n          console.error('Error fetching employees:', error);\n        }\n      };\n      fetchEmployees();\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const fetchStats = async () => {\n      if (!userData || !selectedEmployeeId) return;\n      try {\n        const companyId = userData.company.id;\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = now.getMonth() + 1;\n        let totalNight = 0;\n        let totalShabbat = 0;\n        let totalRegular = 0;\n        for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n          const weekKey = calculateWeekKey(offset);\n          const data = await getWeeklyStats(companyId, year, month, weekKey, selectedEmployeeId);\n          if (data) {\n            totalNight += data.nightShifts || 0;\n            totalShabbat += data.shabbatShifts || 0;\n            totalRegular += data.regularShifts || 0;\n          }\n        }\n        const totalAllShifts = totalNight + totalShabbat + totalRegular;\n        setStats({\n          nightShifts: totalNight,\n          shabbatShifts: totalShabbat,\n          regularShifts: totalRegular,\n          avgNight: totalNight / weeksRange,\n          avgShabbat: totalShabbat / weeksRange,\n          avgRegular: totalRegular / weeksRange,\n          totalAll: totalAllShifts,\n          avgAll: totalAllShifts / weeksRange\n        });\n      } catch (error) {\n        console.error('Error fetching stats:', error);\n        toast.error('Failed to fetch statistics');\n      }\n    };\n    fetchStats();\n  }, [userData, selectedEmployeeId, weekOffset, weeksRange]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prev => prev + direction);\n  };\n  const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"statistics-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Shift Statistics Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Employee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            className: \"employee-dropdown\",\n            classNamePrefix: \"react-select\",\n            options: sortedEmployees.map(e => ({\n              value: e.id,\n              label: e.name\n            })),\n            onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n            value: sortedEmployees.map(e => ({\n              value: e.id,\n              label: e.name\n            })).find(o => o.value === selectedEmployeeId) || null,\n            placeholder: \"Choose employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), selectedEmployeeId && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"week-navigation centered-navigation\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(-1),\n              children: \"Previous Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"week-range\",\n              children: weeksRange === 1 ? `Week: ${calculateWeekRange(weekOffset)}` : `Weeks: ${calculateWeekRange(weekOffset - weeksRange + 1)} To ${calculateWeekRange(weekOffset)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(1),\n              children: \"Next Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weeks-range-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"weeksRange\",\n              children: \"Number of weeks to include:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              id: \"weeksRange\",\n              min: \"1\",\n              value: weeksRange,\n              onChange: e => {\n                const value = parseInt(e.target.value);\n                if (!isNaN(value) && value > 0) {\n                  setWeeksRange(value);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), stats ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"statistics-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Total Night Shifts:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 40\n              }, this), \" \", stats.nightShifts]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Total Shabbat Shifts:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 40\n              }, this), \" \", stats.shabbatShifts]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Total Regular Shifts:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 40\n              }, this), \" \", stats.regularShifts]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Total All Shifts:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 40\n              }, this), \" \", stats.totalAll]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Average per Week:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 40\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Night: \", stats.avgNight.toFixed(2), \" (\", (stats.nightShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Shabbat: \", stats.avgShabbat.toFixed(2), \" (\", (stats.shabbatShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Regular: \", stats.avgRegular.toFixed(2), \" (\", (stats.regularShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"All Shifts: \", stats.avgAll.toFixed(2), \" (100%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-stats-message\",\n            children: \"No statistics available for this period.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(StatisticsScreen, \"0PnuiXdGMq0PIkm2an+gZA4LzFE=\", false, function () {\n  return [useNavigate];\n});\n_c = StatisticsScreen;\nexport default StatisticsScreen;\nvar _c;\n$RefreshReg$(_c, \"StatisticsScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","toast","ToastContainer","Select","Navbar","Loader","BackgroundWrapper","getUsers","getWeeklyStats","calculateWeekKey","calculateWeekRange","jsxDEV","_jsxDEV","Fragment","_Fragment","StatisticsScreen","_s","userData","setUserData","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","stats","setStats","weekOffset","setWeekOffset","weeksRange","setWeeksRange","navigate","window","scrollTo","top","loggedUser","JSON","parse","localStorage","getItem","fetchEmployees","usersData","companyId","company","id","filteredEmployees","Object","entries","map","user","filter","_user$companyIds","companyIds","some","c","error","console","fetchStats","now","Date","year","getFullYear","month","getMonth","totalNight","totalShabbat","totalRegular","offset","weekKey","data","nightShifts","shabbatShifts","regularShifts","totalAllShifts","avgNight","avgShabbat","avgRegular","totalAll","avgAll","handleWeekChange","direction","prev","sortedEmployees","sort","a","b","name","localeCompare","children","fileName","_jsxFileName","lineNumber","columnNumber","className","classNamePrefix","options","e","value","label","onChange","option","find","o","placeholder","onClick","htmlFor","type","min","parseInt","target","isNaN","toFixed","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js"],"sourcesContent":["// React and core libraries\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Internal components and styles\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport '../styles/StatisticsScreen.css';\n\n// Services\nimport { getUsers } from '../services/userService';\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utils\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\nconst StatisticsScreen = () => {\n    const [userData, setUserData] = useState(null);\n    const [employees, setEmployees] = useState([]);\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [stats, setStats] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n    const [weeksRange, setWeeksRange] = useState(1);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        window.scrollTo({ top: 0 });\n    }, []);\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n            const fetchEmployees = async () => {\n                try {\n                    const usersData = await getUsers();\n                    const companyId = loggedUser.company.id;\n                    const filteredEmployees = Object.entries(usersData)\n                        .map(([id, user]) => ({ id, ...user }))\n                        .filter((user) => user.companyIds?.some((c) => c.companyId === companyId));\n                    setEmployees(filteredEmployees);\n                } catch (error) {\n                    console.error('Error fetching employees:', error);\n                }\n            };\n            fetchEmployees();\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchStats = async () => {\n            if (!userData || !selectedEmployeeId) return;\n\n            try {\n                const companyId = userData.company.id;\n                const now = new Date();\n                const year = now.getFullYear();\n                const month = now.getMonth() + 1;\n\n                let totalNight = 0;\n                let totalShabbat = 0;\n                let totalRegular = 0;\n\n                for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n                    const weekKey = calculateWeekKey(offset);\n                    const data = await getWeeklyStats(companyId, year, month, weekKey, selectedEmployeeId);\n\n                    if (data) {\n                        totalNight += data.nightShifts || 0;\n                        totalShabbat += data.shabbatShifts || 0;\n                        totalRegular += data.regularShifts || 0;\n                    }\n                }\n\n                const totalAllShifts = totalNight + totalShabbat + totalRegular;\n\n                setStats({\n                    nightShifts: totalNight,\n                    shabbatShifts: totalShabbat,\n                    regularShifts: totalRegular,\n                    avgNight: totalNight / weeksRange,\n                    avgShabbat: totalShabbat / weeksRange,\n                    avgRegular: totalRegular / weeksRange,\n                    totalAll: totalAllShifts,\n                    avgAll: totalAllShifts / weeksRange\n                });\n\n            } catch (error) {\n                console.error('Error fetching stats:', error);\n                toast.error('Failed to fetch statistics');\n            }\n        };\n\n        fetchStats();\n    }, [userData, selectedEmployeeId, weekOffset, weeksRange]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prev) => prev + direction);\n    };\n\n    const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n\n    return (\n        <BackgroundWrapper>\n            <div>\n                <Navbar />\n                <div className=\"navbar-placeholder\"></div>\n\n                <div className=\"statistics-container\">\n                    <h1>Shift Statistics Summary</h1>\n\n                    <div className=\"employee-selector\">\n                        <label>Select Employee:</label>\n                        <Select\n                            className=\"employee-dropdown\"\n                            classNamePrefix=\"react-select\"\n                            options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                            onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                            value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                            placeholder=\"Choose employee\"\n                        />\n                    </div>\n\n                    {selectedEmployeeId && (\n                        <>\n                            <div className=\"week-navigation centered-navigation\">\n                                <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                    Previous Week\n                                </button>\n                                <h2 className=\"week-range\">\n                                    {weeksRange === 1\n                                        ? `Week: ${calculateWeekRange(weekOffset)}`\n                                        : `Weeks: ${calculateWeekRange(weekOffset - weeksRange + 1)} To ${calculateWeekRange(weekOffset)}`}\n                                </h2>\n                                <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                    Next Week\n                                </button>\n                            </div>\n\n                            <div className=\"weeks-range-selector\">\n                                <label htmlFor=\"weeksRange\">Number of weeks to include:</label>\n                                <input\n                                    type=\"number\"\n                                    id=\"weeksRange\"\n                                    min=\"1\"\n                                    value={weeksRange}\n                                    onChange={(e) => {\n                                        const value = parseInt(e.target.value);\n                                        if (!isNaN(value) && value > 0) {\n                                            setWeeksRange(value);\n                                        }\n                                    }}\n                                />\n                            </div>\n\n                            {stats ? (\n                                <div className=\"statistics-summary\">\n                                    <p><strong>Total Night Shifts:</strong> {stats.nightShifts}</p>\n                                    <p><strong>Total Shabbat Shifts:</strong> {stats.shabbatShifts}</p>\n                                    <p><strong>Total Regular Shifts:</strong> {stats.regularShifts}</p>\n                                    <p><strong>Total All Shifts:</strong> {stats.totalAll}</p>\n                                    <hr />\n                                    <p><strong>Average per Week:</strong></p>\n                                    <p>Night: {stats.avgNight.toFixed(2)} ({((stats.nightShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                    <p>Shabbat: {stats.avgShabbat.toFixed(2)} ({((stats.shabbatShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                    <p>Regular: {stats.avgRegular.toFixed(2)} ({((stats.regularShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                    <p>All Shifts: {stats.avgAll.toFixed(2)} (100%)</p>\n                                </div>\n                            ) : (\n                                <p className=\"no-stats-message\">No statistics available for this period.</p>\n                            )}\n                        </>\n                    )}\n                </div>\n\n                <ToastContainer />\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default StatisticsScreen;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,SAASC,KAAK,EAAEC,cAAc,QAAQ,gBAAgB;AACtD,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAO,uCAAuC;;AAE9C;AACA,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,iBAAiB,MAAM,6BAA6B;AAC3D,OAAO,gCAAgC;;AAEvC;AACA,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,cAAc,QAAQ,0BAA0B;;AAEzD;AACA,SAASC,gBAAgB,EAAEC,kBAAkB,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtE,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACuB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC2B,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC6B,UAAU,EAAEC,aAAa,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM+B,QAAQ,GAAG7B,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ+B,MAAM,CAACC,QAAQ,CAAC;MAAEC,GAAG,EAAE;IAAE,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAENjC,SAAS,CAAC,MAAM;IACZ,MAAMkC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3D,IAAI,CAACJ,UAAU,EAAE;MACbJ,QAAQ,CAAC,GAAG,CAAC;IACjB,CAAC,MAAM;MACHX,WAAW,CAACe,UAAU,CAAC;MACvB,MAAMK,cAAc,GAAG,MAAAA,CAAA,KAAY;QAC/B,IAAI;UACA,MAAMC,SAAS,GAAG,MAAMhC,QAAQ,CAAC,CAAC;UAClC,MAAMiC,SAAS,GAAGP,UAAU,CAACQ,OAAO,CAACC,EAAE;UACvC,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,OAAO,CAACN,SAAS,CAAC,CAC9CO,GAAG,CAAC,CAAC,CAACJ,EAAE,EAAEK,IAAI,CAAC,MAAM;YAAEL,EAAE;YAAE,GAAGK;UAAK,CAAC,CAAC,CAAC,CACtCC,MAAM,CAAED,IAAI;YAAA,IAAAE,gBAAA;YAAA,QAAAA,gBAAA,GAAKF,IAAI,CAACG,UAAU,cAAAD,gBAAA,uBAAfA,gBAAA,CAAiBE,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACZ,SAAS,KAAKA,SAAS,CAAC;UAAA,EAAC;UAC9EpB,YAAY,CAACuB,iBAAiB,CAAC;QACnC,CAAC,CAAC,OAAOU,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACrD;MACJ,CAAC;MACDf,cAAc,CAAC,CAAC;IACpB;EACJ,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd9B,SAAS,CAAC,MAAM;IACZ,MAAMwD,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI,CAACtC,QAAQ,IAAI,CAACI,kBAAkB,EAAE;MAEtC,IAAI;QACA,MAAMmB,SAAS,GAAGvB,QAAQ,CAACwB,OAAO,CAACC,EAAE;QACrC,MAAMc,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;QACtB,MAAMC,IAAI,GAAGF,GAAG,CAACG,WAAW,CAAC,CAAC;QAC9B,MAAMC,KAAK,GAAGJ,GAAG,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC;QAEhC,IAAIC,UAAU,GAAG,CAAC;QAClB,IAAIC,YAAY,GAAG,CAAC;QACpB,IAAIC,YAAY,GAAG,CAAC;QAEpB,KAAK,IAAIC,MAAM,GAAGxC,UAAU,EAAEwC,MAAM,GAAGxC,UAAU,GAAGE,UAAU,EAAEsC,MAAM,EAAE,EAAE;UACtE,MAAMC,OAAO,GAAGzD,gBAAgB,CAACwD,MAAM,CAAC;UACxC,MAAME,IAAI,GAAG,MAAM3D,cAAc,CAACgC,SAAS,EAAEkB,IAAI,EAAEE,KAAK,EAAEM,OAAO,EAAE7C,kBAAkB,CAAC;UAEtF,IAAI8C,IAAI,EAAE;YACNL,UAAU,IAAIK,IAAI,CAACC,WAAW,IAAI,CAAC;YACnCL,YAAY,IAAII,IAAI,CAACE,aAAa,IAAI,CAAC;YACvCL,YAAY,IAAIG,IAAI,CAACG,aAAa,IAAI,CAAC;UAC3C;QACJ;QAEA,MAAMC,cAAc,GAAGT,UAAU,GAAGC,YAAY,GAAGC,YAAY;QAE/DxC,QAAQ,CAAC;UACL4C,WAAW,EAAEN,UAAU;UACvBO,aAAa,EAAEN,YAAY;UAC3BO,aAAa,EAAEN,YAAY;UAC3BQ,QAAQ,EAAEV,UAAU,GAAGnC,UAAU;UACjC8C,UAAU,EAAEV,YAAY,GAAGpC,UAAU;UACrC+C,UAAU,EAAEV,YAAY,GAAGrC,UAAU;UACrCgD,QAAQ,EAAEJ,cAAc;UACxBK,MAAM,EAAEL,cAAc,GAAG5C;QAC7B,CAAC,CAAC;MAEN,CAAC,CAAC,OAAO0B,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CpD,KAAK,CAACoD,KAAK,CAAC,4BAA4B,CAAC;MAC7C;IACJ,CAAC;IAEDE,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACtC,QAAQ,EAAEI,kBAAkB,EAAEI,UAAU,EAAEE,UAAU,CAAC,CAAC;EAE1D,MAAMkD,gBAAgB,GAAIC,SAAS,IAAK;IACpCpD,aAAa,CAAEqD,IAAI,IAAKA,IAAI,GAAGD,SAAS,CAAC;EAC7C,CAAC;EAED,MAAME,eAAe,GAAG,CAAC,GAAG7D,SAAS,CAAC,CAAC8D,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,EAAE,IAAI,CAAC,CAAC;EAEzF,oBACIxE,OAAA,CAACN,iBAAiB;IAAAgF,QAAA,eACd1E,OAAA;MAAA0E,QAAA,gBACI1E,OAAA,CAACR,MAAM;QAAAmF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACV9E,OAAA;QAAK+E,SAAS,EAAC;MAAoB;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAE1C9E,OAAA;QAAK+E,SAAS,EAAC,sBAAsB;QAAAL,QAAA,gBACjC1E,OAAA;UAAA0E,QAAA,EAAI;QAAwB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAEjC9E,OAAA;UAAK+E,SAAS,EAAC,mBAAmB;UAAAL,QAAA,gBAC9B1E,OAAA;YAAA0E,QAAA,EAAO;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC/B9E,OAAA,CAACT,MAAM;YACHwF,SAAS,EAAC,mBAAmB;YAC7BC,eAAe,EAAC,cAAc;YAC9BC,OAAO,EAAEb,eAAe,CAAClC,GAAG,CAACgD,CAAC,KAAK;cAAEC,KAAK,EAAED,CAAC,CAACpD,EAAE;cAAEsD,KAAK,EAAEF,CAAC,CAACV;YAAK,CAAC,CAAC,CAAE;YACpEa,QAAQ,EAAGC,MAAM,IAAK5E,qBAAqB,CAAC,CAAA4E,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEH,KAAK,KAAI,EAAE,CAAE;YACjEA,KAAK,EAAEf,eAAe,CAAClC,GAAG,CAACgD,CAAC,KAAK;cAAEC,KAAK,EAAED,CAAC,CAACpD,EAAE;cAAEsD,KAAK,EAAEF,CAAC,CAACV;YAAK,CAAC,CAAC,CAAC,CAACe,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,KAAK,KAAK1E,kBAAkB,CAAC,IAAI,IAAK;YACpHgF,WAAW,EAAC;UAAiB;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EAELrE,kBAAkB,iBACfT,OAAA,CAAAE,SAAA;UAAAwE,QAAA,gBACI1E,OAAA;YAAK+E,SAAS,EAAC,qCAAqC;YAAAL,QAAA,gBAChD1E,OAAA;cAAQ+E,SAAS,EAAC,mBAAmB;cAACW,OAAO,EAAEA,CAAA,KAAMzB,gBAAgB,CAAC,CAAC,CAAC,CAAE;cAAAS,QAAA,EAAC;YAE3E;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT9E,OAAA;cAAI+E,SAAS,EAAC,YAAY;cAAAL,QAAA,EACrB3D,UAAU,KAAK,CAAC,GACX,SAASjB,kBAAkB,CAACe,UAAU,CAAC,EAAE,GACzC,UAAUf,kBAAkB,CAACe,UAAU,GAAGE,UAAU,GAAG,CAAC,CAAC,OAAOjB,kBAAkB,CAACe,UAAU,CAAC;YAAE;cAAA8D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtG,CAAC,eACL9E,OAAA;cAAQ+E,SAAS,EAAC,mBAAmB;cAACW,OAAO,EAAEA,CAAA,KAAMzB,gBAAgB,CAAC,CAAC,CAAE;cAAAS,QAAA,EAAC;YAE1E;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC,eAEN9E,OAAA;YAAK+E,SAAS,EAAC,sBAAsB;YAAAL,QAAA,gBACjC1E,OAAA;cAAO2F,OAAO,EAAC,YAAY;cAAAjB,QAAA,EAAC;YAA2B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC/D9E,OAAA;cACI4F,IAAI,EAAC,QAAQ;cACb9D,EAAE,EAAC,YAAY;cACf+D,GAAG,EAAC,GAAG;cACPV,KAAK,EAAEpE,UAAW;cAClBsE,QAAQ,EAAGH,CAAC,IAAK;gBACb,MAAMC,KAAK,GAAGW,QAAQ,CAACZ,CAAC,CAACa,MAAM,CAACZ,KAAK,CAAC;gBACtC,IAAI,CAACa,KAAK,CAACb,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;kBAC5BnE,aAAa,CAACmE,KAAK,CAAC;gBACxB;cACJ;YAAE;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,EAELnE,KAAK,gBACFX,OAAA;YAAK+E,SAAS,EAAC,oBAAoB;YAAAL,QAAA,gBAC/B1E,OAAA;cAAA0E,QAAA,gBAAG1E,OAAA;gBAAA0E,QAAA,EAAQ;cAAmB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EAACnE,KAAK,CAAC6C,WAAW;YAAA;cAAAmB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC/D9E,OAAA;cAAA0E,QAAA,gBAAG1E,OAAA;gBAAA0E,QAAA,EAAQ;cAAqB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EAACnE,KAAK,CAAC8C,aAAa;YAAA;cAAAkB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACnE9E,OAAA;cAAA0E,QAAA,gBAAG1E,OAAA;gBAAA0E,QAAA,EAAQ;cAAqB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EAACnE,KAAK,CAAC+C,aAAa;YAAA;cAAAiB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACnE9E,OAAA;cAAA0E,QAAA,gBAAG1E,OAAA;gBAAA0E,QAAA,EAAQ;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EAACnE,KAAK,CAACoD,QAAQ;YAAA;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC1D9E,OAAA;cAAA2E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACN9E,OAAA;cAAA0E,QAAA,eAAG1E,OAAA;gBAAA0E,QAAA,EAAQ;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eACzC9E,OAAA;cAAA0E,QAAA,GAAG,SAAO,EAAC/D,KAAK,CAACiD,QAAQ,CAACqC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAAC,CAAEtF,KAAK,CAAC6C,WAAW,GAAG7C,KAAK,CAACoD,QAAQ,GAAI,GAAG,EAAEkC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;YAAA;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eACtG9E,OAAA;cAAA0E,QAAA,GAAG,WAAS,EAAC/D,KAAK,CAACkD,UAAU,CAACoC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAAC,CAAEtF,KAAK,CAAC8C,aAAa,GAAG9C,KAAK,CAACoD,QAAQ,GAAI,GAAG,EAAEkC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;YAAA;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eAC5G9E,OAAA;cAAA0E,QAAA,GAAG,WAAS,EAAC/D,KAAK,CAACmD,UAAU,CAACmC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAAC,CAAEtF,KAAK,CAAC+C,aAAa,GAAG/C,KAAK,CAACoD,QAAQ,GAAI,GAAG,EAAEkC,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE;YAAA;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eAC5G9E,OAAA;cAAA0E,QAAA,GAAG,cAAY,EAAC/D,KAAK,CAACqD,MAAM,CAACiC,OAAO,CAAC,CAAC,CAAC,EAAC,SAAO;YAAA;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClD,CAAC,gBAEN9E,OAAA;YAAG+E,SAAS,EAAC,kBAAkB;YAAAL,QAAA,EAAC;UAAwC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAC9E;QAAA,eACH,CACL;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eAEN9E,OAAA,CAACV,cAAc;QAAAqF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE5B,CAAC;AAAC1E,EAAA,CArKID,gBAAgB;EAAA,QAODf,WAAW;AAAA;AAAA8G,EAAA,GAP1B/F,gBAAgB;AAuKtB,eAAeA,gBAAgB;AAAC,IAAA+F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}