{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, calculatePreviousDay, calculateNextDay, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n  const [highlightedUser, setHighlightedUser] = useState(null);\n  const [selectedUserNotes, setSelectedUserNotes] = useState('');\n  const [shiftCounts, setShiftCounts] = useState({});\n  const [necessaryEmployees, setNecessaryEmployees] = useState({});\n  const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n  const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n  const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת כל הנתונים הדרושים\n        const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers(), getNecessaryEmployees(companyId, weekKey), getWeeklyShiftTargets(companyId, weekKey) // קריאה לנתוני weeklyShiftTargets\n        ]);\n\n        // עדכון ה-states בהתאם לנתונים שהתקבלו מהשרת\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n        setNecessaryEmployees(necessaryEmployeesData || {});\n        calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n        console.log('usersData:', usersData);\n\n        // הגדרת ערכי ברירת מחדל ל-weeklyShiftTargets\n        const updatedWeeklyTargets = {\n          ...weeklyTargetsData\n        };\n        Object.values(usersData).forEach(user => {\n          if (!updatedWeeklyTargets[user.id]) {\n            updatedWeeklyTargets[user.id] = 0; // ערך ברירת מחדל\n          }\n        });\n        setWeeklyShiftTargets(updatedWeeklyTargets);\n\n        // חישוב תאריכים לשבוע הנוכחי\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeeklyShiftTargetChange = async (userId, value) => {\n    // הבטחת הערך המקסימלי ל-6\n    const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n\n    // בדיקה אם היעד החדש קטן ממספר המשמרות הנוכחי\n    if (parsedValue < shiftCounts[userId]) {\n      console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n      return; // עצירת השינוי\n    }\n\n    // עדכון היעדים השבועיים\n    const updatedTargets = {\n      ...weeklyShiftTargets,\n      [userId]: parsedValue\n    };\n    setWeeklyShiftTargets(updatedTargets);\n    console.log(\"Updated weeklyShiftTargets:\", updatedTargets);\n\n    // סינון המידע לפני שמירתו ל-DB\n    const cleanedTargets = Object.fromEntries(Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees') // סינון המפתח הלא רצוי\n    );\n\n    // שמירת הערך ל-DB\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n    } catch (error) {\n      console.error('Failed to save weekly shift targets:', error);\n    }\n  };\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = (status, userId, shift, day) => {\n    var _necessaryEmployees$d;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d = necessaryEmployees[day]) === null || _necessaryEmployees$d === void 0 ? void 0 : _necessaryEmployees$d[shift]) || 0;\n\n    // אם מספר העובדים הנבחרים שווה או גדול מהנדרש למשמרת\n    if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n    }\n\n    // בדיקת מספר המשמרות שכבר נבחרו עבור העובד מול היעד השבועי\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n    // אם העובד הגיע למכסת המשמרות השבועיות שהוגדרו לו\n    if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n    }\n\n    // שאר הלוגיקה הקיימת\n    if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled'; // הכפתורים יהיו חסומים אם היעד השבועי הושג\n    if (highlightedUser === userId) return 'highlighted-user'; // הדגשת משתמש\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleEmployeeClick = async userId => {\n    if (highlightedUser === userId) {\n      setHighlightedUser(null);\n      setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n      return;\n    }\n    setHighlightedUser(userId);\n    if (currentCompany && userId) {\n      try {\n        var _availabilityData$use;\n        const weekKey = calculateWeekKey(weekOffset);\n        const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n        const userNotes = (availabilityData === null || availabilityData === void 0 ? void 0 : (_availabilityData$use = availabilityData[userId]) === null || _availabilityData$use === void 0 ? void 0 : _availabilityData$use.notes) || 'No notes available.';\n        setSelectedUserNotes(userNotes);\n      } catch (err) {\n        console.error('Failed to fetch notes:', err);\n        setSelectedUserNotes('Error fetching notes.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (Object.keys(availability).length > 0) {\n      updateShiftCounts();\n    }\n  }, [availability]);\n  const updateShiftCounts = () => {\n    const counts = {};\n    let totalShifts = 0; // משתנה לספירת המשמרות הכוללות שהוקצו\n\n    Object.entries(availability).forEach(([userId, shifts]) => {\n      const userShiftCount = Object.values(shifts).reduce((sum, dayShifts) => sum + Object.values(dayShifts).filter(shift => shift.status === 'selected').length, 0);\n      counts[userId] = userShiftCount;\n      totalShifts += userShiftCount; // הוספה למספר הכולל\n    });\n    setShiftCounts(counts);\n    setTotalAssignedShifts(totalShifts); // עדכון state של סך כל המשמרות\n  };\n  useEffect(() => {\n    const saveNecessaryEmployeesToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שמירת necessaryEmployees ל-DB\n        if (Object.keys(necessaryEmployees).length > 0) {\n          await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n        }\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n\n    // נוודא שאנו שומרים רק אם מדובר בעדכון אמיתי ולא מעבר שבוע\n    if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n      saveNecessaryEmployeesToDB();\n    }\n  }, [necessaryEmployees, currentCompany]);\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    var _necessaryEmployees$d2;\n    // בדיקת מספר העובדים הנבחרים למשמרת הנוכחית מול העובדים הנדרשים\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift2;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift2 = userData[shift]) === null || _userData$shift2 === void 0 ? void 0 : _userData$shift2[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d2 = necessaryEmployees[day]) === null || _necessaryEmployees$d2 === void 0 ? void 0 : _necessaryEmployees$d2[shift]) || 0;\n\n    // אם מספר העובדים הנבחרים שווה או גדול מהנדרש, למנוע בחירה נוספת\n    if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n      return;\n    }\n\n    // בדיקת מספר המשמרות שכבר נבחרו עבור העובד מול היעד השבועי\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n    // אם העובד הגיע למספר המשמרות המקסימלי, למנוע בחירה נוספת\n    if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n      return;\n    }\n\n    // המשך עדכון סטטוס\n    if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n\n      // Update the current shift's status to 'selected' or 'default'\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        // Disable other shifts on the same day\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n\n        // Handle unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        // Undo selection and revert unique rules\n        await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n        // Revert unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n\n      // Update state with the modified availability\n      setAvailability(updatedAvailability);\n\n      // עדכון ה-counts והכפתורים\n      updateShiftCounts();\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  const employeesWithAvailability = Object.entries(users).filter(([userId]) => availability[userId] && Object.values(availability[userId]).some(shifts => Object.values(shifts).some(shift => shift.status === 'selected' || shift.status === 'default')));\n  const handleNecessaryEmployeesChange = (day, shift, value) => {\n    const updatedNecessaryEmployees = {\n      ...necessaryEmployees\n    };\n    if (!updatedNecessaryEmployees[day]) {\n      updatedNecessaryEmployees[day] = {};\n    }\n    const parsedValue = parseInt(value, 10) || 0;\n\n    // בדיקת מספר העובדים שכבר נבחרו למשמרת\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift3;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift3 = userData[shift]) === null || _userData$shift3 === void 0 ? void 0 : _userData$shift3[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n\n    // אם הערך החדש קטן ממספר העובדים שנבחרו, למנוע שינוי\n    if (parsedValue < selectedEmployeesCount) {\n      return; // עצירת השינוי\n    }\n\n    // עדכון הערך החדש אם הוא חוקי\n    updatedNecessaryEmployees[day][shift] = parsedValue;\n    setNecessaryEmployees(updatedNecessaryEmployees);\n    calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n\n    // שמירה ל-DB כאשר הערך משתנה\n    const saveToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n        await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n    saveToDB();\n  };\n  const calculateTotalNecessaryEmployees = necessaryEmployeesData => {\n    let total = 0;\n    Object.values(necessaryEmployeesData).forEach(dayData => {\n      Object.values(dayData).forEach(shiftCount => {\n        total += shiftCount || 0;\n      });\n    });\n    setTotalNecessaryEmployees(total);\n  };\n  const calculateTotalAssignedShifts = shiftCounts => {\n    const total = Object.values(shiftCounts).reduce((sum, count) => sum + count, 0);\n    setTotalAssignedShifts(total);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(-1),\n          children: \"Previous Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"week-range\",\n          children: calculateWeekRange(weekOffset)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(1),\n          children: \"Next Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading schedule...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"schedule-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Shift\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 37\n              }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 55\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"date\",\n                  children: weekDates[index]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 49\n                }, this)]\n              }, day, true, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 45\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: shift\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 41\n              }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                var _necessaryEmployees$d3;\n                const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                  var _userData$shift4;\n                  const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift4 = userData[shift]) === null || _userData$shift4 === void 0 ? void 0 : _userData$shift4[day];\n                  return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                }).length;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    min: \"0\",\n                    className: \"necessary-employees-input\",\n                    value: (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d3 = necessaryEmployees[day]) === null || _necessaryEmployees$d3 === void 0 ? void 0 : _necessaryEmployees$d3[shift]) || 0,\n                    onChange: e => handleNecessaryEmployeesChange(day, shift, e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 416,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"selected-employees-indicator\",\n                    children: [selectedEmployeesCount, \" Selected\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 426,\n                    columnNumber: 53\n                  }, this), Object.entries(availability).map(([userId, userData]) => {\n                    var _userData$shift5;\n                    const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift5 = userData[shift]) === null || _userData$shift5 === void 0 ? void 0 : _userData$shift5[day];\n                    if (availabilityInfo !== null && availabilityInfo !== void 0 && availabilityInfo.isAvailable) {\n                      var _users$userId;\n                      const statusClass = getStatusClass(availabilityInfo.status, userId);\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: `availability-entry ${statusClass}`,\n                        onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                        style: {\n                          backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ffff',\n                          color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                          pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                          cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                        },\n                        children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                      }, userId, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 434,\n                        columnNumber: 65\n                      }, this);\n                    }\n                    return null;\n                  })]\n                }, day, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 49\n                }, this);\n              })]\n            }, shift, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employees-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Employees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"total-info-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Weekly Overview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Weekly Staff: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: totalNecessaryEmployees\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Assigned Shifts: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: totalAssignedShifts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 59\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: employeesWithAvailability.map(([userId, user]) => {\n              const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId]; // בדיקה אם היעד הושג\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                onClick: () => handleEmployeeClick(userId),\n                className: `${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`,\n                style: {\n                  backgroundColor: isTargetMet ? '#d4edda' : 'inherit' // צבע רקע ירוק בהיר אם היעד הושג\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"employee-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"employee-name\",\n                    children: user.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 495,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"weekly-shift-target\",\n                    children: /*#__PURE__*/_jsxDEV(\"label\", {\n                      children: [shiftCounts[userId] || 0, \" shifts out of:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"number\",\n                        min: \"0\",\n                        max: \"6\" // הגבלה ברמת ה-UI\n                        ,\n                        value: weeklyShiftTargets[userId] || 0,\n                        onClick: e => e.stopPropagation() // עצירת האירוע\n                        ,\n                        onChange: e => handleWeeklyShiftTargetChange(userId, e.target.value),\n                        className: \"weekly-shift-input\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 503,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 501,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 500,\n                    columnNumber: 49\n                  }, this), highlightedUser === userId && selectedUserNotes && selectedUserNotes !== 'No notes available.' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"employee-notes\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                      children: \"Notes:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 517,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: selectedUserNotes\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 518,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 516,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 494,\n                  columnNumber: 45\n                }, this)\n              }, userId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 486,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"CBWHq4T2QER1dwnJ8VowTplYYrs=\");\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","getAllAvailabilities","getNecessaryEmployees","saveNecessaryEmployees","saveWeeklyShiftTargets","getWeeklyShiftTargets","getUsers","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","calculatePreviousDay","calculateNextDay","handleOtherShiftsOfDayWhenDeselectAShift","updateAvailabilityStatus","Navbar","jsxDEV","_jsxDEV","ScheduleScreen","_s","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","highlightedUser","setHighlightedUser","selectedUserNotes","setSelectedUserNotes","shiftCounts","setShiftCounts","necessaryEmployees","setNecessaryEmployees","weeklyShiftTargets","setWeeklyShiftTargets","totalNecessaryEmployees","setTotalNecessaryEmployees","totalAssignedShifts","setTotalAssignedShifts","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","JSON","parse","localStorage","getItem","companyId","company","id","weekKey","availabilityData","usersData","necessaryEmployeesData","weeklyTargetsData","Promise","all","calculateTotalNecessaryEmployees","console","log","updatedWeeklyTargets","Object","values","forEach","user","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","handleWeeklyShiftTargetChange","userId","value","parsedValue","Math","min","parseInt","warn","updatedTargets","cleanedTargets","fromEntries","entries","filter","key","handleWeekChange","direction","prevOffset","getStatusClass","status","shift","day","_necessaryEmployees$d","selectedEmployeesCount","userData","_userData$shift","availabilityInfo","maxNecessaryEmployees","currentShiftCount","maxShiftsAllowed","handleEmployeeClick","_availabilityData$use","userNotes","notes","keys","updateShiftCounts","counts","totalShifts","shifts","userShiftCount","reduce","sum","dayShifts","saveNecessaryEmployeesToDB","handleStatusUpdate","currentStatus","_necessaryEmployees$d2","_userData$shift2","newStatus","updatedAvailability","otherShift","employeesWithAvailability","some","handleNecessaryEmployeesChange","updatedNecessaryEmployees","_userData$shift3","saveToDB","total","dayData","shiftCount","calculateTotalAssignedShifts","count","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","index","_necessaryEmployees$d3","_userData$shift4","type","onChange","e","target","_userData$shift5","isAvailable","_users$userId","statusClass","style","backgroundColor","color","pointerEvents","cursor","name","isTargetMet","max","stopPropagation","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, calculatePreviousDay, calculateNextDay, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n    const [highlightedUser, setHighlightedUser] = useState(null);\n    const [selectedUserNotes, setSelectedUserNotes] = useState('');\n    const [shiftCounts, setShiftCounts] = useState({});\n    const [necessaryEmployees, setNecessaryEmployees] = useState({});\n    const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n    const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n    const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת כל הנתונים הדרושים\n                const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers(),\n                    getNecessaryEmployees(companyId, weekKey),\n                    getWeeklyShiftTargets(companyId, weekKey), // קריאה לנתוני weeklyShiftTargets\n                ]);\n\n                // עדכון ה-states בהתאם לנתונים שהתקבלו מהשרת\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n                setNecessaryEmployees(necessaryEmployeesData || {});\n                calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n\n                console.log('usersData:', usersData);\n\n                // הגדרת ערכי ברירת מחדל ל-weeklyShiftTargets\n                const updatedWeeklyTargets = { ...weeklyTargetsData };\n                Object.values(usersData).forEach(user => {\n                    if (!updatedWeeklyTargets[user.id]) {\n                        updatedWeeklyTargets[user.id] = 0; // ערך ברירת מחדל\n                    }\n                });\n\n                setWeeklyShiftTargets(updatedWeeklyTargets);\n\n                // חישוב תאריכים לשבוע הנוכחי\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n                });\n                setWeekDates(dates);\n\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n\n    const handleWeeklyShiftTargetChange = async (userId, value) => {\n        // הבטחת הערך המקסימלי ל-6\n        const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n\n        // בדיקה אם היעד החדש קטן ממספר המשמרות הנוכחי\n        if (parsedValue < shiftCounts[userId]) {\n            console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n            return; // עצירת השינוי\n        }\n\n        // עדכון היעדים השבועיים\n        const updatedTargets = { ...weeklyShiftTargets, [userId]: parsedValue };\n        setWeeklyShiftTargets(updatedTargets);\n\n        console.log(\"Updated weeklyShiftTargets:\", updatedTargets);\n\n        // סינון המידע לפני שמירתו ל-DB\n        const cleanedTargets = Object.fromEntries(\n            Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees') // סינון המפתח הלא רצוי\n        );\n\n        // שמירת הערך ל-DB\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n        } catch (error) {\n            console.error('Failed to save weekly shift targets:', error);\n        }\n    };\n\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status, userId, shift, day) => {\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        // אם מספר העובדים הנבחרים שווה או גדול מהנדרש למשמרת\n        if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n        }\n\n        // בדיקת מספר המשמרות שכבר נבחרו עבור העובד מול היעד השבועי\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        // אם העובד הגיע למכסת המשמרות השבועיות שהוגדרו לו\n        if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n        }\n\n        // שאר הלוגיקה הקיימת\n        if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled'; // הכפתורים יהיו חסומים אם היעד השבועי הושג\n        if (highlightedUser === userId) return 'highlighted-user'; // הדגשת משתמש\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const handleEmployeeClick = async (userId) => {\n        if (highlightedUser === userId) {\n            setHighlightedUser(null);\n            setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n            return;\n        }\n\n        setHighlightedUser(userId);\n\n        if (currentCompany && userId) {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n\n                const userNotes = availabilityData?.[userId]?.notes || 'No notes available.';\n                setSelectedUserNotes(userNotes);\n            } catch (err) {\n                console.error('Failed to fetch notes:', err);\n                setSelectedUserNotes('Error fetching notes.');\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (Object.keys(availability).length > 0) {\n            updateShiftCounts();\n        }\n    }, [availability]);\n\n    const updateShiftCounts = () => {\n        const counts = {};\n        let totalShifts = 0; // משתנה לספירת המשמרות הכוללות שהוקצו\n\n        Object.entries(availability).forEach(([userId, shifts]) => {\n            const userShiftCount = Object.values(shifts).reduce(\n                (sum, dayShifts) =>\n                    sum +\n                    Object.values(dayShifts).filter((shift) => shift.status === 'selected').length,\n                0\n            );\n            counts[userId] = userShiftCount;\n            totalShifts += userShiftCount; // הוספה למספר הכולל\n        });\n\n        setShiftCounts(counts);\n        setTotalAssignedShifts(totalShifts); // עדכון state של סך כל המשמרות\n    };\n\n\n    useEffect(() => {\n        const saveNecessaryEmployeesToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שמירת necessaryEmployees ל-DB\n                if (Object.keys(necessaryEmployees).length > 0) {\n                    await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n                }\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n\n        // נוודא שאנו שומרים רק אם מדובר בעדכון אמיתי ולא מעבר שבוע\n        if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n            saveNecessaryEmployeesToDB();\n        }\n    }, [necessaryEmployees, currentCompany]);\n\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        // בדיקת מספר העובדים הנבחרים למשמרת הנוכחית מול העובדים הנדרשים\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        // אם מספר העובדים הנבחרים שווה או גדול מהנדרש, למנוע בחירה נוספת\n        if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n            return;\n        }\n\n        // בדיקת מספר המשמרות שכבר נבחרו עבור העובד מול היעד השבועי\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        // אם העובד הגיע למספר המשמרות המקסימלי, למנוע בחירה נוספת\n        if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n            return;\n        }\n\n        // המשך עדכון סטטוס\n        if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            // Update the current shift's status to 'selected' or 'default'\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                // Disable other shifts on the same day\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                // Handle unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                // Undo selection and revert unique rules\n                await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n                // Revert unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            // Update state with the modified availability\n            setAvailability(updatedAvailability);\n\n            // עדכון ה-counts והכפתורים\n            updateShiftCounts();\n\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n\n\n\n    const employeesWithAvailability = Object.entries(users).filter(([userId]) =>\n        availability[userId] && Object.values(availability[userId]).some((shifts) =>\n            Object.values(shifts).some((shift) => shift.status === 'selected' || shift.status === 'default')\n        )\n    );\n\n    const handleNecessaryEmployeesChange = (day, shift, value) => {\n        const updatedNecessaryEmployees = { ...necessaryEmployees };\n\n        if (!updatedNecessaryEmployees[day]) {\n            updatedNecessaryEmployees[day] = {};\n        }\n\n        const parsedValue = parseInt(value, 10) || 0;\n\n        // בדיקת מספר העובדים שכבר נבחרו למשמרת\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        // אם הערך החדש קטן ממספר העובדים שנבחרו, למנוע שינוי\n        if (parsedValue < selectedEmployeesCount) {\n            return; // עצירת השינוי\n        }\n\n        // עדכון הערך החדש אם הוא חוקי\n        updatedNecessaryEmployees[day][shift] = parsedValue;\n\n        setNecessaryEmployees(updatedNecessaryEmployees);\n        calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n\n        // שמירה ל-DB כאשר הערך משתנה\n        const saveToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n        saveToDB();\n    };\n\n\n    const calculateTotalNecessaryEmployees = (necessaryEmployeesData) => {\n        let total = 0;\n        Object.values(necessaryEmployeesData).forEach((dayData) => {\n            Object.values(dayData).forEach((shiftCount) => {\n                total += shiftCount || 0;\n            });\n        });\n        setTotalNecessaryEmployees(total);\n    };\n\n    const calculateTotalAssignedShifts = (shiftCounts) => {\n        const total = Object.values(shiftCounts).reduce((sum, count) => sum + count, 0);\n        setTotalAssignedShifts(total);\n    };\n\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div> {/* רווח לניווט */}\n\n            <div className=\"schedule-container\">\n                <h1>Weekly Schedule</h1>\n                <div className=\"week-navigation\">\n                    <button onClick={() => handleWeekChange(-1)}>Previous Week</button>\n                    <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                    <button onClick={() => handleWeekChange(1)}>Next Week</button>\n                </div>\n\n                {isLoading ? (\n                    <p>Loading schedule...</p>\n                ) : error ? (\n                    <p className=\"error\">{error}</p>\n                ) : (\n                    <div className=\"schedule-content\">\n                        <table className=\"schedule-table\">\n                            <thead>\n                                <tr>\n                                    <th>Shift</th>\n                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                        (day, index) => (\n                                            <th key={day}>\n                                                {day} <br />\n                                                <span className=\"date\">{weekDates[index]}</span>\n                                            </th>\n                                        )\n                                    )}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                    <tr key={shift}>\n                                        <td>{shift}</td>\n                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                            const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                                                const availabilityInfo = userData?.[shift]?.[day];\n                                                return availabilityInfo?.status === 'selected';\n                                            }).length;\n\n                                            return (\n                                                <td key={day}>\n                                                    {/* Input field for necessary employees */}\n                                                    <input\n                                                        type=\"number\"\n                                                        min=\"0\"\n                                                        className=\"necessary-employees-input\"\n                                                        value={necessaryEmployees?.[day]?.[shift] || 0}\n                                                        onChange={(e) => handleNecessaryEmployeesChange(day, shift, e.target.value)}\n                                                    />\n\n\n                                                    {/* Indicator for selected employees */}\n                                                    <div className=\"selected-employees-indicator\">\n                                                        {selectedEmployeesCount} Selected\n                                                    </div>\n                                                    {Object.entries(availability).map(([userId, userData]) => {\n                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                        if (availabilityInfo?.isAvailable) {\n                                                            const statusClass = getStatusClass(availabilityInfo.status, userId);\n                                                            return (\n                                                                <div\n                                                                    key={userId}\n                                                                    className={`availability-entry ${statusClass}`}\n                                                                    onClick={() =>\n                                                                        handleStatusUpdate(\n                                                                            userId,\n                                                                            shift,\n                                                                            day,\n                                                                            availabilityInfo.status\n                                                                        )\n                                                                    }\n                                                                    style={{\n                                                                        backgroundColor:\n                                                                            availabilityInfo.status === 'selected'\n                                                                                ? '#2ecc71'\n                                                                                : availabilityInfo.status === 'disabled'\n                                                                                    ? '#e74c3c'\n                                                                                    : '#ffff',\n                                                                        color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                        pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                        cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                    }}\n                                                                >\n                                                                    {users[userId]?.name || 'Unknown'}\n                                                                </div>\n                                                            );\n                                                        }\n                                                        return null;\n                                                    })}\n                                                </td>\n                                            );\n                                        })}\n                                    </tr>\n                                ))}\n\n                            </tbody>\n                        </table>\n\n                        <div className=\"employees-list\">\n                            <h3>Employees</h3>\n                            <div className=\"total-info-container\">\n                                <h3>Weekly Overview</h3>\n                                <hr />\n                                <p>Total Weekly Staff: <span>{totalNecessaryEmployees}</span></p>\n                                <p>Total Assigned Shifts: <span>{totalAssignedShifts}</span></p>\n                            </div>\n\n\n                            <ul>\n                                {employeesWithAvailability.map(([userId, user]) => {\n                                    const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId]; // בדיקה אם היעד הושג\n                                    return (\n                                        <li\n                                            key={userId}\n                                            onClick={() => handleEmployeeClick(userId)}\n                                            className={`${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`}\n                                            style={{\n                                                backgroundColor: isTargetMet ? '#d4edda' : 'inherit', // צבע רקע ירוק בהיר אם היעד הושג\n                                            }}\n                                        >\n                                            <div className=\"employee-details\">\n                                                <span className=\"employee-name\">\n                                                    {user.name}\n                                                </span>\n\n                                                {/* שדה קלט עבור Weekly Shift Target */}\n                                                <div className=\"weekly-shift-target\">\n                                                    <label>\n                                                        {shiftCounts[userId] || 0} shifts out of:\n                                                        <input\n                                                            type=\"number\"\n                                                            min=\"0\"\n                                                            max=\"6\" // הגבלה ברמת ה-UI\n                                                            value={weeklyShiftTargets[userId] || 0}\n                                                            onClick={(e) => e.stopPropagation()} // עצירת האירוע\n                                                            onChange={(e) => handleWeeklyShiftTargetChange(userId, e.target.value)}\n                                                            className=\"weekly-shift-input\"\n                                                        />\n                                                    </label>\n                                                </div>\n\n                                                {highlightedUser === userId && selectedUserNotes && selectedUserNotes !== 'No notes available.' && (\n                                                    <div className=\"employee-notes\">\n                                                        <h4>Notes:</h4>\n                                                        <p>{selectedUserNotes}</p>\n                                                    </div>\n                                                )}\n                                            </div>\n                                        </li>\n                                    );\n                                })}\n                            </ul>\n                        </div>\n\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default ScheduleScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}