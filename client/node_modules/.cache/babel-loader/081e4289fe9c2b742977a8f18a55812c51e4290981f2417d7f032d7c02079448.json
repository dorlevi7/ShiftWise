{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/users';\n\n// Get all users\nexport const getUsers = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching users:', error.message);\n    throw error;\n  }\n};\n\n// Get a user by ID\nexport const getUserById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching user with ID ${id}:`, error.message);\n    throw error;\n  }\n};\n\n// Add a new user\nexport const addUser = async userData => {\n  try {\n    const response = await axios.post(API_URL, userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding user:', error.message);\n    throw error;\n  }\n};\n\n// Update a user by ID\nexport const updateUser = async (id, updatedData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, updatedData);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating user with ID ${id}:`, error.message);\n    throw error;\n  }\n};\n\n// Update user companies\nexport const updateUserCompanies = async (user, company) => {\n  try {\n    // Add the new company to the user's list of companyIds\n    const updatedCompanyIds = user.companyIds ? [...user.companyIds, {\n      companyId: company.id,\n      companyName: company.name\n    }] : [{\n      companyId: company.id,\n      companyName: company.name\n    }];\n\n    // Create updated user data\n    const updatedData = {\n      ...user,\n      companyIds: updatedCompanyIds\n    };\n\n    // Remove the legacy `companies` field if it exists\n    delete updatedData.companies;\n\n    // Update the user with the new list of companyIds\n    const response = await updateUser(user.id, updatedData);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating companies for user with ID ${user.id}:`, error.message);\n    throw error;\n  }\n};\n\n// Delete a user by ID\nexport const deleteUser = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error deleting user with ID ${id}:`, error.message);\n    throw error;\n  }\n};\n\n// Remove a company from a user's companies list\nexport const removeCompanyFromUser = async (userId, companyId) => {\n  try {\n    const user = await getUserById(userId);\n\n    // Filter out the company to be removed\n    const updatedCompanyIds = user.companyIds.filter(company => company.companyId !== companyId);\n    const updatedData = {\n      ...user,\n      companyIds: updatedCompanyIds\n    };\n\n    // Update the user\n    const response = await updateUser(userId, updatedData);\n    return response.data;\n  } catch (error) {\n    console.error(`Error removing company with ID ${companyId} from user with ID ${userId}:`, error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getUsers","response","get","data","error","console","message","getUserById","id","addUser","userData","post","updateUser","updatedData","put","updateUserCompanies","user","company","updatedCompanyIds","companyIds","companyId","companyName","name","companies","deleteUser","delete","removeCompanyFromUser","userId","filter"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/services/userService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/users';\n\n// Get all users\nexport const getUsers = async () => {\n    try {\n        const response = await axios.get(API_URL);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching users:', error.message);\n        throw error;\n    }\n};\n\n// Get a user by ID\nexport const getUserById = async (id) => {\n    try {\n        const response = await axios.get(`${API_URL}/${id}`);\n        return response.data;\n    } catch (error) {\n        console.error(`Error fetching user with ID ${id}:`, error.message);\n        throw error;\n    }\n};\n\n// Add a new user\nexport const addUser = async (userData) => {\n    try {\n        const response = await axios.post(API_URL, userData);\n        return response.data;\n    } catch (error) {\n        console.error('Error adding user:', error.message);\n        throw error;\n    }\n};\n\n// Update a user by ID\nexport const updateUser = async (id, updatedData) => {\n    try {\n        const response = await axios.put(`${API_URL}/${id}`, updatedData);\n        return response.data;\n    } catch (error) {\n        console.error(`Error updating user with ID ${id}:`, error.message);\n        throw error;\n    }\n};\n\n// Update user companies\nexport const updateUserCompanies = async (user, company) => {\n    try {\n\n        // Add the new company to the user's list of companyIds\n        const updatedCompanyIds = user.companyIds\n            ? [...user.companyIds, { companyId: company.id, companyName: company.name }]\n            : [{ companyId: company.id, companyName: company.name }];\n\n        // Create updated user data\n        const updatedData = { ...user, companyIds: updatedCompanyIds };\n\n        // Remove the legacy `companies` field if it exists\n        delete updatedData.companies;\n\n        // Update the user with the new list of companyIds\n        const response = await updateUser(user.id, updatedData);\n\n        return response.data;\n    } catch (error) {\n        console.error(`Error updating companies for user with ID ${user.id}:`, error.message);\n        throw error;\n    }\n};\n\n\n// Delete a user by ID\nexport const deleteUser = async (id) => {\n    try {\n        const response = await axios.delete(`${API_URL}/${id}`);\n        return response.data;\n    } catch (error) {\n        console.error(`Error deleting user with ID ${id}:`, error.message);\n        throw error;\n    }\n};\n\n// Remove a company from a user's companies list\nexport const removeCompanyFromUser = async (userId, companyId) => {\n    try {\n        const user = await getUserById(userId);\n\n        // Filter out the company to be removed\n        const updatedCompanyIds = user.companyIds.filter(\n            (company) => company.companyId !== companyId\n        );\n\n        const updatedData = { ...user, companyIds: updatedCompanyIds };\n\n        // Update the user\n        const response = await updateUser(userId, updatedData);\n        return response.data;\n    } catch (error) {\n        console.error(\n            `Error removing company with ID ${companyId} from user with ID ${userId}:`,\n            error.message\n        );\n        throw error;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}