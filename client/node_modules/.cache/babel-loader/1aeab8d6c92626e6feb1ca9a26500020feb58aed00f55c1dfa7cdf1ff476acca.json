{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\n// External libraries\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// Components\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport Navbar from '../components/Navbar';\n\n// Icons\nimport { FaChevronLeft, FaChevronRight, FaCalendarCheck, FaEdit } from 'react-icons/fa';\n\n// Services\nimport { updateAvailabilityStatus, getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets, fetchPublishStatus, savePublishStatus, saveEditStatus, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { sendNotification } from '../services/notificationService';\n\n// Utilities\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\n\n// Third-party Libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Styles\nimport '../styles/ScheduleScreen.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  var _users$secondSelected, _loggedInUser$user3, _availability$shiftOf, _availability$shiftOf2, _availability$shiftOf3, _users$shiftOfferPara, _users$shiftOfferPara2, _users$shiftOfferPara3, _users$shiftOfferPara4, _users$shiftOfferPara5;\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const initialWeekOffset = parseInt(queryParams.get('weekOffset'), 10) || 0;\n  const [weekOffset, setWeekOffset] = useState(initialWeekOffset);\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]);\n  const [highlightedUser, setHighlightedUser] = useState(null);\n  const [selectedUserNotes, setSelectedUserNotes] = useState('');\n  const [shiftCounts, setShiftCounts] = useState({});\n  const [necessaryEmployees, setNecessaryEmployees] = useState({});\n  const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n  const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n  const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n  const [totalWeeklyTargets, setTotalWeeklyTargets] = useState(0);\n  const [isPublished, setIsPublished] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isEditAllowed, setIsEditAllowed] = useState(false);\n  const [mostCriticalShifts, setMostCriticalShifts] = useState([]);\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n  const [isConfirmingPublish, setIsConfirmingPublish] = useState(false);\n  const [isConfirmingEdit, setIsConfirmingEdit] = useState(false);\n  const [isWarningVisible, setIsWarningVisible] = useState(false);\n  const [isViewingAsEmployee, setIsViewingAsEmployee] = useState(false);\n  const [selectedShiftToSwap, setSelectedShiftToSwap] = useState(null);\n  const [offerToUserId, setOfferToUserId] = useState('');\n  const [shiftOfferParams, setShiftOfferParams] = useState(null);\n  const [hasCheckedShiftOffer, setHasCheckedShiftOffer] = useState(false);\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [secondSelectedShift, setSecondSelectedShift] = useState(null);\n  useEffect(() => {\n    window.scrollTo({\n      top: 0\n    });\n  }, []);\n  useEffect(() => {\n    const userFromStorage = JSON.parse(localStorage.getItem('user'));\n    setLoggedInUser(userFromStorage);\n    setIsAdmin((userFromStorage === null || userFromStorage === void 0 ? void 0 : userFromStorage.user.role) === 'admin');\n    setHighlightedUser(userFromStorage === null || userFromStorage === void 0 ? void 0 : userFromStorage.user.id);\n  }, []);\n  useEffect(() => {\n    if (isPublished && !isScheduleFullyStaffed()) {\n      setIsWarningVisible(true);\n    } else {\n      setIsWarningVisible(false);\n    }\n  }, [availability, necessaryEmployees, isPublished]);\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n        const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers(), getNecessaryEmployees(companyId, weekKey), getWeeklyShiftTargets(companyId, weekKey)]);\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n        setNecessaryEmployees(necessaryEmployeesData || {});\n        calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n        const updatedWeeklyTargets = {\n          ...weeklyTargetsData\n        };\n        Object.values(usersData).forEach(user => {\n          if (!(user !== null && user !== void 0 && user.id)) {\n            console.warn(\"User without ID found:\", user);\n            return;\n          }\n          if (!updatedWeeklyTargets[user.id]) {\n            updatedWeeklyTargets[user.id] = 0;\n          }\n        });\n        setWeeklyShiftTargets(updatedWeeklyTargets);\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB');\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeeklyShiftTargetChange = async (userId, value) => {\n    const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n    if (parsedValue < shiftCounts[userId]) {\n      console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n      return;\n    }\n    const updatedTargets = {\n      ...weeklyShiftTargets,\n      [userId]: parsedValue\n    };\n    setWeeklyShiftTargets(updatedTargets);\n    const total = Object.values(updatedTargets).reduce((sum, target) => sum + (target || 0), 0);\n    setTotalWeeklyTargets(total);\n    const cleanedTargets = Object.fromEntries(Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees'));\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n    } catch (error) {\n      console.error('Failed to save weekly shift targets:', error);\n    }\n  };\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = (status, userId, shift, day) => {\n    var _necessaryEmployees$d;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d = necessaryEmployees[day]) === null || _necessaryEmployees$d === void 0 ? void 0 : _necessaryEmployees$d[shift]) || 0;\n    if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled';\n    }\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n    if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled';\n    }\n    if (highlightedUser === userId) {\n      return status === 'disabled' ? 'status-disabled highlighted-user' : `highlighted-user ${status}`;\n    }\n    if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled';\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleEmployeeClick = async userId => {\n    if (highlightedUser === userId) {\n      setHighlightedUser(null);\n      setSelectedUserNotes('');\n      return;\n    }\n    setSelectedUserNotes('');\n    setHighlightedUser(userId);\n    if (currentCompany && userId) {\n      try {\n        var _availabilityData$use;\n        const weekKey = calculateWeekKey(weekOffset);\n        const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n        const userNotes = (availabilityData === null || availabilityData === void 0 ? void 0 : (_availabilityData$use = availabilityData[userId]) === null || _availabilityData$use === void 0 ? void 0 : _availabilityData$use.notes) || 'No notes available.';\n        setSelectedUserNotes(userNotes);\n      } catch (err) {\n        console.error('Failed to fetch notes:', err);\n        setSelectedUserNotes('Error fetching notes.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (Object.keys(availability).length > 0) {\n      updateShiftCounts();\n    }\n  }, [availability]);\n  const updateShiftCounts = () => {\n    const counts = {};\n    let totalShifts = 0;\n    Object.entries(availability).forEach(([userId, shifts]) => {\n      const userShiftCount = Object.values(shifts).reduce((sum, dayShifts) => sum + Object.values(dayShifts).filter(shift => shift.status === 'selected').length, 0);\n      counts[userId] = userShiftCount;\n      totalShifts += userShiftCount;\n    });\n    setShiftCounts(counts);\n    setTotalAssignedShifts(totalShifts);\n  };\n  useEffect(() => {\n    const saveNecessaryEmployeesToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n        if (Object.keys(necessaryEmployees).length > 0) {\n          await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n        }\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n    if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n      saveNecessaryEmployeesToDB();\n    }\n  }, [necessaryEmployees, currentCompany]);\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    var _necessaryEmployees$d2;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift2;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift2 = userData[shift]) === null || _userData$shift2 === void 0 ? void 0 : _userData$shift2[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d2 = necessaryEmployees[day]) === null || _necessaryEmployees$d2 === void 0 ? void 0 : _necessaryEmployees$d2[shift]) || 0;\n    if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n      return;\n    }\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n    if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n      return;\n    }\n    if (currentStatus === 'disabled') return;\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n      setAvailability(updatedAvailability);\n      updateShiftCounts();\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  const employeesWithAvailability = Object.entries(users).filter(([userId]) => availability[userId] && Object.values(availability[userId]).some(shifts => Object.values(shifts).some(shift => shift.status === 'selected' || shift.status === 'default'))).sort(([userIdA], [userIdB]) => {\n    var _users$userIdA, _users$userIdA$name, _users$userIdB, _users$userIdB$name;\n    const nameA = ((_users$userIdA = users[userIdA]) === null || _users$userIdA === void 0 ? void 0 : (_users$userIdA$name = _users$userIdA.name) === null || _users$userIdA$name === void 0 ? void 0 : _users$userIdA$name.toLowerCase()) || '';\n    const nameB = ((_users$userIdB = users[userIdB]) === null || _users$userIdB === void 0 ? void 0 : (_users$userIdB$name = _users$userIdB.name) === null || _users$userIdB$name === void 0 ? void 0 : _users$userIdB$name.toLowerCase()) || '';\n    return nameA.localeCompare(nameB);\n  });\n  const handleNecessaryEmployeesChange = (day, shift, value) => {\n    const updatedNecessaryEmployees = {\n      ...necessaryEmployees\n    };\n    if (!updatedNecessaryEmployees[day]) {\n      updatedNecessaryEmployees[day] = {};\n    }\n    const parsedValue = parseInt(value, 10) || 0;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift3;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift3 = userData[shift]) === null || _userData$shift3 === void 0 ? void 0 : _userData$shift3[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    if (parsedValue < selectedEmployeesCount) {\n      return;\n    }\n    updatedNecessaryEmployees[day][shift] = parsedValue;\n    setNecessaryEmployees(updatedNecessaryEmployees);\n    calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n    const saveToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n        await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n    saveToDB();\n  };\n  const calculateTotalNecessaryEmployees = necessaryEmployeesData => {\n    let total = 0;\n    Object.values(necessaryEmployeesData).forEach(dayData => {\n      Object.values(dayData).forEach(shiftCount => {\n        total += shiftCount || 0;\n      });\n    });\n    setTotalNecessaryEmployees(total);\n  };\n  useEffect(() => {\n    const total = Object.values(weeklyShiftTargets).reduce((sum, target) => sum + (target || 0), 0);\n    setTotalWeeklyTargets(total);\n  }, [weeklyShiftTargets]);\n  const togglePublishStatus = async () => {\n    if (!isPublished && !isScheduleFullyStaffed()) {\n      alert('Cannot publish schedule: not all shifts are fully staffed.');\n      return;\n    }\n    try {\n      const newStatus = !isPublished;\n      const weekKey = calculateWeekKey(weekOffset);\n      await savePublishStatus(currentCompany, weekKey, newStatus);\n      if (newStatus) {\n        const employeeList = Object.entries(users).filter(([_, u]) => u.role === 'employee');\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() + weekOffset * 7 - startDate.getDay());\n        const weekRange = calculateWeekRange(weekOffset);\n        const notificationLink = `/schedule?weekOffset=${weekOffset}`;\n        for (const [employeeId] of employeeList) {\n          await sendNotification(currentCompany, employeeId, `Weekly schedule for ${weekRange} has been published.`, notificationLink);\n        }\n      }\n      setIsPublished(newStatus);\n    } catch (error) {\n      console.error('Failed to toggle publish status:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchPublishStatusFromDB = async () => {\n      try {\n        var _status$status;\n        const weekKey = calculateWeekKey(weekOffset);\n        const status = await fetchPublishStatus(currentCompany, weekKey);\n        setIsPublished((_status$status = status === null || status === void 0 ? void 0 : status.status) !== null && _status$status !== void 0 ? _status$status : false);\n      } catch (error) {\n        console.error('Failed to fetch publish status:', error);\n      }\n    };\n    if (currentCompany) {\n      fetchPublishStatusFromDB();\n    }\n  }, [currentCompany, weekOffset]);\n  const isScheduleFullyStaffed = () => {\n    for (const day of Object.keys(necessaryEmployees || {})) {\n      for (const shift of Object.keys(necessaryEmployees[day] || {})) {\n        const requiredCount = necessaryEmployees[day][shift] || 0;\n        const selectedCount = Object.entries(availability).filter(([_, userData]) => {\n          var _userData$shift4;\n          const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift4 = userData[shift]) === null || _userData$shift4 === void 0 ? void 0 : _userData$shift4[day];\n          return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n        }).length;\n        if (selectedCount !== requiredCount) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const isPublishButtonDisabled = !isScheduleFullyStaffed() && !isPublished;\n  const hasWeeklyNotes = userId => {\n    const userAvailability = availability[userId];\n    return userAvailability && userAvailability.notes && userAvailability.notes.trim() !== '';\n  };\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    setIsAdmin((loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.role) === 'admin');\n    setHighlightedUser(loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.id);\n  }, []);\n  const toggleEditStatus = async () => {\n    try {\n      const newStatus = !isEditAllowed;\n      const weekKey = calculateWeekKey(weekOffset);\n      await saveEditStatus(currentCompany, weekKey, newStatus);\n      setIsEditAllowed(newStatus);\n    } catch (error) {\n      console.error('Failed to toggle edit status:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchEditStatusFromDB = async () => {\n      try {\n        var _status$isEditAllowed;\n        const weekKey = calculateWeekKey(weekOffset);\n        const status = await fetchEditStatus(currentCompany, weekKey);\n        setIsEditAllowed((_status$isEditAllowed = status === null || status === void 0 ? void 0 : status.isEditAllowed) !== null && _status$isEditAllowed !== void 0 ? _status$isEditAllowed : false);\n      } catch (error) {\n        console.error('Failed to fetch edit status:', error);\n      }\n    };\n    if (currentCompany) {\n      fetchEditStatusFromDB();\n    }\n  }, [currentCompany, weekOffset]);\n  const calculateShiftCriticality = (day, shift) => {\n    var _necessaryEmployees$d3;\n    const necessary = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d3 = necessaryEmployees[day]) === null || _necessaryEmployees$d3 === void 0 ? void 0 : _necessaryEmployees$d3[shift]) || 0;\n    const selected = Object.values(availability).filter(userData => {\n      var _userData$shift5, _userData$shift5$day;\n      return (userData === null || userData === void 0 ? void 0 : (_userData$shift5 = userData[shift]) === null || _userData$shift5 === void 0 ? void 0 : (_userData$shift5$day = _userData$shift5[day]) === null || _userData$shift5$day === void 0 ? void 0 : _userData$shift5$day.status) === 'selected';\n    }).length;\n    const defaults = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift6, _userData$shift6$day, _userData$shift7, _userData$shift7$day;\n      const status = userData === null || userData === void 0 ? void 0 : (_userData$shift6 = userData[shift]) === null || _userData$shift6 === void 0 ? void 0 : (_userData$shift6$day = _userData$shift6[day]) === null || _userData$shift6$day === void 0 ? void 0 : _userData$shift6$day.status;\n      return (userData === null || userData === void 0 ? void 0 : (_userData$shift7 = userData[shift]) === null || _userData$shift7 === void 0 ? void 0 : (_userData$shift7$day = _userData$shift7[day]) === null || _userData$shift7$day === void 0 ? void 0 : _userData$shift7$day.isAvailable) && status !== 'selected' && status !== 'disabled';\n    }).length;\n    if (necessary === selected) return 0;\n    return (necessary - selected) / Math.pow(defaults + 1, 2);\n  };\n  const findMostCriticalShifts = () => {\n    let highestCriticality = -Infinity;\n    let criticalShifts = [];\n    Object.keys(necessaryEmployees || {}).forEach(day => {\n      Object.keys(necessaryEmployees[day] || {}).forEach(shift => {\n        var _necessaryEmployees$d4;\n        const criticality = calculateShiftCriticality(day, shift);\n        const necessary = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d4 = necessaryEmployees[day]) === null || _necessaryEmployees$d4 === void 0 ? void 0 : _necessaryEmployees$d4[shift]) || 0;\n        const selected = Object.values(availability).filter(userData => {\n          var _userData$shift8, _userData$shift8$day;\n          return (userData === null || userData === void 0 ? void 0 : (_userData$shift8 = userData[shift]) === null || _userData$shift8 === void 0 ? void 0 : (_userData$shift8$day = _userData$shift8[day]) === null || _userData$shift8$day === void 0 ? void 0 : _userData$shift8$day.status) === 'selected';\n        }).length;\n        if (necessary === selected) return;\n        if (criticality > highestCriticality) {\n          highestCriticality = criticality;\n          criticalShifts = [{\n            day,\n            shift\n          }];\n        } else if (criticality === highestCriticality && criticality > 0) {\n          criticalShifts.push({\n            day,\n            shift\n          });\n        }\n      });\n    });\n    return criticalShifts;\n  };\n  useEffect(() => {\n    setMostCriticalShifts(findMostCriticalShifts());\n  }, [necessaryEmployees, availability]);\n  const openConfirmModal = actionType => {\n    if (actionType === 'publish') {\n      setIsConfirmingPublish(true);\n      setIsConfirmingEdit(false);\n    } else if (actionType === 'edit') {\n      setIsConfirmingEdit(true);\n      setIsConfirmingPublish(false);\n    }\n    setIsConfirmModalOpen(true);\n  };\n  const closeConfirmModal = () => {\n    setIsConfirmModalOpen(false);\n  };\n  const getUserShiftTable = userId => {\n    if (!availability[userId]) return [];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return shifts.map(shift => {\n      const row = {\n        shift: shift[0] + (shift === 'Night' ? 't' : '')\n      };\n      days.forEach(day => {\n        var _availability$userId, _availability$userId$;\n        const shiftData = (_availability$userId = availability[userId]) === null || _availability$userId === void 0 ? void 0 : (_availability$userId$ = _availability$userId[shift]) === null || _availability$userId$ === void 0 ? void 0 : _availability$userId$[day];\n        if ((shiftData === null || shiftData === void 0 ? void 0 : shiftData.status) === 'selected') {\n          row[day] = '✅';\n        } else if (shiftData !== null && shiftData !== void 0 && shiftData.isAvailable) {\n          row[day] = '🟠';\n        } else {\n          row[day] = '';\n        }\n      });\n      return row;\n    });\n  };\n  const handleOfferShift = async () => {\n    const weekKey = calculateWeekKey(weekOffset);\n    const shift = selectedShiftToSwap.shift;\n    const day = selectedShiftToSwap.day;\n    const fromUser = selectedShiftToSwap.userId;\n    const weekRange = calculateWeekRange(weekOffset);\n    let recipients = [];\n    if (offerToUserId) {\n      recipients.push(offerToUserId);\n    } else {\n      recipients = Object.entries(users).filter(([id, user]) => {\n        var _availability$id, _availability$id$Nigh, _availability$id$Nigh2, _availability$id2, _availability$id2$Mor, _availability$id2$Mor2, _availability$id3, _availability$id3$Noo, _availability$id3$Noo2;\n        if (id === fromUser) return false;\n        const currentShiftCount = shiftCounts[id] || 0;\n        if (currentShiftCount >= 6) return false;\n        const isAssignedThatDay = Object.values((availability === null || availability === void 0 ? void 0 : availability[id]) || {}).some(shiftData => {\n          var _shiftData$day;\n          return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$day = shiftData[day]) === null || _shiftData$day === void 0 ? void 0 : _shiftData$day.status) === 'selected';\n        });\n        if (isAssignedThatDay) return false;\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = days.indexOf(day);\n        const prev = days[currentIndex - 1];\n        const next = days[currentIndex + 1];\n        if (['Morning', 'Noon'].includes(shift) && prev && (availability === null || availability === void 0 ? void 0 : (_availability$id = availability[id]) === null || _availability$id === void 0 ? void 0 : (_availability$id$Nigh = _availability$id.Night) === null || _availability$id$Nigh === void 0 ? void 0 : (_availability$id$Nigh2 = _availability$id$Nigh[prev]) === null || _availability$id$Nigh2 === void 0 ? void 0 : _availability$id$Nigh2.status) === 'selected') return false;\n        if (shift === 'Night' && next && ((availability === null || availability === void 0 ? void 0 : (_availability$id2 = availability[id]) === null || _availability$id2 === void 0 ? void 0 : (_availability$id2$Mor = _availability$id2.Morning) === null || _availability$id2$Mor === void 0 ? void 0 : (_availability$id2$Mor2 = _availability$id2$Mor[next]) === null || _availability$id2$Mor2 === void 0 ? void 0 : _availability$id2$Mor2.status) === 'selected' || (availability === null || availability === void 0 ? void 0 : (_availability$id3 = availability[id]) === null || _availability$id3 === void 0 ? void 0 : (_availability$id3$Noo = _availability$id3.Noon) === null || _availability$id3$Noo === void 0 ? void 0 : (_availability$id3$Noo2 = _availability$id3$Noo[next]) === null || _availability$id3$Noo2 === void 0 ? void 0 : _availability$id3$Noo2.status) === 'selected')) return false;\n        return true;\n      }).map(([id]) => id);\n    }\n    for (const recipientId of recipients) {\n      var _users$fromUser;\n      const link = `/schedule?weekOffset=${weekOffset}&offerShift=true&offerDay=${day}&shift=${shift}&fromUser=${fromUser}&offeredTo=${recipientId}`;\n      await sendNotification(currentCompany, recipientId, `You are offered to take ${shift} shift on ${day} (Week: ${weekRange}) from ${((_users$fromUser = users[fromUser]) === null || _users$fromUser === void 0 ? void 0 : _users$fromUser.name) || 'a colleague'}.`, link);\n    }\n    toast.success('Shift offer sent successfully!');\n    setSelectedShiftToSwap(null);\n    setOfferToUserId('');\n  };\n  useEffect(() => {\n    var _loggedInUser$user;\n    if (hasCheckedShiftOffer || isLoading || !loggedInUser) return;\n    const offerShift = queryParams.get('offerShift');\n    const offerDay = queryParams.get('offerDay');\n    const offeredTo = queryParams.get('offeredTo');\n    const fromUser = queryParams.get('fromUser');\n    const shift = queryParams.get('shift');\n    if (offerShift === 'true' && offerDay && shift && fromUser && (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user = loggedInUser.user) === null || _loggedInUser$user === void 0 ? void 0 : _loggedInUser$user.id) === offeredTo) {\n      var _availability$fromUse, _availability$fromUse2, _availability$fromUse3;\n      const isStillOffered = (availability === null || availability === void 0 ? void 0 : (_availability$fromUse = availability[fromUser]) === null || _availability$fromUse === void 0 ? void 0 : (_availability$fromUse2 = _availability$fromUse[shift]) === null || _availability$fromUse2 === void 0 ? void 0 : (_availability$fromUse3 = _availability$fromUse2[offerDay]) === null || _availability$fromUse3 === void 0 ? void 0 : _availability$fromUse3.status) === 'selected';\n      if (!isStillOffered) {\n        toast.info('This shift offer is no longer available.');\n      } else {\n        setShiftOfferParams({\n          day: offerDay,\n          shift,\n          fromUser,\n          offeredTo,\n          weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0\n        });\n      }\n      setHasCheckedShiftOffer(true);\n    }\n  }, [location.search, availability, isLoading, loggedInUser]);\n  useEffect(() => {\n    const approve = queryParams.get('approveShiftTransfer');\n    const day = queryParams.get('day');\n    const shift = queryParams.get('shift');\n    const fromUser = queryParams.get('fromUser');\n    const toUser = queryParams.get('toUser');\n    if (approve === 'true' && day && shift && fromUser && toUser && isAdmin) {\n      setShiftOfferParams({\n        day,\n        shift,\n        fromUser,\n        offeredTo: toUser,\n        weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n        isAdminApproval: true\n      });\n    }\n  }, [location.search, isAdmin]);\n  const handleSwapProposal = async () => {\n    var _availability$me3, _availability$me3$Nig, _availability$me3$Nig2, _availability$them3, _availability$them3$N, _availability$them3$N2, _loggedInUser$user2, _Object$entries$find, _users$me, _users$them;\n    const {\n      shift: myShift,\n      day: myDay,\n      userId: me\n    } = selectedShiftToSwap;\n    const {\n      shift: theirShift,\n      day: theirDay,\n      userId: them\n    } = secondSelectedShift;\n    const weekKey = calculateWeekKey(weekOffset);\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const myDayIndex = daysOfWeek.indexOf(myDay);\n    const theirDayIndex = daysOfWeek.indexOf(theirDay);\n    const dayBeforeMyDay = daysOfWeek[myDayIndex - 1];\n    const dayBeforeTheirDay = daysOfWeek[theirDayIndex - 1];\n    const dayAfterMyDay = daysOfWeek[myDayIndex + 1];\n    const dayAfterTheirDay = daysOfWeek[theirDayIndex + 1];\n    const meAssignedOnTheirDay = Object.entries(availability[me] || {}).some(([_, shiftData]) => {\n      var _shiftData$theirDay;\n      return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$theirDay = shiftData[theirDay]) === null || _shiftData$theirDay === void 0 ? void 0 : _shiftData$theirDay.status) === 'selected';\n    });\n    const themAssignedOnMyDay = Object.entries(availability[them] || {}).some(([_, shiftData]) => {\n      var _shiftData$myDay;\n      return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$myDay = shiftData[myDay]) === null || _shiftData$myDay === void 0 ? void 0 : _shiftData$myDay.status) === 'selected';\n    });\n    const meMorningAfterTheirNight = theirShift === 'Night' && dayAfterTheirDay && ['Morning', 'Noon'].some(s => {\n      var _availability$me, _availability$me$s, _availability$me$s$da;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$me = availability[me]) === null || _availability$me === void 0 ? void 0 : (_availability$me$s = _availability$me[s]) === null || _availability$me$s === void 0 ? void 0 : (_availability$me$s$da = _availability$me$s[dayAfterTheirDay]) === null || _availability$me$s$da === void 0 ? void 0 : _availability$me$s$da.status) === 'selected';\n    });\n    const themMorningAfterMyNight = myShift === 'Night' && dayAfterMyDay && ['Morning', 'Noon'].some(s => {\n      var _availability$them, _availability$them$s, _availability$them$s$;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$them = availability[them]) === null || _availability$them === void 0 ? void 0 : (_availability$them$s = _availability$them[s]) === null || _availability$them$s === void 0 ? void 0 : (_availability$them$s$ = _availability$them$s[dayAfterMyDay]) === null || _availability$them$s$ === void 0 ? void 0 : _availability$them$s$.status) === 'selected';\n    });\n    const meNightAfterMorningBeforeTheirDay = theirShift === 'Night' && dayBeforeTheirDay && ['Morning', 'Noon'].some(s => {\n      var _availability$me2, _availability$me2$s, _availability$me2$s$d;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$me2 = availability[me]) === null || _availability$me2 === void 0 ? void 0 : (_availability$me2$s = _availability$me2[s]) === null || _availability$me2$s === void 0 ? void 0 : (_availability$me2$s$d = _availability$me2$s[dayBeforeTheirDay]) === null || _availability$me2$s$d === void 0 ? void 0 : _availability$me2$s$d.status) === 'selected';\n    });\n    const themNightAfterMorningBeforeMyDay = myShift === 'Night' && dayBeforeMyDay && ['Morning', 'Noon'].some(s => {\n      var _availability$them2, _availability$them2$s, _availability$them2$s2;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$them2 = availability[them]) === null || _availability$them2 === void 0 ? void 0 : (_availability$them2$s = _availability$them2[s]) === null || _availability$them2$s === void 0 ? void 0 : (_availability$them2$s2 = _availability$them2$s[dayBeforeMyDay]) === null || _availability$them2$s2 === void 0 ? void 0 : _availability$them2$s2.status) === 'selected';\n    });\n    const meMorningAfterNightBeforeTheirDay = ['Morning', 'Noon'].includes(theirShift) && dayBeforeTheirDay && (availability === null || availability === void 0 ? void 0 : (_availability$me3 = availability[me]) === null || _availability$me3 === void 0 ? void 0 : (_availability$me3$Nig = _availability$me3.Night) === null || _availability$me3$Nig === void 0 ? void 0 : (_availability$me3$Nig2 = _availability$me3$Nig[dayBeforeTheirDay]) === null || _availability$me3$Nig2 === void 0 ? void 0 : _availability$me3$Nig2.status) === 'selected';\n    const themMorningAfterNightBeforeMyDay = ['Morning', 'Noon'].includes(myShift) && dayBeforeMyDay && (availability === null || availability === void 0 ? void 0 : (_availability$them3 = availability[them]) === null || _availability$them3 === void 0 ? void 0 : (_availability$them3$N = _availability$them3.Night) === null || _availability$them3$N === void 0 ? void 0 : (_availability$them3$N2 = _availability$them3$N[dayBeforeMyDay]) === null || _availability$them3$N2 === void 0 ? void 0 : _availability$them3$N2.status) === 'selected';\n    if (meAssignedOnTheirDay || themAssignedOnMyDay || meMorningAfterTheirNight || themMorningAfterMyNight || meNightAfterMorningBeforeTheirDay || themNightAfterMorningBeforeMyDay || meMorningAfterNightBeforeTheirDay || themMorningAfterNightBeforeMyDay) {\n      toast.error(\"Swap not allowed: Conflict with shift-before/after rules or existing assignments.\");\n      return;\n    }\n    if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user2 = loggedInUser.user) === null || _loggedInUser$user2 === void 0 ? void 0 : _loggedInUser$user2.role) === 'admin') {\n      await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n      await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n      await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n      await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n      const updated = {\n        ...availability\n      };\n      updated[me][myShift][myDay].status = 'default';\n      updated[them][theirShift][theirDay].status = 'default';\n      updated[me][theirShift] ||= {};\n      updated[me][theirShift][theirDay] ||= {\n        isAvailable: true\n      };\n      updated[me][theirShift][theirDay].status = 'selected';\n      updated[them][myShift] ||= {};\n      updated[them][myShift][myDay] ||= {\n        isAvailable: true\n      };\n      updated[them][myShift][myDay].status = 'selected';\n      setAvailability(updated);\n      updateShiftCounts();\n      setSelectedShiftToSwap(null);\n      setSecondSelectedShift(null);\n      toast.success(\"Swap completed successfully.\");\n      return;\n    }\n    const adminId = (_Object$entries$find = Object.entries(users).find(([, u]) => u.role === 'admin')) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];\n    if (!adminId) {\n      toast.error('Admin not found.');\n      return;\n    }\n    const notificationLink = `/schedule?weekOffset=${weekOffset}&approveSwap=true&me=${me}&them=${them}&myDay=${myDay}&myShift=${myShift}&theirDay=${theirDay}&theirShift=${theirShift}`;\n    await sendNotification(currentCompany, adminId, `${((_users$me = users[me]) === null || _users$me === void 0 ? void 0 : _users$me.name) || 'An employee'} requested to swap their ${myShift} shift on ${myDay} with ${((_users$them = users[them]) === null || _users$them === void 0 ? void 0 : _users$them.name) || 'another employee'}'s ${theirShift} shift on ${theirDay}.`, notificationLink);\n    toast.success('Your swap request has been sent to the admin.');\n    setSelectedShiftToSwap(null);\n    setSecondSelectedShift(null);\n  };\n  useEffect(() => {\n    const approveSwap = queryParams.get('approveSwap');\n    const me = queryParams.get('me');\n    const them = queryParams.get('them');\n    const myDay = queryParams.get('myDay');\n    const myShift = queryParams.get('myShift');\n    const theirDay = queryParams.get('theirDay');\n    const theirShift = queryParams.get('theirShift');\n    if (approveSwap === 'true' && me && them && myDay && myShift && theirDay && theirShift && isAdmin) {\n      setShiftOfferParams({\n        isAdminSwapApproval: true,\n        me,\n        them,\n        myDay,\n        myShift,\n        theirDay,\n        theirShift,\n        weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0\n      });\n    }\n  }, [location.search, isAdmin]);\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 17\n      }, this), isConfirmModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: isConfirmingPublish ? isPublished ? 'Confirm Schedule Unpublishing' : 'Confirm Schedule Publication' : isConfirmingEdit ? isEditAllowed ? 'Confirm Disabling Editing' : 'Confirm Enabling Editing' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: isConfirmingPublish ? isPublished ? 'Are you sure you want to unpublish this schedule?' : 'Are you sure you want to publish this schedule?' : isConfirmingEdit ? isEditAllowed ? 'Are you sure you want to disable weekly availability submissions?' : 'Are you sure you want to enable weekly availability submissions?' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"confirm-button\",\n              onClick: () => {\n                if (isConfirmingPublish) {\n                  togglePublishStatus();\n                } else if (isConfirmingEdit) {\n                  toggleEditStatus();\n                }\n                closeConfirmModal();\n              },\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 874,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cancel-button\",\n              onClick: closeConfirmModal,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 873,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 890,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Weekly Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 21\n        }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-toggle-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"view-toggle-button\",\n            onClick: () => setIsViewingAsEmployee(prev => !prev),\n            children: [isViewingAsEmployee ? /*#__PURE__*/_jsxDEV(FaEdit, {\n              style: {\n                marginRight: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 56\n            }, this) : /*#__PURE__*/_jsxDEV(FaCalendarCheck, {\n              style: {\n                marginRight: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 100\n            }, this), isViewingAsEmployee ? 'Back to Draft View' : 'View Final Schedule']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 895,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 25\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 25\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [!isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"week-navigation centered-navigation\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(-1),\n              children: \"Previous Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"week-range\",\n              children: calculateWeekRange(weekOffset)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(1),\n              children: \"Next Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 33\n          }, this), isAdmin && !isViewingAsEmployee ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"schedule-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"schedule-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Shift\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 929,\n                    columnNumber: 49\n                  }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 933,\n                      columnNumber: 67\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"date\",\n                      children: weekDates[index]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 934,\n                      columnNumber: 61\n                    }, this)]\n                  }, day, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 932,\n                    columnNumber: 57\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 928,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 927,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: shift\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 943,\n                    columnNumber: 53\n                  }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                    var _necessaryEmployees$d5, _necessaryEmployees$d6;\n                    const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                      var _userData$shift9;\n                      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift9 = userData[shift]) === null || _userData$shift9 === void 0 ? void 0 : _userData$shift9[day];\n                      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                    }).length;\n                    const isFullyStaffed = selectedEmployeesCount === ((necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d5 = necessaryEmployees[day]) === null || _necessaryEmployees$d5 === void 0 ? void 0 : _necessaryEmployees$d5[shift]) || 0);\n                    const criticality = calculateShiftCriticality(day, shift);\n                    const isMostCritical = mostCriticalShifts.some(criticalShift => criticalShift.day === day && criticalShift.shift === shift);\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: `schedule-cell \n                                                                ${isFullyStaffed ? 'fully-staffed' : ''} \n                                                                ${isMostCritical ? 'most-critical' : ''}\n                                                            `,\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"number\",\n                        min: \"0\",\n                        className: \"necessary-employees-input\",\n                        value: (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d6 = necessaryEmployees[day]) === null || _necessaryEmployees$d6 === void 0 ? void 0 : _necessaryEmployees$d6[shift]) || 0,\n                        onChange: e => handleNecessaryEmployeesChange(day, shift, e.target.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 965,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"selected-employees-indicator\",\n                        children: [selectedEmployeesCount, \" Selected\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 973,\n                        columnNumber: 65\n                      }, this), Object.entries(availability).filter(([userId, userData]) => {\n                        var _userData$shift10;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift10 = userData[shift]) === null || _userData$shift10 === void 0 ? void 0 : _userData$shift10[day];\n                        return availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.isAvailable;\n                      }).sort(([userIdA], [userIdB]) => {\n                        var _users$userIdA2, _users$userIdB2;\n                        const nameA = ((_users$userIdA2 = users[userIdA]) === null || _users$userIdA2 === void 0 ? void 0 : _users$userIdA2.name) || '';\n                        const nameB = ((_users$userIdB2 = users[userIdB]) === null || _users$userIdB2 === void 0 ? void 0 : _users$userIdB2.name) || '';\n                        return nameA.localeCompare(nameB);\n                      }).map(([userId, userData]) => {\n                        var _userData$shift11, _users$userId;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift11 = userData[shift]) === null || _userData$shift11 === void 0 ? void 0 : _userData$shift11[day];\n                        const statusClass = getStatusClass(availabilityInfo.status, userId);\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: `availability-entry ${statusClass}`,\n                          onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                          style: {\n                            backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ffff',\n                            color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                            pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                            cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                          },\n                          children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                        }, userId, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 992,\n                          columnNumber: 77\n                        }, this);\n                      })]\n                    }, day, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 957,\n                      columnNumber: 61\n                    }, this);\n                  })]\n                }, shift, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 942,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 940,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"employees-list\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Employees\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1029,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"week-navigation\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"week-nav-button\",\n                  onClick: () => handleWeekChange(-1),\n                  children: /*#__PURE__*/_jsxDEV(FaChevronLeft, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1033,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1032,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"week-range\",\n                  children: calculateWeekRange(weekOffset)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1035,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"week-nav-button\",\n                  onClick: () => handleWeekChange(1),\n                  children: /*#__PURE__*/_jsxDEV(FaChevronRight, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1037,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1036,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1031,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"buttons-container\",\n                children: [isWarningVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"warning-banner\",\n                  children: \"\\u26A0\\uFE0F Warning: One or more shifts are no longer fully staffed. Please review the schedule.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1043,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `general-button ${isPublished ? 'green' : 'red'}`,\n                  onClick: () => openConfirmModal('publish'),\n                  disabled: isPublishButtonDisabled,\n                  children: [isPublished ? 'Unpublish Schedule' : 'Publish Schedule', isWarningVisible && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"publish-warning-icon\",\n                    children: \"\\uD83D\\uDD34\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1054,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1048,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `general-button ${isEditAllowed ? 'green' : 'red'}`,\n                  onClick: () => openConfirmModal('edit'),\n                  children: isEditAllowed ? 'Disable Editing' : 'Enable Editing'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1057,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1041,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"total-info-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Weekly Overview\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1067,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1068,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Weekly Staff: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalNecessaryEmployees\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1069,\n                    columnNumber: 62\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1069,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1070,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Weekly Shift Targets: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalWeeklyTargets\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1071,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1071,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1072,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Assigned Shifts: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalAssignedShifts\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1073,\n                    columnNumber: 65\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1073,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1074,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1066,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: employeesWithAvailability.map(([userId, user]) => {\n                  const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId];\n                  const hasNotes = hasWeeklyNotes(userId);\n                  const backgroundColor = hasNotes ? 'yellow' : '#2980b9';\n                  const textColor = hasNotes ? 'black' : 'white';\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    onClick: () => handleEmployeeClick(userId),\n                    className: `${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`,\n                    style: {\n                      backgroundColor: isTargetMet ? '#d4edda' : 'inherit'\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"employee-details\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"notes-indicator\",\n                        style: {\n                          backgroundColor: backgroundColor,\n                          color: textColor\n                        },\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"indicator-text\",\n                          children: \"i\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1102,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1095,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"employee-name\",\n                        children: user.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1105,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"weekly-shift-target\",\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [shiftCounts[userId] || 0, \" shifts out of:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"number\",\n                            min: \"0\",\n                            max: \"6\",\n                            value: weeklyShiftTargets[userId] || 0,\n                            onClick: e => e.stopPropagation(),\n                            onChange: e => handleWeeklyShiftTargetChange(userId, e.target.value),\n                            className: \"weekly-shift-input\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1112,\n                            columnNumber: 69\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1110,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1109,\n                        columnNumber: 61\n                      }, this), highlightedUser === userId && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [selectedUserNotes && selectedUserNotes !== 'No notes available.' && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"employee-notes\",\n                          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                            children: \"Notes:\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1128,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                            children: selectedUserNotes\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1129,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1127,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"employee-table\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"mini-schedule-legend compact\",\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"legend-symbol\",\n                              children: \"\\u2705\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1135,\n                              columnNumber: 77\n                            }, this), \" Assigned \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"legend-symbol\",\n                              children: \"\\uD83D\\uDFE0\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1136,\n                              columnNumber: 77\n                            }, this), \" Submitted\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1134,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                            className: \"mini-schedule-table\",\n                            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                                  children: \"Shift\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1142,\n                                  columnNumber: 85\n                                }, this), ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n                                  children: day\n                                }, day, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1144,\n                                  columnNumber: 89\n                                }, this))]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1141,\n                                columnNumber: 81\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1140,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                              children: getUserShiftTable(userId).map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n                                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                                  children: {\n                                    Morning: 'M',\n                                    Noon: 'N',\n                                    Evening: 'E',\n                                    Night: 'Nt'\n                                  }[row.shift] || row.shift\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1151,\n                                  columnNumber: 89\n                                }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n                                  children: row[day]\n                                }, day, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1160,\n                                  columnNumber: 93\n                                }, this))]\n                              }, row.shift, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1150,\n                                columnNumber: 85\n                              }, this))\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1148,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1139,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1133,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1093,\n                      columnNumber: 57\n                    }, this)\n                  }, userId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1085,\n                    columnNumber: 53\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1077,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 925,\n            columnNumber: 33\n          }, this) : isPublished ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"schedule-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"schedule-table\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Shift\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1183,\n                      columnNumber: 57\n                    }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1187,\n                        columnNumber: 75\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"date\",\n                        children: weekDates[index]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1188,\n                        columnNumber: 69\n                      }, this)]\n                    }, day, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1186,\n                      columnNumber: 65\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1182,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1181,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: shift\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1197,\n                      columnNumber: 61\n                    }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                      const selectedEmployees = Object.entries(availability).filter(([userId, userData]) => {\n                        var _userData$shift12;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift12 = userData[shift]) === null || _userData$shift12 === void 0 ? void 0 : _userData$shift12[day];\n                        return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                      });\n                      return /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"schedule-cell\",\n                        children: selectedEmployees.sort(([userIdA], [userIdB]) => {\n                          var _users$userIdA3, _users$userIdA3$name, _users$userIdB3, _users$userIdB3$name;\n                          const nameA = ((_users$userIdA3 = users[userIdA]) === null || _users$userIdA3 === void 0 ? void 0 : (_users$userIdA3$name = _users$userIdA3.name) === null || _users$userIdA3$name === void 0 ? void 0 : _users$userIdA3$name.toLowerCase()) || '';\n                          const nameB = ((_users$userIdB3 = users[userIdB]) === null || _users$userIdB3 === void 0 ? void 0 : (_users$userIdB3$name = _users$userIdB3.name) === null || _users$userIdB3$name === void 0 ? void 0 : _users$userIdB3$name.toLowerCase()) || '';\n                          return nameA.localeCompare(nameB);\n                        }).map(([userId]) => {\n                          var _users$userId2;\n                          const isOwnShift = userId === highlightedUser;\n                          const isSelected = selectedShiftToSwap && selectedShiftToSwap.userId === userId && selectedShiftToSwap.day === day && selectedShiftToSwap.shift === shift;\n                          const isOfferedToMe = shiftOfferParams && userId === shiftOfferParams.fromUser && shift === shiftOfferParams.shift && day === shiftOfferParams.day;\n                          const isSecondSelected = secondSelectedShift && secondSelectedShift.userId === userId && secondSelectedShift.day === day && secondSelectedShift.shift === shift;\n                          console.log('[DEBUG] checking cell', {\n                            userId,\n                            shift,\n                            day,\n                            highlightedUser,\n                            isOwnShift,\n                            isSelected,\n                            isOfferedToMe,\n                            shiftOfferParams\n                          });\n                          return /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: `employee-button \n                                                                                        ${isOwnShift ? 'highlighted-own-shift' : ''} \n                                                                                        ${isSelected ? 'highlighted-swap-source' : ''} \n                                                                                        ${isSecondSelected ? 'highlighted-swap-target' : ''} \n                                                                                        ${isOfferedToMe ? 'offered-to-me' : ''} \n                                                                                        ${shiftOfferParams !== null && shiftOfferParams !== void 0 && shiftOfferParams.isAdminSwapApproval && (userId === shiftOfferParams.me && shift === shiftOfferParams.myShift && day === shiftOfferParams.myDay || userId === shiftOfferParams.them && shift === shiftOfferParams.theirShift && day === shiftOfferParams.theirDay) ? 'highlighted-swap' : ''}\n                                                                                    `,\n                            onClick: () => {\n                              if (isOwnShift) {\n                                if (selectedShiftToSwap && selectedShiftToSwap.userId === userId && selectedShiftToSwap.shift === shift && selectedShiftToSwap.day === day) {\n                                  setSelectedShiftToSwap(null);\n                                  setSecondSelectedShift(null);\n                                } else {\n                                  setSelectedShiftToSwap({\n                                    userId,\n                                    shift,\n                                    day\n                                  });\n                                  setSecondSelectedShift(null);\n                                }\n                              } else if (selectedShiftToSwap && !secondSelectedShift) {\n                                setSecondSelectedShift({\n                                  userId,\n                                  shift,\n                                  day\n                                });\n                              } else {\n                                setSelectedShiftToSwap(null);\n                                setSecondSelectedShift(null);\n                              }\n                            },\n                            children: ((_users$userId2 = users[userId]) === null || _users$userId2 === void 0 ? void 0 : _users$userId2.name) || 'Unknown'\n                          }, userId, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1242,\n                            columnNumber: 85\n                          }, this);\n                        })\n                      }, day, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1205,\n                        columnNumber: 69\n                      }, this);\n                    })]\n                  }, shift, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1196,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1194,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1180,\n                columnNumber: 45\n              }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employees-list\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Employees\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1300,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: employeesWithAvailability.map(([userId, user]) => {\n                    return /*#__PURE__*/_jsxDEV(\"li\", {\n                      onClick: () => handleEmployeeClick(userId),\n                      className: `${highlightedUser === userId ? 'selected' : ''}`,\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"employee-details\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"employee-name\",\n                          children: user.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1310,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1309,\n                        columnNumber: 69\n                      }, this)\n                    }, userId, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1304,\n                      columnNumber: 65\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1301,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1299,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1179,\n              columnNumber: 41\n            }, this), selectedShiftToSwap && (secondSelectedShift ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Swap Shifts With Another Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1323,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are proposing to swap your \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1325,\n                  columnNumber: 88\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1325,\n                  columnNumber: 142\n                }, this), \"with \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: (_users$secondSelected = users[secondSelectedShift.userId]) === null || _users$secondSelected === void 0 ? void 0 : _users$secondSelected.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1326,\n                  columnNumber: 62\n                }, this), \"'s\", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\" \", secondSelectedShift.shift]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1327,\n                  columnNumber: 57\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: secondSelectedShift.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1327,\n                  columnNumber: 112\n                }, this), \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1324,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  onClick: handleSwapProposal,\n                  children: \"Propose Swap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1330,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setSelectedShiftToSwap(null);\n                    setSecondSelectedShift(null);\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1336,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1329,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1322,\n              columnNumber: 49\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Offer Shift to Another Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1350,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are offering your \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1352,\n                  columnNumber: 79\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1352,\n                  columnNumber: 133\n                }, this), \" to another employee.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1351,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Choose employee to offer the shift to:\", /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: offerToUserId,\n                    onChange: e => setOfferToUserId(e.target.value),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"No one specific\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1358,\n                      columnNumber: 65\n                    }, this), Object.entries(users).filter(([id, user]) => {\n                      var _user$companyIds, _availability$id4, _availability$id4$Nig, _availability$id4$Nig2, _availability$id5, _availability$id5$Mor, _availability$id5$Mor2, _availability$id6, _availability$id6$Noo, _availability$id6$Noo2;\n                      if (id === selectedShiftToSwap.userId) return false;\n                      if (!((_user$companyIds = user.companyIds) !== null && _user$companyIds !== void 0 && _user$companyIds.some(company => {\n                        var _loggedInUser$company;\n                        return company.companyId === (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$company = loggedInUser.company) === null || _loggedInUser$company === void 0 ? void 0 : _loggedInUser$company.id);\n                      }))) return false;\n                      if ((shiftCounts[id] || 0) >= 6) return false;\n                      const isAssignedThatDay = Object.values((availability === null || availability === void 0 ? void 0 : availability[id]) || {}).some(shiftData => {\n                        var _shiftData$selectedSh;\n                        return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$selectedSh = shiftData[selectedShiftToSwap.day]) === null || _shiftData$selectedSh === void 0 ? void 0 : _shiftData$selectedSh.status) === 'selected';\n                      });\n                      if (isAssignedThatDay) return false;\n                      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                      const currentIndex = days.indexOf(selectedShiftToSwap.day);\n                      const previousDay = days[currentIndex - 1];\n                      const nextDay = days[currentIndex + 1];\n                      if (['Morning', 'Noon'].includes(selectedShiftToSwap.shift) && previousDay && (availability === null || availability === void 0 ? void 0 : (_availability$id4 = availability[id]) === null || _availability$id4 === void 0 ? void 0 : (_availability$id4$Nig = _availability$id4.Night) === null || _availability$id4$Nig === void 0 ? void 0 : (_availability$id4$Nig2 = _availability$id4$Nig[previousDay]) === null || _availability$id4$Nig2 === void 0 ? void 0 : _availability$id4$Nig2.status) === 'selected') return false;\n                      if (selectedShiftToSwap.shift === 'Night' && nextDay && ((availability === null || availability === void 0 ? void 0 : (_availability$id5 = availability[id]) === null || _availability$id5 === void 0 ? void 0 : (_availability$id5$Mor = _availability$id5.Morning) === null || _availability$id5$Mor === void 0 ? void 0 : (_availability$id5$Mor2 = _availability$id5$Mor[nextDay]) === null || _availability$id5$Mor2 === void 0 ? void 0 : _availability$id5$Mor2.status) === 'selected' || (availability === null || availability === void 0 ? void 0 : (_availability$id6 = availability[id]) === null || _availability$id6 === void 0 ? void 0 : (_availability$id6$Noo = _availability$id6.Noon) === null || _availability$id6$Noo === void 0 ? void 0 : (_availability$id6$Noo2 = _availability$id6$Noo[nextDay]) === null || _availability$id6$Noo2 === void 0 ? void 0 : _availability$id6$Noo2.status) === 'selected')) return false;\n                      return true;\n                    }).sort(([, a], [, b]) => (a.name || '').localeCompare(b.name || '')).map(([id, user]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: id,\n                      children: user.name\n                    }, id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1395,\n                      columnNumber: 73\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1357,\n                    columnNumber: 61\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1355,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  onClick: handleOfferShift,\n                  children: \"Offer Shift\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1402,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1354,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1349,\n              columnNumber: 49\n            }, this)), shiftOfferParams && (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user3 = loggedInUser.user) === null || _loggedInUser$user3 === void 0 ? void 0 : _loggedInUser$user3.id) === shiftOfferParams.offeredTo && (availability === null || availability === void 0 ? void 0 : (_availability$shiftOf = availability[shiftOfferParams.fromUser]) === null || _availability$shiftOf === void 0 ? void 0 : (_availability$shiftOf2 = _availability$shiftOf[shiftOfferParams.shift]) === null || _availability$shiftOf2 === void 0 ? void 0 : (_availability$shiftOf3 = _availability$shiftOf2[shiftOfferParams.day]) === null || _availability$shiftOf3 === void 0 ? void 0 : _availability$shiftOf3.status) === 'selected' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"You\\u2019ve received a shift offer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1415,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are being offered the \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: shiftOfferParams.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1417,\n                  columnNumber: 83\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: shiftOfferParams.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1417,\n                  columnNumber: 134\n                }, this), \" by\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara = users[shiftOfferParams.fromUser]) === null || _users$shiftOfferPara === void 0 ? void 0 : _users$shiftOfferPara.name) || 'a colleague'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1418,\n                  columnNumber: 57\n                }, this), \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1416,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$fromUse4, _availability$fromUse5, _availability$fromUse6, _Object$entries$find2;\n                    const weekKey = calculateWeekKey(shiftOfferParams.weekOffset);\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo\n                    } = shiftOfferParams;\n                    const currentStatus = availability === null || availability === void 0 ? void 0 : (_availability$fromUse4 = availability[fromUser]) === null || _availability$fromUse4 === void 0 ? void 0 : (_availability$fromUse5 = _availability$fromUse4[shift]) === null || _availability$fromUse5 === void 0 ? void 0 : (_availability$fromUse6 = _availability$fromUse5[day]) === null || _availability$fromUse6 === void 0 ? void 0 : _availability$fromUse6.status;\n                    if (currentStatus !== 'selected') {\n                      toast.error('This shift has already been taken by someone else.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n                    const adminId = (_Object$entries$find2 = Object.entries(users).find(([, u]) => u.role === 'admin')) === null || _Object$entries$find2 === void 0 ? void 0 : _Object$entries$find2[0];\n                    if (!adminId) {\n                      toast.error('Admin not found.');\n                      return;\n                    }\n                    const weekRange = calculateWeekRange(shiftOfferParams.weekOffset);\n                    const notificationLink = `/schedule?weekOffset=${shiftOfferParams.weekOffset}&approveShiftTransfer=true&day=${day}&shift=${shift}&fromUser=${fromUser}&toUser=${offeredTo}`;\n                    if (adminId === offeredTo) {\n                      await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                      await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n                      const updated = {\n                        ...availability\n                      };\n                      updated[fromUser][shift][day].status = 'default';\n                      if (!updated[offeredTo]) updated[offeredTo] = {};\n                      if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                      if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = {\n                        isAvailable: true\n                      };\n                      updated[offeredTo][shift][day].status = 'selected';\n                      setAvailability(updated);\n                      updateShiftCounts();\n                      toast.success('Shift was successfully reassigned to you.');\n                      setShiftOfferParams(null);\n                    } else {\n                      var _users$offeredTo;\n                      await sendNotification(currentCompany, adminId, `${((_users$offeredTo = users[offeredTo]) === null || _users$offeredTo === void 0 ? void 0 : _users$offeredTo.name) || 'An employee'} accepted the offer to take the ${shift} shift on ${day}. Please approve the change.`, notificationLink);\n                      toast.success('Your request has been sent to the admin for approval.');\n                      setShiftOfferParams(null);\n                    }\n                  },\n                  children: \"Accept Shift\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1421,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setShiftOfferParams(null);\n                    toast.info('You declined the shift.');\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1475,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1420,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1414,\n              columnNumber: 49\n            }, this), (shiftOfferParams === null || shiftOfferParams === void 0 ? void 0 : shiftOfferParams.isAdminApproval) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Admin Approval Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1491,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Approve transfer of \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [shiftOfferParams.shift, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1493,\n                  columnNumber: 73\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [shiftOfferParams.day, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1493,\n                  columnNumber: 125\n                }, this), \"from \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [((_users$shiftOfferPara2 = users[shiftOfferParams.fromUser]) === null || _users$shiftOfferPara2 === void 0 ? void 0 : _users$shiftOfferPara2.name) || 'Unknown', \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1494,\n                  columnNumber: 58\n                }, this), \"to \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara3 = users[shiftOfferParams.offeredTo]) === null || _users$shiftOfferPara3 === void 0 ? void 0 : _users$shiftOfferPara3.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1495,\n                  columnNumber: 56\n                }, this), \"?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1492,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$fromUse7, _availability$fromUse8, _availability$fromUse9, _users$fromUser2, _users$offeredTo2, _loggedInUser$user4, _loggedInUser$user5;\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const weekKey = calculateWeekKey(weekOffset);\n                    const currentStatus = availability === null || availability === void 0 ? void 0 : (_availability$fromUse7 = availability[fromUser]) === null || _availability$fromUse7 === void 0 ? void 0 : (_availability$fromUse8 = _availability$fromUse7[shift]) === null || _availability$fromUse8 === void 0 ? void 0 : (_availability$fromUse9 = _availability$fromUse8[day]) === null || _availability$fromUse9 === void 0 ? void 0 : _availability$fromUse9.status;\n                    if (currentStatus !== 'selected') {\n                      toast.error('This shift has already been reassigned.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n                    await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n                    const updated = {\n                      ...availability\n                    };\n                    updated[fromUser][shift][day].status = 'default';\n                    if (!updated[offeredTo]) updated[offeredTo] = {};\n                    if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                    if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = {\n                      isAvailable: true\n                    };\n                    updated[offeredTo][shift][day].status = 'selected';\n                    setAvailability(updated);\n                    updateShiftCounts();\n                    const fromUserName = ((_users$fromUser2 = users[fromUser]) === null || _users$fromUser2 === void 0 ? void 0 : _users$fromUser2.name) || 'Unknown';\n                    const offeredToName = ((_users$offeredTo2 = users[offeredTo]) === null || _users$offeredTo2 === void 0 ? void 0 : _users$offeredTo2.name) || 'Unknown';\n                    const link = `/schedule?weekOffset=${weekOffset}`;\n                    if (fromUser !== (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user4 = loggedInUser.user) === null || _loggedInUser$user4 === void 0 ? void 0 : _loggedInUser$user4.id)) {\n                      await sendNotification(currentCompany, fromUser, `The admin approved your request to transfer the ${shift} shift on ${day} to ${offeredToName}.`, link);\n                    }\n                    if (offeredTo !== (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user5 = loggedInUser.user) === null || _loggedInUser$user5 === void 0 ? void 0 : _loggedInUser$user5.id)) {\n                      await sendNotification(currentCompany, offeredTo, `The admin approved your request to take the ${shift} shift on ${day} from ${fromUserName}.`, link);\n                    }\n                    toast.success('Shift transfer approved.');\n                    setShiftOfferParams(null);\n                  },\n                  children: \"Approve\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1498,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: async () => {\n                    var _users$fromUser3, _users$offeredTo3;\n                    setShiftOfferParams(null);\n                    toast.info('Shift transfer declined.');\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const fromUserName = ((_users$fromUser3 = users[fromUser]) === null || _users$fromUser3 === void 0 ? void 0 : _users$fromUser3.name) || 'Unknown';\n                    const offeredToName = ((_users$offeredTo3 = users[offeredTo]) === null || _users$offeredTo3 === void 0 ? void 0 : _users$offeredTo3.name) || 'an employee';\n                    const weekRange = calculateWeekRange(weekOffset);\n                    await sendNotification(currentCompany, fromUser, `Your shift offer to ${offeredToName} for the ${shift} shift on ${day} was declined by the admin.`, `/schedule?weekOffset=${weekOffset}`);\n                    await sendNotification(currentCompany, offeredTo, `Your request to take the ${shift} shift on ${day} from ${fromUserName} was declined by the admin.`, `/schedule?weekOffset=${weekOffset}`);\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1552,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1497,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1490,\n              columnNumber: 45\n            }, this), (shiftOfferParams === null || shiftOfferParams === void 0 ? void 0 : shiftOfferParams.isAdminSwapApproval) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Admin Approval Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1588,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Approve shift swap between\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara4 = users[shiftOfferParams.me]) === null || _users$shiftOfferPara4 === void 0 ? void 0 : _users$shiftOfferPara4.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1591,\n                  columnNumber: 53\n                }, this), \"(shift: \", shiftOfferParams.myShift, \" on \", shiftOfferParams.myDay, \") and\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara5 = users[shiftOfferParams.them]) === null || _users$shiftOfferPara5 === void 0 ? void 0 : _users$shiftOfferPara5.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1593,\n                  columnNumber: 53\n                }, this), \"(shift: \", shiftOfferParams.theirShift, \" on \", shiftOfferParams.theirDay, \")?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1589,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$me4, _availability$me4$myS, _availability$me4$myS2, _availability$them4, _availability$them4$t, _availability$them4$t2;\n                    const {\n                      me,\n                      them,\n                      myDay,\n                      myShift,\n                      theirDay,\n                      theirShift,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const weekKey = calculateWeekKey(weekOffset);\n                    const myStatus = availability === null || availability === void 0 ? void 0 : (_availability$me4 = availability[me]) === null || _availability$me4 === void 0 ? void 0 : (_availability$me4$myS = _availability$me4[myShift]) === null || _availability$me4$myS === void 0 ? void 0 : (_availability$me4$myS2 = _availability$me4$myS[myDay]) === null || _availability$me4$myS2 === void 0 ? void 0 : _availability$me4$myS2.status;\n                    const theirStatus = availability === null || availability === void 0 ? void 0 : (_availability$them4 = availability[them]) === null || _availability$them4 === void 0 ? void 0 : (_availability$them4$t = _availability$them4[theirShift]) === null || _availability$them4$t === void 0 ? void 0 : (_availability$them4$t2 = _availability$them4$t[theirDay]) === null || _availability$them4$t2 === void 0 ? void 0 : _availability$them4$t2.status;\n                    if (myStatus !== 'selected' || theirStatus !== 'selected') {\n                      toast.error('One of the shifts has already changed.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n                    await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n                    await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n                    const updated = {\n                      ...availability\n                    };\n                    updated[me][myShift][myDay].status = 'default';\n                    updated[them][theirShift][theirDay].status = 'default';\n                    updated[me][theirShift] ||= {};\n                    updated[me][theirShift][theirDay] ||= {\n                      isAvailable: true\n                    };\n                    updated[me][theirShift][theirDay].status = 'selected';\n                    updated[them][myShift] ||= {};\n                    updated[them][myShift][myDay] ||= {\n                      isAvailable: true\n                    };\n                    updated[them][myShift][myDay].status = 'selected';\n                    setAvailability(updated);\n                    updateShiftCounts();\n                    toast.success('Swap approved and shifts updated.');\n                    setShiftOfferParams(null);\n                    await sendNotification(currentCompany, me, `The admin approved your shift swap. You are now assigned to the ${theirShift} shift on ${theirDay}.`, `/schedule?weekOffset=${weekOffset}`);\n                    await sendNotification(currentCompany, them, `The admin approved your shift swap. You are now assigned to the ${myShift} shift on ${myDay}.`, `/schedule?weekOffset=${weekOffset}`);\n                  },\n                  children: \"Approve\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1597,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setShiftOfferParams(null);\n                    toast.info('Swap request declined.');\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1655,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1596,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1587,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1178,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-schedule-message\",\n            children: \"No published schedule is available for this week.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1671,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 891,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 851,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"YwJWEHVsBYx8tbIE2ju93EqAif8=\", false, function () {\n  return [useLocation];\n});\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Loader","BackgroundWrapper","Navbar","FaChevronLeft","FaChevronRight","FaCalendarCheck","FaEdit","updateAvailabilityStatus","getAllAvailabilities","getNecessaryEmployees","saveNecessaryEmployees","saveWeeklyShiftTargets","getWeeklyShiftTargets","fetchPublishStatus","savePublishStatus","saveEditStatus","fetchEditStatus","getUsers","sendNotification","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","handleOtherShiftsOfDayWhenDeselectAShift","toast","ToastContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","ScheduleScreen","_s","_users$secondSelected","_loggedInUser$user3","_availability$shiftOf","_availability$shiftOf2","_availability$shiftOf3","_users$shiftOfferPara","_users$shiftOfferPara2","_users$shiftOfferPara3","_users$shiftOfferPara4","_users$shiftOfferPara5","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","location","queryParams","URLSearchParams","search","initialWeekOffset","parseInt","get","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","highlightedUser","setHighlightedUser","selectedUserNotes","setSelectedUserNotes","shiftCounts","setShiftCounts","necessaryEmployees","setNecessaryEmployees","weeklyShiftTargets","setWeeklyShiftTargets","totalNecessaryEmployees","setTotalNecessaryEmployees","totalAssignedShifts","setTotalAssignedShifts","totalWeeklyTargets","setTotalWeeklyTargets","isPublished","setIsPublished","isAdmin","setIsAdmin","isEditAllowed","setIsEditAllowed","mostCriticalShifts","setMostCriticalShifts","isConfirmModalOpen","setIsConfirmModalOpen","isConfirmingPublish","setIsConfirmingPublish","isConfirmingEdit","setIsConfirmingEdit","isWarningVisible","setIsWarningVisible","isViewingAsEmployee","setIsViewingAsEmployee","selectedShiftToSwap","setSelectedShiftToSwap","offerToUserId","setOfferToUserId","shiftOfferParams","setShiftOfferParams","hasCheckedShiftOffer","setHasCheckedShiftOffer","loggedInUser","setLoggedInUser","secondSelectedShift","setSecondSelectedShift","window","scrollTo","top","userFromStorage","JSON","parse","localStorage","getItem","user","role","id","isScheduleFullyStaffed","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","companyId","company","weekKey","availabilityData","usersData","necessaryEmployeesData","weeklyTargetsData","Promise","all","calculateTotalNecessaryEmployees","updatedWeeklyTargets","Object","values","forEach","console","warn","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","handleWeeklyShiftTargetChange","userId","value","parsedValue","Math","min","updatedTargets","total","reduce","sum","target","cleanedTargets","fromEntries","entries","filter","key","handleWeekChange","direction","prevOffset","getStatusClass","status","shift","day","_necessaryEmployees$d","selectedEmployeesCount","userData","_userData$shift","availabilityInfo","maxNecessaryEmployees","currentShiftCount","maxShiftsAllowed","handleEmployeeClick","_availabilityData$use","userNotes","notes","keys","updateShiftCounts","counts","totalShifts","shifts","userShiftCount","dayShifts","saveNecessaryEmployeesToDB","handleStatusUpdate","currentStatus","_necessaryEmployees$d2","_userData$shift2","newStatus","updatedAvailability","otherShift","employeesWithAvailability","some","sort","userIdA","userIdB","_users$userIdA","_users$userIdA$name","_users$userIdB","_users$userIdB$name","nameA","name","toLowerCase","nameB","localeCompare","handleNecessaryEmployeesChange","updatedNecessaryEmployees","_userData$shift3","saveToDB","dayData","shiftCount","togglePublishStatus","alert","employeeList","u","startDate","weekRange","notificationLink","employeeId","fetchPublishStatusFromDB","_status$status","requiredCount","selectedCount","_userData$shift4","isPublishButtonDisabled","hasWeeklyNotes","userAvailability","trim","toggleEditStatus","fetchEditStatusFromDB","_status$isEditAllowed","calculateShiftCriticality","_necessaryEmployees$d3","necessary","selected","_userData$shift5","_userData$shift5$day","defaults","_userData$shift6","_userData$shift6$day","_userData$shift7","_userData$shift7$day","isAvailable","pow","findMostCriticalShifts","highestCriticality","Infinity","criticalShifts","_necessaryEmployees$d4","criticality","_userData$shift8","_userData$shift8$day","push","openConfirmModal","actionType","closeConfirmModal","getUserShiftTable","days","map","row","_availability$userId","_availability$userId$","shiftData","handleOfferShift","fromUser","recipients","_availability$id","_availability$id$Nigh","_availability$id$Nigh2","_availability$id2","_availability$id2$Mor","_availability$id2$Mor2","_availability$id3","_availability$id3$Noo","_availability$id3$Noo2","isAssignedThatDay","_shiftData$day","currentIndex","indexOf","prev","next","includes","Night","Morning","Noon","recipientId","_users$fromUser","link","success","_loggedInUser$user","offerShift","offerDay","offeredTo","_availability$fromUse","_availability$fromUse2","_availability$fromUse3","isStillOffered","info","approve","toUser","isAdminApproval","handleSwapProposal","_availability$me3","_availability$me3$Nig","_availability$me3$Nig2","_availability$them3","_availability$them3$N","_availability$them3$N2","_loggedInUser$user2","_Object$entries$find","_users$me","_users$them","myShift","myDay","me","theirShift","theirDay","them","daysOfWeek","myDayIndex","theirDayIndex","dayBeforeMyDay","dayBeforeTheirDay","dayAfterMyDay","dayAfterTheirDay","meAssignedOnTheirDay","_shiftData$theirDay","themAssignedOnMyDay","_shiftData$myDay","meMorningAfterTheirNight","s","_availability$me","_availability$me$s","_availability$me$s$da","themMorningAfterMyNight","_availability$them","_availability$them$s","_availability$them$s$","meNightAfterMorningBeforeTheirDay","_availability$me2","_availability$me2$s","_availability$me2$s$d","themNightAfterMorningBeforeMyDay","_availability$them2","_availability$them2$s","_availability$them2$s2","meMorningAfterNightBeforeTheirDay","themMorningAfterNightBeforeMyDay","updated","adminId","find","approveSwap","isAdminSwapApproval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","style","marginRight","index","_necessaryEmployees$d5","_necessaryEmployees$d6","_userData$shift9","isFullyStaffed","isMostCritical","criticalShift","type","onChange","e","_userData$shift10","_users$userIdA2","_users$userIdB2","_userData$shift11","_users$userId","statusClass","backgroundColor","color","pointerEvents","cursor","disabled","isTargetMet","hasNotes","textColor","max","stopPropagation","Evening","selectedEmployees","_userData$shift12","_users$userIdA3","_users$userIdA3$name","_users$userIdB3","_users$userIdB3$name","_users$userId2","isOwnShift","isSelected","isOfferedToMe","isSecondSelected","log","_user$companyIds","_availability$id4","_availability$id4$Nig","_availability$id4$Nig2","_availability$id5","_availability$id5$Mor","_availability$id5$Mor2","_availability$id6","_availability$id6$Noo","_availability$id6$Noo2","companyIds","_loggedInUser$company","_shiftData$selectedSh","previousDay","nextDay","a","b","_availability$fromUse4","_availability$fromUse5","_availability$fromUse6","_Object$entries$find2","_users$offeredTo","_availability$fromUse7","_availability$fromUse8","_availability$fromUse9","_users$fromUser2","_users$offeredTo2","_loggedInUser$user4","_loggedInUser$user5","fromUserName","offeredToName","_users$fromUser3","_users$offeredTo3","_availability$me4","_availability$me4$myS","_availability$me4$myS2","_availability$them4","_availability$them4$t","_availability$them4$t2","myStatus","theirStatus","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["// External libraries\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// Components\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport Navbar from '../components/Navbar';\n\n// Icons\nimport { FaChevronLeft, FaChevronRight, FaCalendarCheck, FaEdit } from 'react-icons/fa';\n\n// Services\nimport { updateAvailabilityStatus, getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets, fetchPublishStatus, savePublishStatus, saveEditStatus, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { sendNotification } from '../services/notificationService';\n\n// Utilities\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\n\n// Third-party Libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Styles\nimport '../styles/ScheduleScreen.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const initialWeekOffset = parseInt(queryParams.get('weekOffset'), 10) || 0;\n    const [weekOffset, setWeekOffset] = useState(initialWeekOffset);\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]);\n    const [highlightedUser, setHighlightedUser] = useState(null);\n    const [selectedUserNotes, setSelectedUserNotes] = useState('');\n    const [shiftCounts, setShiftCounts] = useState({});\n    const [necessaryEmployees, setNecessaryEmployees] = useState({});\n    const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n    const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n    const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n    const [totalWeeklyTargets, setTotalWeeklyTargets] = useState(0);\n    const [isPublished, setIsPublished] = useState(false);\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [isEditAllowed, setIsEditAllowed] = useState(false);\n    const [mostCriticalShifts, setMostCriticalShifts] = useState([]);\n    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n    const [isConfirmingPublish, setIsConfirmingPublish] = useState(false);\n    const [isConfirmingEdit, setIsConfirmingEdit] = useState(false);\n    const [isWarningVisible, setIsWarningVisible] = useState(false);\n    const [isViewingAsEmployee, setIsViewingAsEmployee] = useState(false);\n    const [selectedShiftToSwap, setSelectedShiftToSwap] = useState(null);\n    const [offerToUserId, setOfferToUserId] = useState('');\n    const [shiftOfferParams, setShiftOfferParams] = useState(null);\n    const [hasCheckedShiftOffer, setHasCheckedShiftOffer] = useState(false);\n    const [loggedInUser, setLoggedInUser] = useState(null);\n    const [secondSelectedShift, setSecondSelectedShift] = useState(null);\n\n    useEffect(() => {\n        window.scrollTo({ top: 0 });\n    }, []);\n\n    useEffect(() => {\n        const userFromStorage = JSON.parse(localStorage.getItem('user'));\n        setLoggedInUser(userFromStorage);\n        setIsAdmin(userFromStorage?.user.role === 'admin');\n        setHighlightedUser(userFromStorage?.user.id);\n    }, []);\n\n    useEffect(() => {\n        if (isPublished && !isScheduleFullyStaffed()) {\n            setIsWarningVisible(true);\n        } else {\n            setIsWarningVisible(false);\n        }\n    }, [availability, necessaryEmployees, isPublished]);\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers(),\n                    getNecessaryEmployees(companyId, weekKey),\n                    getWeeklyShiftTargets(companyId, weekKey),\n                ]);\n\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n                setNecessaryEmployees(necessaryEmployeesData || {});\n                calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n\n                const updatedWeeklyTargets = { ...weeklyTargetsData };\n                Object.values(usersData).forEach(user => {\n                    if (!user?.id) {\n                        console.warn(\"User without ID found:\", user);\n                        return;\n                    }\n\n                    if (!updatedWeeklyTargets[user.id]) {\n                        updatedWeeklyTargets[user.id] = 0;\n                    }\n                });\n\n                setWeeklyShiftTargets(updatedWeeklyTargets);\n\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB');\n                });\n                setWeekDates(dates);\n\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n    const handleWeeklyShiftTargetChange = async (userId, value) => {\n        const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n\n        if (parsedValue < shiftCounts[userId]) {\n            console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n            return;\n        }\n\n        const updatedTargets = { ...weeklyShiftTargets, [userId]: parsedValue };\n        setWeeklyShiftTargets(updatedTargets);\n\n        const total = Object.values(updatedTargets).reduce((sum, target) => sum + (target || 0), 0);\n        setTotalWeeklyTargets(total);\n\n        const cleanedTargets = Object.fromEntries(\n            Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees')\n        );\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n        } catch (error) {\n            console.error('Failed to save weekly shift targets:', error);\n        }\n    };\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status, userId, shift, day) => {\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled';\n        }\n\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled';\n        }\n\n        if (highlightedUser === userId) {\n            return status === 'disabled' ? 'status-disabled highlighted-user' : `highlighted-user ${status}`;\n        }\n\n        if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled';\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const handleEmployeeClick = async (userId) => {\n        if (highlightedUser === userId) {\n            setHighlightedUser(null);\n            setSelectedUserNotes('');\n            return;\n        }\n\n        setSelectedUserNotes('');\n\n        setHighlightedUser(userId);\n\n        if (currentCompany && userId) {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n\n                const userNotes = availabilityData?.[userId]?.notes || 'No notes available.';\n                setSelectedUserNotes(userNotes);\n            } catch (err) {\n                console.error('Failed to fetch notes:', err);\n                setSelectedUserNotes('Error fetching notes.');\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (Object.keys(availability).length > 0) {\n            updateShiftCounts();\n        }\n    }, [availability]);\n\n    const updateShiftCounts = () => {\n        const counts = {};\n        let totalShifts = 0;\n\n        Object.entries(availability).forEach(([userId, shifts]) => {\n            const userShiftCount = Object.values(shifts).reduce(\n                (sum, dayShifts) =>\n                    sum +\n                    Object.values(dayShifts).filter((shift) => shift.status === 'selected').length,\n                0\n            );\n            counts[userId] = userShiftCount;\n            totalShifts += userShiftCount;\n        });\n\n        setShiftCounts(counts);\n        setTotalAssignedShifts(totalShifts);\n    };\n\n    useEffect(() => {\n        const saveNecessaryEmployeesToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n\n                if (Object.keys(necessaryEmployees).length > 0) {\n                    await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n                }\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n\n        if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n            saveNecessaryEmployeesToDB();\n        }\n    }, [necessaryEmployees, currentCompany]);\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n            return;\n        }\n\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n            return;\n        }\n\n        if (currentStatus === 'disabled') return;\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            setAvailability(updatedAvailability);\n\n            updateShiftCounts();\n\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    const employeesWithAvailability = Object.entries(users)\n        .filter(([userId]) =>\n            availability[userId] && Object.values(availability[userId]).some((shifts) =>\n                Object.values(shifts).some((shift) => shift.status === 'selected' || shift.status === 'default')\n            )\n        )\n        .sort(([userIdA], [userIdB]) => {\n            const nameA = users[userIdA]?.name?.toLowerCase() || '';\n            const nameB = users[userIdB]?.name?.toLowerCase() || '';\n            return nameA.localeCompare(nameB);\n        });\n\n    const handleNecessaryEmployeesChange = (day, shift, value) => {\n        const updatedNecessaryEmployees = { ...necessaryEmployees };\n\n        if (!updatedNecessaryEmployees[day]) {\n            updatedNecessaryEmployees[day] = {};\n        }\n\n        const parsedValue = parseInt(value, 10) || 0;\n\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        if (parsedValue < selectedEmployeesCount) {\n            return;\n        }\n\n        updatedNecessaryEmployees[day][shift] = parsedValue;\n\n        setNecessaryEmployees(updatedNecessaryEmployees);\n        calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n\n        const saveToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n        saveToDB();\n    };\n\n    const calculateTotalNecessaryEmployees = (necessaryEmployeesData) => {\n        let total = 0;\n        Object.values(necessaryEmployeesData).forEach((dayData) => {\n            Object.values(dayData).forEach((shiftCount) => {\n                total += shiftCount || 0;\n            });\n        });\n        setTotalNecessaryEmployees(total);\n    };\n\n    useEffect(() => {\n        const total = Object.values(weeklyShiftTargets).reduce((sum, target) => sum + (target || 0), 0);\n        setTotalWeeklyTargets(total);\n    }, [weeklyShiftTargets]);\n\n    const togglePublishStatus = async () => {\n        if (!isPublished && !isScheduleFullyStaffed()) {\n            alert('Cannot publish schedule: not all shifts are fully staffed.');\n            return;\n        }\n\n        try {\n            const newStatus = !isPublished;\n            const weekKey = calculateWeekKey(weekOffset);\n\n            await savePublishStatus(currentCompany, weekKey, newStatus);\n\n            if (newStatus) {\n                const employeeList = Object.entries(users).filter(([_, u]) => u.role === 'employee');\n                const startDate = new Date();\n                startDate.setDate(startDate.getDate() + weekOffset * 7 - startDate.getDay());\n\n                const weekRange = calculateWeekRange(weekOffset);\n                const notificationLink = `/schedule?weekOffset=${weekOffset}`;\n\n                for (const [employeeId] of employeeList) {\n                    await sendNotification(\n                        currentCompany,\n                        employeeId,\n                        `Weekly schedule for ${weekRange} has been published.`,\n                        notificationLink\n                    );\n                }\n            }\n\n            setIsPublished(newStatus);\n        } catch (error) {\n            console.error('Failed to toggle publish status:', error);\n        }\n    };\n\n    useEffect(() => {\n        const fetchPublishStatusFromDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const status = await fetchPublishStatus(currentCompany, weekKey);\n\n                setIsPublished(status?.status ?? false);\n            } catch (error) {\n                console.error('Failed to fetch publish status:', error);\n            }\n        };\n\n        if (currentCompany) {\n            fetchPublishStatusFromDB();\n        }\n    }, [currentCompany, weekOffset]);\n\n    const isScheduleFullyStaffed = () => {\n        for (const day of Object.keys(necessaryEmployees || {})) {\n            for (const shift of Object.keys(necessaryEmployees[day] || {})) {\n                const requiredCount = necessaryEmployees[day][shift] || 0;\n                const selectedCount = Object.entries(availability).filter(([_, userData]) => {\n                    const availabilityInfo = userData?.[shift]?.[day];\n                    return availabilityInfo?.status === 'selected';\n                }).length;\n\n                if (selectedCount !== requiredCount) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n\n    const isPublishButtonDisabled = !isScheduleFullyStaffed() && !isPublished;\n\n    const hasWeeklyNotes = (userId) => {\n        const userAvailability = availability[userId];\n        return userAvailability && userAvailability.notes && userAvailability.notes.trim() !== '';\n    };\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        setIsAdmin(loggedUser?.user.role === 'admin');\n        setHighlightedUser(loggedUser?.user.id);\n    }, []);\n\n    const toggleEditStatus = async () => {\n        try {\n            const newStatus = !isEditAllowed;\n            const weekKey = calculateWeekKey(weekOffset);\n\n            await saveEditStatus(currentCompany, weekKey, newStatus);\n\n            setIsEditAllowed(newStatus);\n        } catch (error) {\n            console.error('Failed to toggle edit status:', error);\n        }\n    };\n\n    useEffect(() => {\n        const fetchEditStatusFromDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const status = await fetchEditStatus(currentCompany, weekKey);\n\n                setIsEditAllowed(status?.isEditAllowed ?? false);\n            } catch (error) {\n                console.error('Failed to fetch edit status:', error);\n            }\n        };\n\n        if (currentCompany) {\n            fetchEditStatusFromDB();\n        }\n    }, [currentCompany, weekOffset]);\n\n    const calculateShiftCriticality = (day, shift) => {\n        const necessary = necessaryEmployees?.[day]?.[shift] || 0;\n        const selected = Object.values(availability).filter(userData =>\n            userData?.[shift]?.[day]?.status === 'selected'\n        ).length;\n\n        const defaults = Object.entries(availability)\n            .filter(([_, userData]) => {\n                const status = userData?.[shift]?.[day]?.status;\n                return userData?.[shift]?.[day]?.isAvailable && status !== 'selected' && status !== 'disabled';\n            })\n            .length;\n\n        if (necessary === selected) return 0;\n\n        return (necessary - selected) / Math.pow((defaults + 1), 2);\n    };\n\n    const findMostCriticalShifts = () => {\n        let highestCriticality = -Infinity;\n        let criticalShifts = [];\n\n        Object.keys(necessaryEmployees || {}).forEach(day => {\n            Object.keys(necessaryEmployees[day] || {}).forEach(shift => {\n                const criticality = calculateShiftCriticality(day, shift);\n                const necessary = necessaryEmployees?.[day]?.[shift] || 0;\n                const selected = Object.values(availability).filter(userData =>\n                    userData?.[shift]?.[day]?.status === 'selected'\n                ).length;\n\n                if (necessary === selected) return;\n\n                if (criticality > highestCriticality) {\n                    highestCriticality = criticality;\n                    criticalShifts = [{ day, shift }];\n                } else if (criticality === highestCriticality && criticality > 0) {\n                    criticalShifts.push({ day, shift });\n                }\n            });\n        });\n\n        return criticalShifts;\n    };\n\n    useEffect(() => {\n        setMostCriticalShifts(findMostCriticalShifts());\n    }, [necessaryEmployees, availability]);\n\n    const openConfirmModal = (actionType) => {\n        if (actionType === 'publish') {\n            setIsConfirmingPublish(true);\n            setIsConfirmingEdit(false);\n        } else if (actionType === 'edit') {\n            setIsConfirmingEdit(true);\n            setIsConfirmingPublish(false);\n        }\n        setIsConfirmModalOpen(true);\n    };\n\n    const closeConfirmModal = () => {\n        setIsConfirmModalOpen(false);\n    };\n\n    const getUserShiftTable = (userId) => {\n        if (!availability[userId]) return [];\n\n        const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        return shifts.map((shift) => {\n            const row = { shift: shift[0] + (shift === 'Night' ? 't' : '') };\n            days.forEach((day) => {\n                const shiftData = availability[userId]?.[shift]?.[day];\n                if (shiftData?.status === 'selected') {\n                    row[day] = '✅';\n                } else if (shiftData?.isAvailable) {\n                    row[day] = '🟠';\n                } else {\n                    row[day] = '';\n                }\n            });\n            return row;\n        });\n    };\n\n    const handleOfferShift = async () => {\n        const weekKey = calculateWeekKey(weekOffset);\n        const shift = selectedShiftToSwap.shift;\n        const day = selectedShiftToSwap.day;\n        const fromUser = selectedShiftToSwap.userId;\n\n        const weekRange = calculateWeekRange(weekOffset);\n\n        let recipients = [];\n\n        if (offerToUserId) {\n            recipients.push(offerToUserId);\n        } else {\n            recipients = Object.entries(users)\n                .filter(([id, user]) => {\n                    if (id === fromUser) return false;\n\n                    const currentShiftCount = shiftCounts[id] || 0;\n                    if (currentShiftCount >= 6) return false;\n\n                    const isAssignedThatDay = Object.values(availability?.[id] || {}).some(\n                        shiftData => shiftData?.[day]?.status === 'selected'\n                    );\n                    if (isAssignedThatDay) return false;\n\n                    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                    const currentIndex = days.indexOf(day);\n                    const prev = days[currentIndex - 1];\n                    const next = days[currentIndex + 1];\n\n                    if (\n                        ['Morning', 'Noon'].includes(shift) &&\n                        prev &&\n                        availability?.[id]?.Night?.[prev]?.status === 'selected'\n                    ) return false;\n\n                    if (\n                        shift === 'Night' &&\n                        next &&\n                        (\n                            availability?.[id]?.Morning?.[next]?.status === 'selected' ||\n                            availability?.[id]?.Noon?.[next]?.status === 'selected'\n                        )\n                    ) return false;\n\n                    return true;\n                })\n                .map(([id]) => id);\n\n        }\n\n        for (const recipientId of recipients) {\n            const link = `/schedule?weekOffset=${weekOffset}&offerShift=true&offerDay=${day}&shift=${shift}&fromUser=${fromUser}&offeredTo=${recipientId}`;\n\n            await sendNotification(\n                currentCompany,\n                recipientId,\n                `You are offered to take ${shift} shift on ${day} (Week: ${weekRange}) from ${users[fromUser]?.name || 'a colleague'}.`,\n                link\n            );\n        }\n\n        toast.success('Shift offer sent successfully!');\n        setSelectedShiftToSwap(null);\n        setOfferToUserId('');\n    };\n\n    useEffect(() => {\n        if (hasCheckedShiftOffer || isLoading || !loggedInUser) return;\n\n        const offerShift = queryParams.get('offerShift');\n        const offerDay = queryParams.get('offerDay');\n        const offeredTo = queryParams.get('offeredTo');\n        const fromUser = queryParams.get('fromUser');\n        const shift = queryParams.get('shift');\n\n        if (\n            offerShift === 'true' &&\n            offerDay &&\n            shift &&\n            fromUser &&\n            loggedInUser?.user?.id === offeredTo\n        ) {\n            const isStillOffered = availability?.[fromUser]?.[shift]?.[offerDay]?.status === 'selected';\n\n            if (!isStillOffered) {\n                toast.info('This shift offer is no longer available.');\n            } else {\n                setShiftOfferParams({\n                    day: offerDay,\n                    shift,\n                    fromUser,\n                    offeredTo,\n                    weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n                });\n            }\n\n            setHasCheckedShiftOffer(true);\n        }\n    }, [location.search, availability, isLoading, loggedInUser]);\n\n    useEffect(() => {\n        const approve = queryParams.get('approveShiftTransfer');\n        const day = queryParams.get('day');\n        const shift = queryParams.get('shift');\n        const fromUser = queryParams.get('fromUser');\n        const toUser = queryParams.get('toUser');\n\n        if (\n            approve === 'true' &&\n            day && shift && fromUser && toUser &&\n            isAdmin\n        ) {\n            setShiftOfferParams({\n                day,\n                shift,\n                fromUser,\n                offeredTo: toUser,\n                weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n                isAdminApproval: true\n            });\n        }\n    }, [location.search, isAdmin]);\n\n    const handleSwapProposal = async () => {\n        const { shift: myShift, day: myDay, userId: me } = selectedShiftToSwap;\n        const { shift: theirShift, day: theirDay, userId: them } = secondSelectedShift;\n\n        const weekKey = calculateWeekKey(weekOffset);\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const myDayIndex = daysOfWeek.indexOf(myDay);\n        const theirDayIndex = daysOfWeek.indexOf(theirDay);\n        const dayBeforeMyDay = daysOfWeek[myDayIndex - 1];\n        const dayBeforeTheirDay = daysOfWeek[theirDayIndex - 1];\n        const dayAfterMyDay = daysOfWeek[myDayIndex + 1];\n        const dayAfterTheirDay = daysOfWeek[theirDayIndex + 1];\n\n        const meAssignedOnTheirDay = Object.entries(availability[me] || {}).some(\n            ([_, shiftData]) => shiftData?.[theirDay]?.status === 'selected'\n        );\n        const themAssignedOnMyDay = Object.entries(availability[them] || {}).some(\n            ([_, shiftData]) => shiftData?.[myDay]?.status === 'selected'\n        );\n\n        const meMorningAfterTheirNight = theirShift === 'Night' &&\n            dayAfterTheirDay &&\n            ['Morning', 'Noon'].some(s => availability?.[me]?.[s]?.[dayAfterTheirDay]?.status === 'selected');\n\n        const themMorningAfterMyNight = myShift === 'Night' &&\n            dayAfterMyDay &&\n            ['Morning', 'Noon'].some(s => availability?.[them]?.[s]?.[dayAfterMyDay]?.status === 'selected');\n\n        const meNightAfterMorningBeforeTheirDay = theirShift === 'Night' &&\n            dayBeforeTheirDay &&\n            ['Morning', 'Noon'].some(s => availability?.[me]?.[s]?.[dayBeforeTheirDay]?.status === 'selected');\n\n        const themNightAfterMorningBeforeMyDay = myShift === 'Night' &&\n            dayBeforeMyDay &&\n            ['Morning', 'Noon'].some(s => availability?.[them]?.[s]?.[dayBeforeMyDay]?.status === 'selected');\n\n        const meMorningAfterNightBeforeTheirDay = ['Morning', 'Noon'].includes(theirShift) &&\n            dayBeforeTheirDay &&\n            availability?.[me]?.Night?.[dayBeforeTheirDay]?.status === 'selected';\n\n        const themMorningAfterNightBeforeMyDay = ['Morning', 'Noon'].includes(myShift) &&\n            dayBeforeMyDay &&\n            availability?.[them]?.Night?.[dayBeforeMyDay]?.status === 'selected';\n\n        if (\n            meAssignedOnTheirDay ||\n            themAssignedOnMyDay ||\n            meMorningAfterTheirNight ||\n            themMorningAfterMyNight ||\n            meNightAfterMorningBeforeTheirDay ||\n            themNightAfterMorningBeforeMyDay ||\n            meMorningAfterNightBeforeTheirDay ||\n            themMorningAfterNightBeforeMyDay\n        ) {\n            toast.error(\"Swap not allowed: Conflict with shift-before/after rules or existing assignments.\");\n            return;\n        }\n\n        if (loggedInUser?.user?.role === 'admin') {\n            await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n            await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n            await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n            await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n\n            const updated = { ...availability };\n            updated[me][myShift][myDay].status = 'default';\n            updated[them][theirShift][theirDay].status = 'default';\n\n            updated[me][theirShift] ||= {};\n            updated[me][theirShift][theirDay] ||= { isAvailable: true };\n            updated[me][theirShift][theirDay].status = 'selected';\n\n            updated[them][myShift] ||= {};\n            updated[them][myShift][myDay] ||= { isAvailable: true };\n            updated[them][myShift][myDay].status = 'selected';\n\n            setAvailability(updated);\n            updateShiftCounts();\n\n            setSelectedShiftToSwap(null);\n            setSecondSelectedShift(null);\n            toast.success(\"Swap completed successfully.\");\n            return;\n        }\n\n        const adminId = Object.entries(users).find(([, u]) => u.role === 'admin')?.[0];\n        if (!adminId) {\n            toast.error('Admin not found.');\n            return;\n        }\n\n        const notificationLink = `/schedule?weekOffset=${weekOffset}&approveSwap=true&me=${me}&them=${them}&myDay=${myDay}&myShift=${myShift}&theirDay=${theirDay}&theirShift=${theirShift}`;\n\n        await sendNotification(\n            currentCompany,\n            adminId,\n            `${users[me]?.name || 'An employee'} requested to swap their ${myShift} shift on ${myDay} with ${users[them]?.name || 'another employee'}'s ${theirShift} shift on ${theirDay}.`,\n            notificationLink\n        );\n\n        toast.success('Your swap request has been sent to the admin.');\n        setSelectedShiftToSwap(null);\n        setSecondSelectedShift(null);\n    };\n\n    useEffect(() => {\n        const approveSwap = queryParams.get('approveSwap');\n        const me = queryParams.get('me');\n        const them = queryParams.get('them');\n        const myDay = queryParams.get('myDay');\n        const myShift = queryParams.get('myShift');\n        const theirDay = queryParams.get('theirDay');\n        const theirShift = queryParams.get('theirShift');\n\n        if (\n            approveSwap === 'true' &&\n            me && them && myDay && myShift && theirDay && theirShift &&\n            isAdmin\n        ) {\n            setShiftOfferParams({\n                isAdminSwapApproval: true,\n                me, them, myDay, myShift, theirDay, theirShift,\n                weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n            });\n        }\n    }, [location.search, isAdmin]);\n\n    return (\n        <BackgroundWrapper >\n            <div>\n                <Navbar />\n                <ToastContainer />\n\n                {isConfirmModalOpen && (\n                    <div className=\"modal-overlay\">\n                        <div className=\"modal-content\">\n                            <h2>\n                                {isConfirmingPublish\n                                    ? isPublished ? 'Confirm Schedule Unpublishing' : 'Confirm Schedule Publication'\n                                    : isConfirmingEdit\n                                        ? isEditAllowed ? 'Confirm Disabling Editing' : 'Confirm Enabling Editing'\n                                        : ''}\n                            </h2>\n                            <p>\n                                {isConfirmingPublish\n                                    ? isPublished ? 'Are you sure you want to unpublish this schedule?' : 'Are you sure you want to publish this schedule?'\n                                    : isConfirmingEdit\n                                        ? isEditAllowed ? 'Are you sure you want to disable weekly availability submissions?' : 'Are you sure you want to enable weekly availability submissions?'\n                                        : ''}\n                            </p>\n                            <div className=\"modal-buttons\">\n                                <button className=\"confirm-button\" onClick={() => {\n                                    if (isConfirmingPublish) {\n                                        togglePublishStatus();\n                                    } else if (isConfirmingEdit) {\n                                        toggleEditStatus();\n                                    }\n                                    closeConfirmModal();\n                                }}>\n                                    Confirm\n                                </button>\n                                <button className=\"cancel-button\" onClick={closeConfirmModal}>Cancel</button>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                <div className=\"navbar-placeholder\"></div>\n                <div className=\"schedule-container\">\n                    <h1>Weekly Schedule</h1>\n                    {isAdmin && (\n                        <div className=\"view-toggle-container\">\n                            <button\n                                className=\"view-toggle-button\"\n                                onClick={() => setIsViewingAsEmployee(prev => !prev)}\n                            >\n                                {isViewingAsEmployee ? <FaEdit style={{ marginRight: '6px' }} /> : <FaCalendarCheck style={{ marginRight: '6px' }} />}\n                                {isViewingAsEmployee ? 'Back to Draft View' : 'View Final Schedule'}\n                            </button>\n                        </div>\n                    )}\n\n                    {isLoading ? (\n                        <Loader />\n\n                    ) : error ? (\n                        <p className=\"error\">{error}</p>\n                    ) : (\n                        <>\n                            {!isAdmin && (\n                                <div className=\"week-navigation centered-navigation\">\n                                    <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                        Previous Week\n                                    </button>\n                                    <h2 className=\"week-range\">{calculateWeekRange(weekOffset)}</h2>\n                                    <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                        Next Week\n                                    </button>\n                                </div>\n                            )}\n\n                            {(isAdmin && !isViewingAsEmployee) ? (\n                                <div className=\"schedule-content\">\n                                    <table className=\"schedule-table\">\n                                        <thead>\n                                            <tr>\n                                                <th>Shift</th>\n                                                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                                    (day, index) => (\n                                                        <th key={day}>\n                                                            {day} <br />\n                                                            <span className=\"date\">{weekDates[index]}</span>\n                                                        </th>\n                                                    )\n                                                )}\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                                <tr key={shift}>\n                                                    <td>{shift}</td>\n                                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                        const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                                                            const availabilityInfo = userData?.[shift]?.[day];\n                                                            return availabilityInfo?.status === 'selected';\n                                                        }).length;\n\n                                                        const isFullyStaffed = selectedEmployeesCount === (necessaryEmployees?.[day]?.[shift] || 0);\n                                                        const criticality = calculateShiftCriticality(day, shift);\n                                                        const isMostCritical = mostCriticalShifts.some(criticalShift =>\n                                                            criticalShift.day === day && criticalShift.shift === shift\n                                                        );\n\n                                                        return (\n                                                            <td\n                                                                key={day}\n                                                                className={`schedule-cell \n                                                                ${isFullyStaffed ? 'fully-staffed' : ''} \n                                                                ${isMostCritical ? 'most-critical' : ''}\n                                                            `}\n                                                            >\n\n                                                                <input\n                                                                    type=\"number\"\n                                                                    min=\"0\"\n                                                                    className=\"necessary-employees-input\"\n                                                                    value={necessaryEmployees?.[day]?.[shift] || 0}\n                                                                    onChange={(e) => handleNecessaryEmployeesChange(day, shift, e.target.value)}\n                                                                />\n\n                                                                <div className=\"selected-employees-indicator\">\n                                                                    {selectedEmployeesCount} Selected\n                                                                </div>\n\n                                                                {Object.entries(availability)\n                                                                    .filter(([userId, userData]) => {\n                                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                                        return availabilityInfo?.isAvailable;\n                                                                    })\n                                                                    .sort(([userIdA], [userIdB]) => {\n                                                                        const nameA = users[userIdA]?.name || '';\n                                                                        const nameB = users[userIdB]?.name || '';\n                                                                        return nameA.localeCompare(nameB);\n                                                                    })\n                                                                    .map(([userId, userData]) => {\n                                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                                        const statusClass = getStatusClass(availabilityInfo.status, userId);\n\n                                                                        return (\n                                                                            <div\n                                                                                key={userId}\n                                                                                className={`availability-entry ${statusClass}`}\n                                                                                onClick={() =>\n                                                                                    handleStatusUpdate(\n                                                                                        userId,\n                                                                                        shift,\n                                                                                        day,\n                                                                                        availabilityInfo.status\n                                                                                    )\n                                                                                }\n                                                                                style={{\n                                                                                    backgroundColor:\n                                                                                        availabilityInfo.status === 'selected'\n                                                                                            ? '#2ecc71'\n                                                                                            : availabilityInfo.status === 'disabled'\n                                                                                                ? '#e74c3c'\n                                                                                                : '#ffff',\n                                                                                    color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                                    pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                                    cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                                }}\n                                                                            >\n                                                                                {users[userId]?.name || 'Unknown'}\n                                                                            </div>\n                                                                        );\n                                                                    })}\n                                                            </td>\n                                                        );\n                                                    })}\n                                                </tr>\n                                            ))}\n\n                                        </tbody>\n                                    </table>\n\n                                    <div className=\"employees-list\">\n                                        <h3>Employees</h3>\n\n                                        <div className=\"week-navigation\">\n                                            <button className=\"week-nav-button\" onClick={() => handleWeekChange(-1)}>\n                                                <FaChevronLeft />\n                                            </button>\n                                            <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                                            <button className=\"week-nav-button\" onClick={() => handleWeekChange(1)}>\n                                                <FaChevronRight />\n                                            </button>\n                                        </div>\n\n                                        <div className=\"buttons-container\">\n                                            {isWarningVisible && (\n                                                <div className=\"warning-banner\">\n                                                    ⚠️ Warning: One or more shifts are no longer fully staffed. Please review the schedule.\n                                                </div>\n                                            )}\n\n                                            <button\n                                                className={`general-button ${isPublished ? 'green' : 'red'}`}\n                                                onClick={() => openConfirmModal('publish')}\n                                                disabled={isPublishButtonDisabled}\n                                            >\n                                                {isPublished ? 'Unpublish Schedule' : 'Publish Schedule'}\n                                                {isWarningVisible && <span className=\"publish-warning-icon\">🔴</span>}\n                                            </button>\n\n                                            <button\n                                                className={`general-button ${isEditAllowed ? 'green' : 'red'}`}\n                                                onClick={() => openConfirmModal('edit')}\n                                            >\n                                                {isEditAllowed ? 'Disable Editing' : 'Enable Editing'}\n                                            </button>\n\n                                        </div>\n\n                                        <div className=\"total-info-container\">\n                                            <h3>Weekly Overview</h3>\n                                            <hr />\n                                            <p>Weekly Staff: <span>{totalNecessaryEmployees}</span></p>\n                                            <hr />\n                                            <p>Weekly Shift Targets: <span>{totalWeeklyTargets}</span></p>\n                                            <hr />\n                                            <p>Assigned Shifts: <span>{totalAssignedShifts}</span></p>\n                                            <hr />\n                                        </div>\n\n                                        <ul>\n                                            {employeesWithAvailability.map(([userId, user]) => {\n                                                const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId];\n                                                const hasNotes = hasWeeklyNotes(userId);\n                                                const backgroundColor = hasNotes ? 'yellow' : '#2980b9';\n                                                const textColor = hasNotes ? 'black' : 'white';\n\n                                                return (\n                                                    <li\n                                                        key={userId}\n                                                        onClick={() => handleEmployeeClick(userId)}\n                                                        className={`${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`}\n                                                        style={{\n                                                            backgroundColor: isTargetMet ? '#d4edda' : 'inherit',\n                                                        }}\n                                                    >\n                                                        <div className=\"employee-details\">\n\n                                                            <span\n                                                                className=\"notes-indicator\"\n                                                                style={{\n                                                                    backgroundColor: backgroundColor,\n                                                                    color: textColor,\n                                                                }}\n                                                            >\n                                                                <span className=\"indicator-text\">i</span>\n                                                            </span>\n\n                                                            <span className=\"employee-name\">\n                                                                {user.name}\n                                                            </span>\n\n                                                            <div className=\"weekly-shift-target\">\n                                                                <label>\n                                                                    {shiftCounts[userId] || 0} shifts out of:\n                                                                    <input\n                                                                        type=\"number\"\n                                                                        min=\"0\"\n                                                                        max=\"6\"\n                                                                        value={weeklyShiftTargets[userId] || 0}\n                                                                        onClick={(e) => e.stopPropagation()}\n                                                                        onChange={(e) => handleWeeklyShiftTargetChange(userId, e.target.value)}\n                                                                        className=\"weekly-shift-input\"\n                                                                    />\n                                                                </label>\n                                                            </div>\n\n                                                            {highlightedUser === userId && (\n                                                                <>\n                                                                    {selectedUserNotes && selectedUserNotes !== 'No notes available.' && (\n                                                                        <div className=\"employee-notes\">\n                                                                            <h4>Notes:</h4>\n                                                                            <p>{selectedUserNotes}</p>\n                                                                        </div>\n                                                                    )}\n\n                                                                    <div className=\"employee-table\">\n                                                                        <div className=\"mini-schedule-legend compact\">\n                                                                            <span className=\"legend-symbol\">✅</span> Assigned &nbsp;&nbsp;\n                                                                            <span className=\"legend-symbol\">🟠</span> Submitted\n                                                                        </div>\n\n                                                                        <table className=\"mini-schedule-table\">\n                                                                            <thead>\n                                                                                <tr>\n                                                                                    <th>Shift</th>\n                                                                                    {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                                                                                        <th key={day}>{day}</th>\n                                                                                    ))}\n                                                                                </tr>\n                                                                            </thead>\n                                                                            <tbody>\n                                                                                {getUserShiftTable(userId).map((row) => (\n                                                                                    <tr key={row.shift}>\n                                                                                        <td>\n                                                                                            {{\n                                                                                                Morning: 'M',\n                                                                                                Noon: 'N',\n                                                                                                Evening: 'E',\n                                                                                                Night: 'Nt'\n                                                                                            }[row.shift] || row.shift}\n                                                                                        </td>\n                                                                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => (\n                                                                                            <td key={day}>{row[day]}</td>\n                                                                                        ))}\n                                                                                    </tr>\n                                                                                ))}\n                                                                            </tbody>\n                                                                        </table>\n                                                                    </div>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </li>\n                                                );\n                                            })}\n                                        </ul>\n                                    </div>\n                                </div>\n                            ) : (\n                                isPublished ? (\n                                    <div>\n                                        <div className=\"schedule-content\">\n                                            <table className=\"schedule-table\">\n                                                <thead>\n                                                    <tr>\n                                                        <th>Shift</th>\n                                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                                            (day, index) => (\n                                                                <th key={day}>\n                                                                    {day} <br />\n                                                                    <span className=\"date\">{weekDates[index]}</span>\n                                                                </th>\n                                                            )\n                                                        )}\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                                        <tr key={shift}>\n                                                            <td>{shift}</td>\n                                                            {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                                const selectedEmployees = Object.entries(availability).filter(([userId, userData]) => {\n                                                                    const availabilityInfo = userData?.[shift]?.[day];\n                                                                    return availabilityInfo?.status === 'selected';\n                                                                });\n\n                                                                return (\n                                                                    <td key={day} className=\"schedule-cell\">\n\n                                                                        {selectedEmployees\n                                                                            .sort(([userIdA], [userIdB]) => {\n                                                                                const nameA = users[userIdA]?.name?.toLowerCase() || '';\n                                                                                const nameB = users[userIdB]?.name?.toLowerCase() || '';\n                                                                                return nameA.localeCompare(nameB);\n                                                                            })\n                                                                            .map(([userId]) => {\n                                                                                const isOwnShift = userId === highlightedUser;\n                                                                                const isSelected = selectedShiftToSwap &&\n                                                                                    selectedShiftToSwap.userId === userId &&\n                                                                                    selectedShiftToSwap.day === day &&\n                                                                                    selectedShiftToSwap.shift === shift;\n\n                                                                                const isOfferedToMe = shiftOfferParams &&\n                                                                                    userId === shiftOfferParams.fromUser &&\n                                                                                    shift === shiftOfferParams.shift &&\n                                                                                    day === shiftOfferParams.day;\n\n                                                                                const isSecondSelected = secondSelectedShift &&\n                                                                                    secondSelectedShift.userId === userId &&\n                                                                                    secondSelectedShift.day === day &&\n                                                                                    secondSelectedShift.shift === shift;\n\n                                                                                console.log('[DEBUG] checking cell', {\n                                                                                    userId,\n                                                                                    shift,\n                                                                                    day,\n                                                                                    highlightedUser,\n                                                                                    isOwnShift,\n                                                                                    isSelected,\n                                                                                    isOfferedToMe,\n                                                                                    shiftOfferParams,\n                                                                                });\n\n                                                                                return (\n                                                                                    <div\n                                                                                        key={userId}\n                                                                                        className={`employee-button \n                                                                                        ${isOwnShift ? 'highlighted-own-shift' : ''} \n                                                                                        ${isSelected ? 'highlighted-swap-source' : ''} \n                                                                                        ${isSecondSelected ? 'highlighted-swap-target' : ''} \n                                                                                        ${isOfferedToMe ? 'offered-to-me' : ''} \n                                                                                        ${shiftOfferParams?.isAdminSwapApproval &&\n                                                                                                (\n                                                                                                    (userId === shiftOfferParams.me &&\n                                                                                                        shift === shiftOfferParams.myShift &&\n                                                                                                        day === shiftOfferParams.myDay) ||\n                                                                                                    (userId === shiftOfferParams.them &&\n                                                                                                        shift === shiftOfferParams.theirShift &&\n                                                                                                        day === shiftOfferParams.theirDay)\n                                                                                                )\n                                                                                                ? 'highlighted-swap'\n                                                                                                : ''\n                                                                                            }\n                                                                                    `}\n\n                                                                                        onClick={() => {\n                                                                                            if (isOwnShift) {\n                                                                                                if (\n                                                                                                    selectedShiftToSwap &&\n                                                                                                    selectedShiftToSwap.userId === userId &&\n                                                                                                    selectedShiftToSwap.shift === shift &&\n                                                                                                    selectedShiftToSwap.day === day\n                                                                                                ) {\n                                                                                                    setSelectedShiftToSwap(null);\n                                                                                                    setSecondSelectedShift(null);\n                                                                                                } else {\n                                                                                                    setSelectedShiftToSwap({ userId, shift, day });\n                                                                                                    setSecondSelectedShift(null);\n                                                                                                }\n                                                                                            } else if (selectedShiftToSwap && !secondSelectedShift) {\n                                                                                                setSecondSelectedShift({ userId, shift, day });\n                                                                                            } else {\n                                                                                                setSelectedShiftToSwap(null);\n                                                                                                setSecondSelectedShift(null);\n                                                                                            }\n                                                                                        }}\n                                                                                    >\n                                                                                        {users[userId]?.name || 'Unknown'}\n                                                                                    </div>\n                                                                                );\n                                                                            })\n                                                                        }\n                                                                    </td>\n                                                                );\n                                                            })}\n                                                        </tr>\n                                                    ))}\n                                                </tbody>\n                                            </table>\n\n                                            {isAdmin && (\n                                                <div className=\"employees-list\">\n                                                    <h3>Employees</h3>\n                                                    <ul>\n                                                        {employeesWithAvailability.map(([userId, user]) => {\n                                                            return (\n                                                                <li\n                                                                    key={userId}\n                                                                    onClick={() => handleEmployeeClick(userId)}\n                                                                    className={`${highlightedUser === userId ? 'selected' : ''}`}\n                                                                >\n                                                                    <div className=\"employee-details\">\n                                                                        <span className=\"employee-name\">{user.name}</span>\n                                                                    </div>\n                                                                </li>\n                                                            );\n                                                        })}\n                                                    </ul>\n                                                </div>\n                                            )}\n\n                                        </div>\n                                        {selectedShiftToSwap && (\n                                            secondSelectedShift ? (\n                                                <div className=\"swap-request-container\">\n                                                    <h3>Swap Shifts With Another Employee</h3>\n                                                    <p>\n                                                        You are proposing to swap your <strong>{selectedShiftToSwap.shift}</strong> shift on <strong>{selectedShiftToSwap.day}</strong>\n                                                        with <strong>{users[secondSelectedShift.userId]?.name}</strong>'s\n                                                        <strong> {secondSelectedShift.shift}</strong> shift on <strong>{secondSelectedShift.day}</strong>.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            onClick={handleSwapProposal}\n                                                        >\n                                                            Propose Swap\n                                                        </button>\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            style={{ backgroundColor: '#e74c3c' }}\n                                                            onClick={() => {\n                                                                setSelectedShiftToSwap(null);\n                                                                setSecondSelectedShift(null);\n                                                            }}\n                                                        >\n                                                            Cancel\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            ) : (\n                                                <div className=\"swap-request-container\">\n                                                    <h3>Offer Shift to Another Employee</h3>\n                                                    <p>\n                                                        You are offering your <strong>{selectedShiftToSwap.shift}</strong> shift on <strong>{selectedShiftToSwap.day}</strong> to another employee.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <label>\n                                                            Choose employee to offer the shift to:\n                                                            <select value={offerToUserId} onChange={(e) => setOfferToUserId(e.target.value)}>\n                                                                <option value=\"\">No one specific</option>\n                                                                {Object.entries(users)\n                                                                    .filter(([id, user]) => {\n                                                                        if (id === selectedShiftToSwap.userId) return false;\n\n                                                                        if (!user.companyIds?.some((company) => company.companyId === loggedInUser?.company?.id)) return false;\n\n                                                                        if ((shiftCounts[id] || 0) >= 6) return false;\n\n                                                                        const isAssignedThatDay = Object.values(availability?.[id] || {}).some(\n                                                                            shiftData => shiftData?.[selectedShiftToSwap.day]?.status === 'selected'\n                                                                        );\n                                                                        if (isAssignedThatDay) return false;\n\n                                                                        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                                                                        const currentIndex = days.indexOf(selectedShiftToSwap.day);\n                                                                        const previousDay = days[currentIndex - 1];\n                                                                        const nextDay = days[currentIndex + 1];\n\n                                                                        if (['Morning', 'Noon'].includes(selectedShiftToSwap.shift) &&\n                                                                            previousDay &&\n                                                                            availability?.[id]?.Night?.[previousDay]?.status === 'selected'\n                                                                        ) return false;\n\n                                                                        if (selectedShiftToSwap.shift === 'Night' &&\n                                                                            nextDay &&\n                                                                            (\n                                                                                availability?.[id]?.Morning?.[nextDay]?.status === 'selected' ||\n                                                                                availability?.[id]?.Noon?.[nextDay]?.status === 'selected'\n                                                                            )\n                                                                        ) return false;\n\n                                                                        return true;\n                                                                    })\n\n                                                                    .sort(([, a], [, b]) => (a.name || '').localeCompare(b.name || ''))\n                                                                    .map(([id, user]) => (\n                                                                        <option key={id} value={id}>\n                                                                            {user.name}\n                                                                        </option>\n                                                                    ))}\n                                                            </select>\n                                                        </label>\n\n                                                        <button className=\"submit-swap-button\" onClick={handleOfferShift}>\n                                                            Offer Shift\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )\n                                        )}\n\n                                        {shiftOfferParams &&\n                                            loggedInUser?.user?.id === shiftOfferParams.offeredTo &&\n                                            availability?.[shiftOfferParams.fromUser]?.[shiftOfferParams.shift]?.[shiftOfferParams.day]?.status === 'selected' && (\n\n                                                <div className=\"swap-request-container\">\n                                                    <h3>You’ve received a shift offer</h3>\n                                                    <p>\n                                                        You are being offered the <strong>{shiftOfferParams.shift}</strong> shift on <strong>{shiftOfferParams.day}</strong> by{' '}\n                                                        <strong>{users[shiftOfferParams.fromUser]?.name || 'a colleague'}</strong>.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <button\n                                                            className=\"accept-swap-button\"\n                                                            onClick={async () => {\n                                                                const weekKey = calculateWeekKey(shiftOfferParams.weekOffset);\n                                                                const { shift, day, fromUser, offeredTo } = shiftOfferParams;\n\n                                                                const currentStatus = availability?.[fromUser]?.[shift]?.[day]?.status;\n                                                                if (currentStatus !== 'selected') {\n                                                                    toast.error('This shift has already been taken by someone else.');\n                                                                    setShiftOfferParams(null);\n                                                                    return;\n                                                                }\n\n                                                                const adminId = Object.entries(users).find(([, u]) => u.role === 'admin')?.[0];\n                                                                if (!adminId) {\n                                                                    toast.error('Admin not found.');\n                                                                    return;\n                                                                }\n\n                                                                const weekRange = calculateWeekRange(shiftOfferParams.weekOffset);\n                                                                const notificationLink = `/schedule?weekOffset=${shiftOfferParams.weekOffset}&approveShiftTransfer=true&day=${day}&shift=${shift}&fromUser=${fromUser}&toUser=${offeredTo}`;\n\n                                                                if (adminId === offeredTo) {\n                                                                    await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                                                                    await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n\n                                                                    const updated = { ...availability };\n                                                                    updated[fromUser][shift][day].status = 'default';\n                                                                    if (!updated[offeredTo]) updated[offeredTo] = {};\n                                                                    if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                                                                    if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = { isAvailable: true };\n                                                                    updated[offeredTo][shift][day].status = 'selected';\n\n                                                                    setAvailability(updated);\n                                                                    updateShiftCounts();\n\n                                                                    toast.success('Shift was successfully reassigned to you.');\n                                                                    setShiftOfferParams(null);\n                                                                } else {\n                                                                    await sendNotification(\n                                                                        currentCompany,\n                                                                        adminId,\n                                                                        `${users[offeredTo]?.name || 'An employee'} accepted the offer to take the ${shift} shift on ${day}. Please approve the change.`,\n                                                                        notificationLink\n                                                                    );\n\n                                                                    toast.success('Your request has been sent to the admin for approval.');\n                                                                    setShiftOfferParams(null);\n                                                                }\n                                                            }}\n                                                        >\n                                                            Accept Shift\n                                                        </button>\n\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            style={{ backgroundColor: '#e74c3c' }}\n                                                            onClick={() => {\n                                                                setShiftOfferParams(null);\n                                                                toast.info('You declined the shift.');\n                                                            }}\n                                                        >\n                                                            Decline\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )}\n\n                                        {shiftOfferParams?.isAdminApproval && (\n                                            <div className=\"swap-request-container\">\n                                                <h3>Admin Approval Required</h3>\n                                                <p>\n                                                    Approve transfer of <strong>{shiftOfferParams.shift} </strong> shift on <strong>{shiftOfferParams.day} </strong>\n                                                    from <strong>{users[shiftOfferParams.fromUser]?.name || 'Unknown'} </strong>\n                                                    to <strong>{users[shiftOfferParams.offeredTo]?.name || 'Unknown'}</strong>?\n                                                </p>\n                                                <div className=\"swap-form\">\n                                                    <button\n                                                        className=\"accept-swap-button\"\n                                                        onClick={async () => {\n                                                            const { shift, day, fromUser, offeredTo, weekOffset } = shiftOfferParams;\n                                                            const weekKey = calculateWeekKey(weekOffset);\n\n                                                            const currentStatus = availability?.[fromUser]?.[shift]?.[day]?.status;\n                                                            if (currentStatus !== 'selected') {\n                                                                toast.error('This shift has already been reassigned.');\n                                                                setShiftOfferParams(null);\n                                                                return;\n                                                            }\n\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n\n                                                            const updated = { ...availability };\n                                                            updated[fromUser][shift][day].status = 'default';\n                                                            if (!updated[offeredTo]) updated[offeredTo] = {};\n                                                            if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                                                            if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = { isAvailable: true };\n                                                            updated[offeredTo][shift][day].status = 'selected';\n\n                                                            setAvailability(updated);\n                                                            updateShiftCounts();\n\n                                                            const fromUserName = users[fromUser]?.name || 'Unknown';\n                                                            const offeredToName = users[offeredTo]?.name || 'Unknown';\n                                                            const link = `/schedule?weekOffset=${weekOffset}`;\n\n                                                            if (fromUser !== loggedInUser?.user?.id) {\n                                                                await sendNotification(\n                                                                    currentCompany,\n                                                                    fromUser,\n                                                                    `The admin approved your request to transfer the ${shift} shift on ${day} to ${offeredToName}.`,\n                                                                    link\n                                                                );\n                                                            }\n\n                                                            if (offeredTo !== loggedInUser?.user?.id) {\n                                                                await sendNotification(\n                                                                    currentCompany,\n                                                                    offeredTo,\n                                                                    `The admin approved your request to take the ${shift} shift on ${day} from ${fromUserName}.`,\n                                                                    link\n                                                                );\n                                                            }\n\n                                                            toast.success('Shift transfer approved.');\n                                                            setShiftOfferParams(null);\n                                                        }}\n                                                    >\n                                                        Approve\n                                                    </button>\n                                                    <button\n                                                        className=\"submit-swap-button\"\n                                                        style={{ backgroundColor: '#e74c3c' }}\n                                                        onClick={async () => {\n                                                            setShiftOfferParams(null);\n                                                            toast.info('Shift transfer declined.');\n\n                                                            const { shift, day, fromUser, offeredTo, weekOffset } = shiftOfferParams;\n\n                                                            const fromUserName = users[fromUser]?.name || 'Unknown';\n                                                            const offeredToName = users[offeredTo]?.name || 'an employee';\n                                                            const weekRange = calculateWeekRange(weekOffset);\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                fromUser,\n                                                                `Your shift offer to ${offeredToName} for the ${shift} shift on ${day} was declined by the admin.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                offeredTo,\n                                                                `Your request to take the ${shift} shift on ${day} from ${fromUserName} was declined by the admin.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n                                                        }}\n                                                    >\n                                                        Decline\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        )}\n\n                                        {shiftOfferParams?.isAdminSwapApproval && (\n                                            <div className=\"swap-request-container\">\n                                                <h3>Admin Approval Required</h3>\n                                                <p>\n                                                    Approve shift swap between{' '}\n                                                    <strong>{users[shiftOfferParams.me]?.name || 'Unknown'}</strong>\n                                                    (shift: {shiftOfferParams.myShift} on {shiftOfferParams.myDay}) and{' '}\n                                                    <strong>{users[shiftOfferParams.them]?.name || 'Unknown'}</strong>\n                                                    (shift: {shiftOfferParams.theirShift} on {shiftOfferParams.theirDay})?\n                                                </p>\n                                                <div className=\"swap-form\">\n                                                    <button\n                                                        className=\"accept-swap-button\"\n                                                        onClick={async () => {\n                                                            const {\n                                                                me, them, myDay, myShift, theirDay, theirShift, weekOffset\n                                                            } = shiftOfferParams;\n                                                            const weekKey = calculateWeekKey(weekOffset);\n\n                                                            const myStatus = availability?.[me]?.[myShift]?.[myDay]?.status;\n                                                            const theirStatus = availability?.[them]?.[theirShift]?.[theirDay]?.status;\n\n                                                            if (myStatus !== 'selected' || theirStatus !== 'selected') {\n                                                                toast.error('One of the shifts has already changed.');\n                                                                setShiftOfferParams(null);\n                                                                return;\n                                                            }\n\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n\n                                                            const updated = { ...availability };\n                                                            updated[me][myShift][myDay].status = 'default';\n                                                            updated[them][theirShift][theirDay].status = 'default';\n\n                                                            updated[me][theirShift] ||= {};\n                                                            updated[me][theirShift][theirDay] ||= { isAvailable: true };\n                                                            updated[me][theirShift][theirDay].status = 'selected';\n\n                                                            updated[them][myShift] ||= {};\n                                                            updated[them][myShift][myDay] ||= { isAvailable: true };\n                                                            updated[them][myShift][myDay].status = 'selected';\n\n                                                            setAvailability(updated);\n                                                            updateShiftCounts();\n\n                                                            toast.success('Swap approved and shifts updated.');\n                                                            setShiftOfferParams(null);\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                me,\n                                                                `The admin approved your shift swap. You are now assigned to the ${theirShift} shift on ${theirDay}.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                them,\n                                                                `The admin approved your shift swap. You are now assigned to the ${myShift} shift on ${myDay}.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n                                                        }}\n                                                    >\n                                                        Approve\n                                                    </button>\n\n                                                    <button\n                                                        className=\"submit-swap-button\"\n                                                        style={{ backgroundColor: '#e74c3c' }}\n                                                        onClick={() => {\n                                                            setShiftOfferParams(null);\n                                                            toast.info('Swap request declined.');\n                                                        }}\n                                                    >\n                                                        Decline\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        )}\n\n                                    </div>\n                                ) : (\n                                    <p className=\"no-schedule-message\">\n                                        No published schedule is available for this week.\n                                    </p>\n                                )\n                            )}\n                        </>\n                    )}\n                </div>\n            </div>\n        </BackgroundWrapper>\n    );\n}\n\nexport default ScheduleScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}