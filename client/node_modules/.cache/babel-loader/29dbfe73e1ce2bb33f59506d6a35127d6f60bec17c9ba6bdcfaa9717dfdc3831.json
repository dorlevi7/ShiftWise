{"ast":null,"code":"// Validates email using a stricter and widely accepted pattern\nexport const isValidEmail = email => {\n  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return typeof email === 'string' && regex.test(email.trim());\n};\n\n// Validates phone numbers with 9–15 digits, allows starting with 0, and disallows all zeros\nexport const isValidPhone = phone => {\n  const trimmed = phone.trim();\n  const regex = /^\\+?\\d{9,15}$/;\n  return typeof phone === 'string' && regex.test(trimmed) && !/^0+$/.test(trimmed) // Disallow numbers made of only zeros\n  ;\n};\n\n// Checks that the value is not just spaces or empty\nexport const isNonEmpty = value => {\n  return typeof value === 'string' && value.trim().replace(/\\s/g, '') !== '';\n};\n\n// Validates a name: only Hebrew/English letters and single spaces between words\nexport const isValidName = name => {\n  const trimmed = name.trim();\n  const regex = /^[A-Za-zא-ת]+(?:\\s[A-Za-zא-ת]+)*$/;\n  return typeof name === 'string' && regex.test(trimmed);\n};\n\n// Validates password: at least 8 characters, includes uppercase, lowercase, and a digit\nexport const isStrongPassword = password => {\n  const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&^#_~()-=+]{8,}$/;\n  const weakList = ['12345678', 'password', 'qwerty123', 'Passw0rd'];\n  return typeof password === 'string' && regex.test(password) && !weakList.includes(password.toLowerCase());\n};\n\n// Validates the entire signup form and returns an array of error messages\nexport const validateSignupForm = (company, admin) => {\n  const errors = [];\n\n  // Company validation\n  if (!isNonEmpty(company.name)) errors.push('Company name is required.');\n  if (!isNonEmpty(company.address)) errors.push('Company address is required.');\n  if (!isValidPhone(company.phone)) errors.push('Invalid company phone number.');\n  if (!isValidEmail(company.email)) errors.push('Invalid company email address.');\n\n  // Admin validation\n  if (!isValidName(admin.name)) errors.push('Admin name must contain only letters and single spaces.');\n  if (!isValidPhone(admin.phone)) errors.push('Invalid admin phone number.');\n  if (!isValidEmail(admin.email)) errors.push('Invalid admin email address.');\n  if (!isStrongPassword(admin.password)) {\n    errors.push('Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, and one digit.');\n  }\n  return errors;\n};","map":{"version":3,"names":["isValidEmail","email","regex","test","trim","isValidPhone","phone","trimmed","isNonEmpty","value","replace","isValidName","name","isStrongPassword","password","weakList","includes","toLowerCase","validateSignupForm","company","admin","errors","push","address"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/utils/validationUtils.js"],"sourcesContent":["// Validates email using a stricter and widely accepted pattern\nexport const isValidEmail = (email) => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return typeof email === 'string' && regex.test(email.trim());\n};\n\n// Validates phone numbers with 9–15 digits, allows starting with 0, and disallows all zeros\nexport const isValidPhone = (phone) => {\n    const trimmed = phone.trim();\n    const regex = /^\\+?\\d{9,15}$/;\n    return (\n        typeof phone === 'string' &&\n        regex.test(trimmed) &&\n        !/^0+$/.test(trimmed) // Disallow numbers made of only zeros\n    );\n};\n\n\n// Checks that the value is not just spaces or empty\nexport const isNonEmpty = (value) => {\n    return typeof value === 'string' && value.trim().replace(/\\s/g, '') !== '';\n};\n\n// Validates a name: only Hebrew/English letters and single spaces between words\nexport const isValidName = (name) => {\n    const trimmed = name.trim();\n    const regex = /^[A-Za-zא-ת]+(?:\\s[A-Za-zא-ת]+)*$/;\n    return typeof name === 'string' && regex.test(trimmed);\n};\n\n// Validates password: at least 8 characters, includes uppercase, lowercase, and a digit\nexport const isStrongPassword = (password) => {\n    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&^#_~()-=+]{8,}$/;\n    const weakList = ['12345678', 'password', 'qwerty123', 'Passw0rd'];\n    return (\n        typeof password === 'string' &&\n        regex.test(password) &&\n        !weakList.includes(password.toLowerCase())\n    );\n};\n\n// Validates the entire signup form and returns an array of error messages\nexport const validateSignupForm = (company, admin) => {\n    const errors = [];\n\n    // Company validation\n    if (!isNonEmpty(company.name)) errors.push('Company name is required.');\n    if (!isNonEmpty(company.address)) errors.push('Company address is required.');\n    if (!isValidPhone(company.phone)) errors.push('Invalid company phone number.');\n    if (!isValidEmail(company.email)) errors.push('Invalid company email address.');\n\n    // Admin validation\n    if (!isValidName(admin.name)) errors.push('Admin name must contain only letters and single spaces.');\n    if (!isValidPhone(admin.phone)) errors.push('Invalid admin phone number.');\n    if (!isValidEmail(admin.email)) errors.push('Invalid admin email address.');\n    if (!isStrongPassword(admin.password)) {\n        errors.push('Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, and one digit.');\n    }\n\n    return errors;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAIC,KAAK,IAAK;EACnC,MAAMC,KAAK,GAAG,kDAAkD;EAChE,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIC,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC;AAChE,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACnC,MAAMC,OAAO,GAAGD,KAAK,CAACF,IAAI,CAAC,CAAC;EAC5B,MAAMF,KAAK,GAAG,eAAe;EAC7B,OACI,OAAOI,KAAK,KAAK,QAAQ,IACzBJ,KAAK,CAACC,IAAI,CAACI,OAAO,CAAC,IACnB,CAAC,MAAM,CAACJ,IAAI,CAACI,OAAO,CAAC,CAAC;EAAA;AAE9B,CAAC;;AAGD;AACA,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAAK;EACjC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACL,IAAI,CAAC,CAAC,CAACM,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE;AAC9E,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACjC,MAAML,OAAO,GAAGK,IAAI,CAACR,IAAI,CAAC,CAAC;EAC3B,MAAMF,KAAK,GAAG,mCAAmC;EACjD,OAAO,OAAOU,IAAI,KAAK,QAAQ,IAAIV,KAAK,CAACC,IAAI,CAACI,OAAO,CAAC;AAC1D,CAAC;;AAED;AACA,OAAO,MAAMM,gBAAgB,GAAIC,QAAQ,IAAK;EAC1C,MAAMZ,KAAK,GAAG,gEAAgE;EAC9E,MAAMa,QAAQ,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,CAAC;EAClE,OACI,OAAOD,QAAQ,KAAK,QAAQ,IAC5BZ,KAAK,CAACC,IAAI,CAACW,QAAQ,CAAC,IACpB,CAACC,QAAQ,CAACC,QAAQ,CAACF,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC;AAElD,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,OAAO,EAAEC,KAAK,KAAK;EAClD,MAAMC,MAAM,GAAG,EAAE;;EAEjB;EACA,IAAI,CAACb,UAAU,CAACW,OAAO,CAACP,IAAI,CAAC,EAAES,MAAM,CAACC,IAAI,CAAC,2BAA2B,CAAC;EACvE,IAAI,CAACd,UAAU,CAACW,OAAO,CAACI,OAAO,CAAC,EAAEF,MAAM,CAACC,IAAI,CAAC,8BAA8B,CAAC;EAC7E,IAAI,CAACjB,YAAY,CAACc,OAAO,CAACb,KAAK,CAAC,EAAEe,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC;EAC9E,IAAI,CAACtB,YAAY,CAACmB,OAAO,CAAClB,KAAK,CAAC,EAAEoB,MAAM,CAACC,IAAI,CAAC,gCAAgC,CAAC;;EAE/E;EACA,IAAI,CAACX,WAAW,CAACS,KAAK,CAACR,IAAI,CAAC,EAAES,MAAM,CAACC,IAAI,CAAC,yDAAyD,CAAC;EACpG,IAAI,CAACjB,YAAY,CAACe,KAAK,CAACd,KAAK,CAAC,EAAEe,MAAM,CAACC,IAAI,CAAC,6BAA6B,CAAC;EAC1E,IAAI,CAACtB,YAAY,CAACoB,KAAK,CAACnB,KAAK,CAAC,EAAEoB,MAAM,CAACC,IAAI,CAAC,8BAA8B,CAAC;EAC3E,IAAI,CAACT,gBAAgB,CAACO,KAAK,CAACN,QAAQ,CAAC,EAAE;IACnCO,MAAM,CAACC,IAAI,CAAC,6HAA6H,CAAC;EAC9I;EAEA,OAAOD,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}