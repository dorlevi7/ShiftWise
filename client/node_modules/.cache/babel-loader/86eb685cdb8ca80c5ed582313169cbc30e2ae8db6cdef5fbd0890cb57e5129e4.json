{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/PrivateChatScreen.js\",\n  _s = $RefreshSig$();\n// React functions\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getPrivateMessages, sendPrivateMessage } from '../services/chatService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PrivateChatScreen = () => {\n  _s();\n  const {\n    recipientId\n  } = useParams();\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n    }\n  }, [navigate]);\n  useEffect(() => {\n    var _userData$company, _userData$user;\n    if (userData !== null && userData !== void 0 && (_userData$company = userData.company) !== null && _userData$company !== void 0 && _userData$company.id && userData !== null && userData !== void 0 && (_userData$user = userData.user) !== null && _userData$user !== void 0 && _userData$user.id && recipientId) {\n      fetchPrivateMessages();\n    }\n  }, [userData, recipientId]);\n  const fetchPrivateMessages = async () => {\n    try {\n      const data = await getPrivateMessages(userData.company.id, userData.user.id, recipientId);\n      const messagesArray = data ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp) : [];\n      setMessages(messagesArray);\n    } catch (error) {\n      console.error('Error fetching private messages:', error);\n      toast.error('Failed to load messages.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    const messageData = {\n      senderId: userData.user.id,\n      senderName: userData.user.name || 'Unknown',\n      content: newMessage.trim(),\n      timestamp: Date.now()\n    };\n    try {\n      await sendPrivateMessage(userData.company.id, userData.user.id, recipientId, messageData);\n      setMessages(prev => [...prev, messageData]);\n      setNewMessage('');\n      scrollToBottom();\n    } catch (error) {\n      toast.error('Failed to send message.');\n    }\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 16\n    }, this);\n  }\n  const isSameDate = (t1, t2) => {\n    const d1 = new Date(t1);\n    const d2 = new Date(t2);\n    return d1.toDateString() === d2.toDateString();\n  };\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Private Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.map((msg, index) => {\n            const currentDate = new Date(msg.timestamp);\n            const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n            const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [showDate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"date-header-wrapper\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"date-header\",\n                  children: currentDate.toLocaleDateString('he-IL', {\n                    weekday: 'short',\n                    day: '2-digit',\n                    month: '2-digit',\n                    year: 'numeric'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-right' : 'align-left'}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-sender\",\n                    children: msg.senderName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-content\",\n                    children: msg.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-time\",\n                    children: new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 37\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type a message...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            onKeyDown: handleKeyPress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(PrivateChatScreen, \"m6MBysfbBMv/fOpICnIVZERCKpQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PrivateChatScreen;\nexport default PrivateChatScreen;\nvar _c;\n$RefreshReg$(_c, \"PrivateChatScreen\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","useNavigate","toast","ToastContainer","getPrivateMessages","sendPrivateMessage","Navbar","Loader","BackgroundWrapper","jsxDEV","_jsxDEV","Fragment","_Fragment","PrivateChatScreen","_s","recipientId","navigate","userData","setUserData","messages","setMessages","newMessage","setNewMessage","isLoading","setIsLoading","messagesEndRef","loggedUser","JSON","parse","localStorage","getItem","_userData$company","_userData$user","company","id","user","fetchPrivateMessages","data","messagesArray","Object","values","sort","a","b","timestamp","error","console","handleSendMessage","trim","messageData","senderId","senderName","name","content","Date","now","prev","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleKeyPress","e","key","fileName","_jsxFileName","lineNumber","columnNumber","isSameDate","t1","t2","d1","d2","toDateString","children","className","map","msg","index","currentDate","prevDate","showDate","toLocaleDateString","weekday","day","month","year","toLocaleTimeString","hour","minute","ref","type","placeholder","value","onChange","target","onKeyDown","onClick","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/PrivateChatScreen.js"],"sourcesContent":["// React functions\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getPrivateMessages, sendPrivateMessage } from '../services/chatService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\n\nconst PrivateChatScreen = () => {\n    const { recipientId } = useParams();\n    const navigate = useNavigate();\n    const [userData, setUserData] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n\n    const messagesEndRef = useRef(null);\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        if (userData?.company?.id && userData?.user?.id && recipientId) {\n            fetchPrivateMessages();\n        }\n    }, [userData, recipientId]);\n\n    const fetchPrivateMessages = async () => {\n        try {\n            const data = await getPrivateMessages(userData.company.id, userData.user.id, recipientId);\n            const messagesArray = data ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp) : [];\n            setMessages(messagesArray);\n        } catch (error) {\n            console.error('Error fetching private messages:', error);\n            toast.error('Failed to load messages.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleSendMessage = async () => {\n        if (!newMessage.trim()) return;\n\n        const messageData = {\n            senderId: userData.user.id,\n            senderName: userData.user.name || 'Unknown',\n            content: newMessage.trim(),\n            timestamp: Date.now(),\n        };\n\n        try {\n            await sendPrivateMessage(userData.company.id, userData.user.id, recipientId, messageData);\n            setMessages((prev) => [...prev, messageData]);\n            setNewMessage('');\n            scrollToBottom();\n        } catch (error) {\n            toast.error('Failed to send message.');\n        }\n    };\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    useEffect(scrollToBottom, [messages]);\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleSendMessage();\n        }\n    };\n\n    if (!userData) {\n        return <Loader />;\n    }\n\n    const isSameDate = (t1, t2) => {\n        const d1 = new Date(t1);\n        const d2 = new Date(t2);\n        return d1.toDateString() === d2.toDateString();\n    };\n\n    return (\n        <BackgroundWrapper>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div>\n\n            <div className=\"chat-container\">\n                <h1>Private Chat</h1>\n\n                {isLoading ? (\n                    <Loader />\n                ) : (\n                    <>\n                        <div className=\"chat-messages\">\n                            {messages.map((msg, index) => {\n                                const currentDate = new Date(msg.timestamp);\n                                const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n                                const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n\n                                return (\n                                    <React.Fragment key={index}>\n                                        {showDate && (\n                                            <div className=\"date-header-wrapper\">\n                                                <div className=\"date-header\">\n                                                    {currentDate.toLocaleDateString('he-IL', {\n                                                        weekday: 'short',\n                                                        day: '2-digit',\n                                                        month: '2-digit',\n                                                        year: 'numeric',\n                                                    })}\n                                                </div>\n                                            </div>\n                                        )}\n                                        <div\n                                            className={`chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-right' : 'align-left'}`}\n                                        >\n                                            <div className={`chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`}>\n                                                <div className=\"chat-sender\">{msg.senderName}</div>\n                                                <div className=\"chat-content\">{msg.content}</div>\n                                                <div className=\"chat-time\">\n                                                    {new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                                                        hour: '2-digit',\n                                                        minute: '2-digit',\n                                                    })}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </React.Fragment>\n                                );\n                            })}\n                            <div ref={messagesEndRef} />\n                        </div>\n\n                        <div className=\"chat-input\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Type a message...\"\n                                value={newMessage}\n                                onChange={(e) => setNewMessage(e.target.value)}\n                                onKeyDown={handleKeyPress}\n                            />\n                            <button onClick={handleSendMessage}>Send</button>\n                        </div>\n                    </>\n                )}\n\n                <ToastContainer />\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default PrivateChatScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}