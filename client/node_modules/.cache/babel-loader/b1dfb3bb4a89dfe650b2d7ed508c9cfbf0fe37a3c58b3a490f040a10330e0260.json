{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ChatScreen.js\",\n  _s = $RefreshSig$();\n// React functions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getPrivateLastSeen, markPrivateSeen, getGroupMessages, sendGroupMessage, getPrivateMessages, sendPrivateMessage } from '../services/chatService';\nimport { getUsers } from '../services/userService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatScreen = () => {\n  _s();\n  var _getUserById;\n  const navigate = useNavigate();\n  const {\n    recipientId\n  } = useParams();\n  const [userData, setUserData] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const messagesEndRef = useRef(null);\n  const [companyUsers, setCompanyUsers] = useState([]);\n  const [unreadStatus, setUnreadStatus] = useState({});\n  const [lastMessageMap, setLastMessageMap] = useState({});\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n    }\n  }, [navigate]);\n  useEffect(() => {\n    var _userData$company;\n    if (userData !== null && userData !== void 0 && (_userData$company = userData.company) !== null && _userData$company !== void 0 && _userData$company.id) {\n      fetchMessages();\n    }\n  }, [userData, recipientId]);\n  useEffect(() => {\n    var _userData$company2;\n    if (userData !== null && userData !== void 0 && (_userData$company2 = userData.company) !== null && _userData$company2 !== void 0 && _userData$company2.id) {\n      fetchCompanyUsers();\n    }\n  }, [userData]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    var _userData$company3;\n    if (userData !== null && userData !== void 0 && (_userData$company3 = userData.company) !== null && _userData$company3 !== void 0 && _userData$company3.id && companyUsers.length > 0) {\n      checkUnreadMessages(companyUsers); // ✅ שולח את המשתמשים לבדיקה\n    }\n  }, [userData, companyUsers]);\n  const checkUnreadMessages = async usersList => {\n    const companyId = userData.company.id;\n    const currentUserId = userData.user.id;\n    const statusMap = {};\n    const timeMap = {};\n    for (const user of usersList) {\n      try {\n        const chatData = await getPrivateMessages(companyId, currentUserId, user.id);\n        const messages = chatData ? Object.values(chatData).sort((a, b) => b.timestamp - a.timestamp) : [];\n        const lastMessage = messages[0];\n        if (!lastMessage) {\n          statusMap[user.id] = false;\n          timeMap[user.id] = 0;\n          continue;\n        }\n        const lastSeen = await getPrivateLastSeen(companyId, currentUserId, user.id, currentUserId);\n        const isUnread = lastMessage.senderId !== currentUserId && (!lastSeen || lastMessage.timestamp > lastSeen);\n        statusMap[user.id] = isUnread;\n        timeMap[user.id] = lastMessage.timestamp;\n      } catch (err) {\n        console.error('Error checking unread status for', user.name, err);\n        statusMap[user.id] = false;\n        timeMap[user.id] = 0;\n      }\n    }\n    setUnreadStatus(statusMap);\n    setLastMessageMap(timeMap);\n\n    // ממיין לפי זמן הודעה אחרונה\n    const sorted = usersList.sort((a, b) => (timeMap[b.id] || 0) - (timeMap[a.id] || 0));\n    setCompanyUsers(sorted);\n  };\n  useEffect(() => {\n    if (messages.length > 0) {\n      scrollToBottom();\n    }\n  }, [messages]);\n  const fetchCompanyUsers = async () => {\n    try {\n      var _userData$company4, _userData$user;\n      const companyId = userData === null || userData === void 0 ? void 0 : (_userData$company4 = userData.company) === null || _userData$company4 === void 0 ? void 0 : _userData$company4.id;\n      const currentUserId = userData === null || userData === void 0 ? void 0 : (_userData$user = userData.user) === null || _userData$user === void 0 ? void 0 : _userData$user.id;\n      if (companyId) {\n        const allUsers = await getUsers();\n        const filtered = Object.entries(allUsers).map(([id, user]) => ({\n          id,\n          ...user\n        })).filter(user => {\n          var _user$companyIds;\n          return ((_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(comp => comp.companyId === companyId)) && user.id !== currentUserId;\n        });\n        await checkUnreadMessages(filtered); // כאן אנחנו מעבירים את הרשימה לבדיקה + מיון\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const companyId = userData.company.id;\n      const userId = userData.user.id;\n      let data;\n      if (recipientId) {\n        data = await getPrivateMessages(companyId, userId, recipientId);\n\n        // ✅ סימון הודעות כנקראו:\n        await markPrivateSeen(companyId, userId, recipientId, userId);\n      } else {\n        data = await getGroupMessages(companyId);\n      }\n      const messagesArray = data ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp) : [];\n      setMessages(messagesArray);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      toast.error('Failed to load messages.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    const messageData = {\n      senderId: userData.user.id,\n      senderName: userData.user.name || 'Unknown',\n      content: newMessage.trim(),\n      timestamp: Date.now()\n    };\n    try {\n      const companyId = userData.company.id;\n      const userId = userData.user.id;\n      if (recipientId) {\n        await sendPrivateMessage(companyId, userId, recipientId, messageData);\n      } else {\n        await sendGroupMessage(companyId, messageData);\n      }\n      setMessages(prev => [...prev, messageData]);\n      setNewMessage('');\n    } catch (error) {\n      toast.error('Failed to send message.');\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  const isSameDate = (timestamp1, timestamp2) => {\n    const date1 = new Date(timestamp1);\n    const date2 = new Date(timestamp2);\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  };\n  const getUserNameById = id => {\n    const user = companyUsers.find(u => u.id === id);\n    return user ? user.name : 'User';\n  };\n  if (!userData) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 27\n  }, this);\n  const getUserById = id => {\n    return companyUsers.find(u => u.id === id);\n  };\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCAC Chats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: `chat-link ${!recipientId ? 'active-chat' : ''}`,\n            onClick: () => navigate('/chat'),\n            children: \"\\uD83D\\uDFE2 Group Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this), companyUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `chat-link ${recipientId === user.id ? 'active-chat' : ''}`,\n            onClick: () => navigate(`/private-chat/${user.id}`),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"chat-user-wrapper\",\n              children: [user.name, unreadStatus[user.id] && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"unread-badge\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 63\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 33\n            }, this)\n          }, user.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: recipientId ? `Chat with ${getUserNameById(recipientId)}` : 'Group Chat'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), recipientId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-recipient-photo-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: ((_getUserById = getUserById(recipientId)) === null || _getUserById === void 0 ? void 0 : _getUserById.photoData) || '/images/Profile.jpeg',\n            alt: \"User\",\n            className: \"chat-recipient-photo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-messages\",\n            children: [messages.map((msg, index) => {\n              const currentDate = new Date(msg.timestamp);\n              const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n              const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [showDate && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"date-header-wrapper\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"date-header\",\n                    children: currentDate.toLocaleDateString('he-IL', {\n                      weekday: 'short',\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric'\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-left' : 'align-right'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-sender\",\n                      children: msg.senderName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 295,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-content\",\n                      children: msg.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 296,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-time\",\n                      children: new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 297,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 294,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 45\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 41\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              placeholder: \"Type a message...\",\n              value: newMessage,\n              onChange: e => setNewMessage(e.target.value),\n              onKeyDown: e => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage();\n                }\n              },\n              rows: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatScreen, \"ASWAoUentNPakMe7Vg/LmVTgfTU=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ChatScreen;\nexport default ChatScreen;\nvar _c;\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","toast","ToastContainer","getPrivateLastSeen","markPrivateSeen","getGroupMessages","sendGroupMessage","getPrivateMessages","sendPrivateMessage","getUsers","Navbar","Loader","BackgroundWrapper","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatScreen","_s","_getUserById","navigate","recipientId","userData","setUserData","messages","setMessages","newMessage","setNewMessage","isLoading","setIsLoading","messagesEndRef","companyUsers","setCompanyUsers","unreadStatus","setUnreadStatus","lastMessageMap","setLastMessageMap","loggedUser","JSON","parse","localStorage","getItem","_userData$company","company","id","fetchMessages","_userData$company2","fetchCompanyUsers","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","_userData$company3","length","checkUnreadMessages","usersList","companyId","currentUserId","user","statusMap","timeMap","chatData","Object","values","sort","a","b","timestamp","lastMessage","lastSeen","isUnread","senderId","err","console","error","name","sorted","_userData$company4","_userData$user","allUsers","filtered","entries","map","filter","_user$companyIds","companyIds","some","comp","userId","data","messagesArray","handleSendMessage","trim","messageData","senderName","content","Date","now","prev","handleKeyPress","e","key","isSameDate","timestamp1","timestamp2","date1","date2","getFullYear","getMonth","getDate","getUserNameById","find","u","fileName","_jsxFileName","lineNumber","columnNumber","getUserById","children","className","onClick","src","photoData","alt","msg","index","currentDate","prevDate","showDate","toLocaleDateString","weekday","day","month","year","toLocaleTimeString","hour","minute","ref","placeholder","value","onChange","target","onKeyDown","shiftKey","preventDefault","rows","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ChatScreen.js"],"sourcesContent":["// React functions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getPrivateLastSeen, markPrivateSeen, getGroupMessages, sendGroupMessage, getPrivateMessages, sendPrivateMessage } from '../services/chatService';\nimport { getUsers } from '../services/userService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\n\nconst ChatScreen = () => {\n    const navigate = useNavigate();\n    const { recipientId } = useParams();\n\n    const [userData, setUserData] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n\n    const messagesEndRef = useRef(null);\n    const [companyUsers, setCompanyUsers] = useState([]);\n\n    const [unreadStatus, setUnreadStatus] = useState({});\n\n    const [lastMessageMap, setLastMessageMap] = useState({});\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        if (userData?.company?.id) {\n            fetchMessages();\n        }\n    }, [userData, recipientId]);\n\n    useEffect(() => {\n        if (userData?.company?.id) {\n            fetchCompanyUsers();\n        }\n    }, [userData]);\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    useEffect(() => {\n        if (userData?.company?.id && companyUsers.length > 0) {\n            checkUnreadMessages(companyUsers); // ✅ שולח את המשתמשים לבדיקה\n        }\n    }, [userData, companyUsers]);\n\n    const checkUnreadMessages = async (usersList) => {\n        const companyId = userData.company.id;\n        const currentUserId = userData.user.id;\n        const statusMap = {};\n        const timeMap = {};\n\n        for (const user of usersList) {\n            try {\n                const chatData = await getPrivateMessages(companyId, currentUserId, user.id);\n                const messages = chatData\n                    ? Object.values(chatData).sort((a, b) => b.timestamp - a.timestamp)\n                    : [];\n\n                const lastMessage = messages[0];\n                if (!lastMessage) {\n                    statusMap[user.id] = false;\n                    timeMap[user.id] = 0;\n                    continue;\n                }\n\n                const lastSeen = await getPrivateLastSeen(companyId, currentUserId, user.id, currentUserId);\n                const isUnread = (\n                    lastMessage.senderId !== currentUserId &&\n                    (!lastSeen || lastMessage.timestamp > lastSeen)\n                );\n\n                statusMap[user.id] = isUnread;\n                timeMap[user.id] = lastMessage.timestamp;\n            } catch (err) {\n                console.error('Error checking unread status for', user.name, err);\n                statusMap[user.id] = false;\n                timeMap[user.id] = 0;\n            }\n        }\n\n        setUnreadStatus(statusMap);\n        setLastMessageMap(timeMap);\n\n        // ממיין לפי זמן הודעה אחרונה\n        const sorted = usersList.sort((a, b) => (timeMap[b.id] || 0) - (timeMap[a.id] || 0));\n        setCompanyUsers(sorted);\n    };\n\n    useEffect(() => {\n        if (messages.length > 0) {\n            scrollToBottom();\n        }\n    }, [messages]);\n\n    const fetchCompanyUsers = async () => {\n        try {\n            const companyId = userData?.company?.id;\n            const currentUserId = userData?.user?.id;\n\n            if (companyId) {\n                const allUsers = await getUsers();\n                const filtered = Object.entries(allUsers)\n                    .map(([id, user]) => ({ id, ...user }))\n                    .filter((user) =>\n                        user.companyIds?.some((comp) => comp.companyId === companyId) &&\n                        user.id !== currentUserId\n                    );\n\n                await checkUnreadMessages(filtered); // כאן אנחנו מעבירים את הרשימה לבדיקה + מיון\n            }\n        } catch (error) {\n            console.error('Error fetching users:', error);\n        }\n    };\n\n    const fetchMessages = async () => {\n        try {\n            const companyId = userData.company.id;\n            const userId = userData.user.id;\n\n            let data;\n            if (recipientId) {\n                data = await getPrivateMessages(companyId, userId, recipientId);\n\n                // ✅ סימון הודעות כנקראו:\n                await markPrivateSeen(companyId, userId, recipientId, userId);\n            } else {\n                data = await getGroupMessages(companyId);\n            }\n\n            const messagesArray = data\n                ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp)\n                : [];\n\n            setMessages(messagesArray);\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n            toast.error('Failed to load messages.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleSendMessage = async () => {\n        if (!newMessage.trim()) return;\n\n        const messageData = {\n            senderId: userData.user.id,\n            senderName: userData.user.name || 'Unknown',\n            content: newMessage.trim(),\n            timestamp: Date.now(),\n        };\n\n        try {\n            const companyId = userData.company.id;\n            const userId = userData.user.id;\n\n            if (recipientId) {\n                await sendPrivateMessage(companyId, userId, recipientId, messageData);\n            } else {\n                await sendGroupMessage(companyId, messageData);\n            }\n\n            setMessages((prev) => [...prev, messageData]);\n            setNewMessage('');\n        } catch (error) {\n            toast.error('Failed to send message.');\n        }\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleSendMessage();\n        }\n    };\n\n    const isSameDate = (timestamp1, timestamp2) => {\n        const date1 = new Date(timestamp1);\n        const date2 = new Date(timestamp2);\n        return (\n            date1.getFullYear() === date2.getFullYear() &&\n            date1.getMonth() === date2.getMonth() &&\n            date1.getDate() === date2.getDate()\n        );\n    };\n\n    const getUserNameById = (id) => {\n        const user = companyUsers.find((u) => u.id === id);\n        return user ? user.name : 'User';\n    };\n\n    if (!userData) return <Loader />;\n\n    const getUserById = (id) => {\n        return companyUsers.find((u) => u.id === id);\n    };\n\n    return (\n        <BackgroundWrapper>\n            <Navbar />\n\n            <div className=\"navbar-placeholder\"></div>\n\n            <div className=\"chat-layout\">\n                {/* Sidebar with user list */}\n                <div className=\"chat-sidebar\">\n                    <h3>💬 Chats</h3>\n                    <ul>\n                        <li\n                            className={`chat-link ${!recipientId ? 'active-chat' : ''}`}\n                            onClick={() => navigate('/chat')}\n                        >\n                            🟢 Group Chat\n                        </li>\n\n                        {companyUsers.map((user) => (\n                            <li\n                                key={user.id}\n                                className={`chat-link ${recipientId === user.id ? 'active-chat' : ''}`}\n                                onClick={() => navigate(`/private-chat/${user.id}`)}\n                            >\n                                <span className=\"chat-user-wrapper\">\n                                    {user.name}\n                                    {unreadStatus[user.id] && <span className=\"unread-badge\"></span>}\n                                </span>\n                            </li>\n                        ))}\n\n                    </ul>\n\n                </div>\n\n                {/* Main chat area */}\n                <div className=\"chat-main\">\n                    <h1>{recipientId ? `Chat with ${getUserNameById(recipientId)}` : 'Group Chat'}</h1>\n                    {recipientId && (\n                        <div className=\"chat-recipient-photo-wrapper\">\n                            <img\n                                src={getUserById(recipientId)?.photoData || '/images/Profile.jpeg'}\n                                alt=\"User\"\n                                className=\"chat-recipient-photo\"\n                            />\n                        </div>\n                    )}\n\n                    {isLoading ? (\n                        <Loader />\n                    ) : (\n                        <>\n                            <div className=\"chat-messages\">\n                                {messages.map((msg, index) => {\n                                    const currentDate = new Date(msg.timestamp);\n                                    const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n                                    const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n\n                                    return (\n                                        <React.Fragment key={index}>\n                                            {showDate && (\n                                                <div className=\"date-header-wrapper\">\n                                                    <div className=\"date-header\">\n                                                        {currentDate.toLocaleDateString('he-IL', {\n                                                            weekday: 'short',\n                                                            day: '2-digit',\n                                                            month: '2-digit',\n                                                            year: 'numeric',\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            )}\n                                            <div className={`chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-left' : 'align-right'}`}>\n                                                <div className={`chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`}>\n                                                    <div className=\"chat-sender\">{msg.senderName}</div>\n                                                    <div className=\"chat-content\">{msg.content}</div>\n                                                    <div className=\"chat-time\">\n                                                        {new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                                                            hour: '2-digit',\n                                                            minute: '2-digit',\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </React.Fragment>\n                                    );\n                                })}\n                                <div ref={messagesEndRef} />\n                            </div>\n\n                            <div className=\"chat-input\">\n                                <textarea\n                                    placeholder=\"Type a message...\"\n                                    value={newMessage}\n                                    onChange={(e) => setNewMessage(e.target.value)}\n                                    onKeyDown={(e) => {\n                                        if (e.key === 'Enter' && !e.shiftKey) {\n                                            e.preventDefault();\n                                            handleSendMessage();\n                                        }\n                                    }}\n                                    rows={2}\n                                />\n\n                                <button onClick={handleSendMessage}>Send</button>\n                            </div>\n                        </>\n                    )}\n                </div>\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default ChatScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}