{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ChatScreen.js\",\n  _s = $RefreshSig$();\n// React functions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getPrivateLastSeen, markPrivateSeen, getGroupMessages, sendGroupMessage, getPrivateMessages, sendPrivateMessage } from '../services/chatService';\nimport { getUsers } from '../services/userService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatScreen = () => {\n  _s();\n  var _getUserById;\n  const navigate = useNavigate();\n  const {\n    recipientId\n  } = useParams();\n  const [userData, setUserData] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const messagesEndRef = useRef(null);\n  const [companyUsers, setCompanyUsers] = useState([]);\n  const [unreadStatus, setUnreadStatus] = useState({});\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n    }\n  }, [navigate]);\n  useEffect(() => {\n    var _userData$company;\n    if (userData !== null && userData !== void 0 && (_userData$company = userData.company) !== null && _userData$company !== void 0 && _userData$company.id) {\n      fetchMessages();\n    }\n  }, [userData, recipientId]);\n  useEffect(() => {\n    var _userData$company2;\n    if (userData !== null && userData !== void 0 && (_userData$company2 = userData.company) !== null && _userData$company2 !== void 0 && _userData$company2.id) {\n      fetchCompanyUsers();\n    }\n  }, [userData]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    var _userData$company3;\n    if (userData !== null && userData !== void 0 && (_userData$company3 = userData.company) !== null && _userData$company3 !== void 0 && _userData$company3.id && companyUsers.length > 0) {\n      checkUnreadMessages();\n    }\n  }, [userData, companyUsers]);\n  const checkUnreadMessages = async () => {\n    const companyId = userData.company.id;\n    const currentUserId = userData.user.id;\n    const statusMap = {};\n    for (const user of companyUsers) {\n      try {\n        const chatData = await getPrivateMessages(companyId, currentUserId, user.id);\n        const messages = chatData ? Object.values(chatData).sort((a, b) => b.timestamp - a.timestamp) : [];\n        const lastMessage = messages[0];\n        if (!lastMessage) {\n          statusMap[user.id] = false;\n          continue;\n        }\n        const lastSeen = await getPrivateLastSeen(companyId, currentUserId, user.id, currentUserId);\n\n        // ✅ תנאי נוסף: רק אם ההודעה האחרונה לא נשלחה על ידי המשתמש עצמו\n        const isUnread = lastMessage.senderId !== currentUserId && (!lastSeen || lastMessage.timestamp > lastSeen);\n        statusMap[user.id] = isUnread;\n      } catch (err) {\n        console.error('Error checking unread status for', user.name, err);\n        statusMap[user.id] = false;\n      }\n    }\n    setUnreadStatus(statusMap);\n  };\n  useEffect(() => {\n    if (messages.length > 0) {\n      scrollToBottom();\n    }\n  }, [messages]);\n  const fetchCompanyUsers = async () => {\n    try {\n      var _userData$company4, _userData$user;\n      const companyId = userData === null || userData === void 0 ? void 0 : (_userData$company4 = userData.company) === null || _userData$company4 === void 0 ? void 0 : _userData$company4.id;\n      const currentUserId = userData === null || userData === void 0 ? void 0 : (_userData$user = userData.user) === null || _userData$user === void 0 ? void 0 : _userData$user.id;\n      if (companyId) {\n        const allUsers = await getUsers();\n        const filtered = Object.entries(allUsers).map(([id, user]) => ({\n          id,\n          ...user\n        })).filter(user => {\n          var _user$companyIds;\n          return ((_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(comp => comp.companyId === companyId)) && user.id !== currentUserId;\n        });\n        setCompanyUsers(filtered);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const companyId = userData.company.id;\n      const userId = userData.user.id;\n      let data;\n      if (recipientId) {\n        data = await getPrivateMessages(companyId, userId, recipientId);\n\n        // ✅ סימון הודעות כנקראו:\n        await markPrivateSeen(companyId, userId, recipientId, userId);\n      } else {\n        data = await getGroupMessages(companyId);\n      }\n      const messagesArray = data ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp) : [];\n      setMessages(messagesArray);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      toast.error('Failed to load messages.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    const messageData = {\n      senderId: userData.user.id,\n      senderName: userData.user.name || 'Unknown',\n      content: newMessage.trim(),\n      timestamp: Date.now()\n    };\n    try {\n      const companyId = userData.company.id;\n      const userId = userData.user.id;\n      if (recipientId) {\n        await sendPrivateMessage(companyId, userId, recipientId, messageData);\n      } else {\n        await sendGroupMessage(companyId, messageData);\n      }\n      setMessages(prev => [...prev, messageData]);\n      setNewMessage('');\n    } catch (error) {\n      toast.error('Failed to send message.');\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  const isSameDate = (timestamp1, timestamp2) => {\n    const date1 = new Date(timestamp1);\n    const date2 = new Date(timestamp2);\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  };\n  const getUserNameById = id => {\n    const user = companyUsers.find(u => u.id === id);\n    return user ? user.name : 'User';\n  };\n  if (!userData) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 27\n  }, this);\n  const getUserById = id => {\n    return companyUsers.find(u => u.id === id);\n  };\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCAC Chats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: `chat-link ${!recipientId ? 'active-chat' : ''}`,\n            onClick: () => navigate('/chat'),\n            children: \"\\uD83D\\uDFE2 Group Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this), companyUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `chat-link ${recipientId === user.id ? 'active-chat' : ''}`,\n            onClick: () => navigate(`/private-chat/${user.id}`),\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [user.name, unreadStatus[user.id] && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"unread-dot\",\n                children: \" \\uD83D\\uDD34\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 63\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 33\n            }, this)\n          }, user.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: recipientId ? `Chat with ${getUserNameById(recipientId)}` : 'Group Chat'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this), recipientId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-recipient-photo-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: ((_getUserById = getUserById(recipientId)) === null || _getUserById === void 0 ? void 0 : _getUserById.photoData) || '/images/Profile.jpeg',\n            alt: \"User\",\n            className: \"chat-recipient-photo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-messages\",\n            children: [messages.map((msg, index) => {\n              const currentDate = new Date(msg.timestamp);\n              const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n              const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [showDate && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"date-header-wrapper\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"date-header\",\n                    children: currentDate.toLocaleDateString('he-IL', {\n                      weekday: 'short',\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric'\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-right' : 'align-left'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-sender\",\n                      children: msg.senderName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 284,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-content\",\n                      children: msg.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 285,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-time\",\n                      children: new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 286,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 45\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 41\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              placeholder: \"Type a message...\",\n              value: newMessage,\n              onChange: e => setNewMessage(e.target.value),\n              onKeyDown: e => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage();\n                }\n              },\n              rows: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatScreen, \"Ax940GYcLIyW9ROcMDus53mNCds=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ChatScreen;\nexport default ChatScreen;\nvar _c;\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","toast","ToastContainer","getPrivateLastSeen","markPrivateSeen","getGroupMessages","sendGroupMessage","getPrivateMessages","sendPrivateMessage","getUsers","Navbar","Loader","BackgroundWrapper","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatScreen","_s","_getUserById","navigate","recipientId","userData","setUserData","messages","setMessages","newMessage","setNewMessage","isLoading","setIsLoading","messagesEndRef","companyUsers","setCompanyUsers","unreadStatus","setUnreadStatus","loggedUser","JSON","parse","localStorage","getItem","_userData$company","company","id","fetchMessages","_userData$company2","fetchCompanyUsers","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","_userData$company3","length","checkUnreadMessages","companyId","currentUserId","user","statusMap","chatData","Object","values","sort","a","b","timestamp","lastMessage","lastSeen","isUnread","senderId","err","console","error","name","_userData$company4","_userData$user","allUsers","filtered","entries","map","filter","_user$companyIds","companyIds","some","comp","userId","data","messagesArray","handleSendMessage","trim","messageData","senderName","content","Date","now","prev","handleKeyPress","e","key","isSameDate","timestamp1","timestamp2","date1","date2","getFullYear","getMonth","getDate","getUserNameById","find","u","fileName","_jsxFileName","lineNumber","columnNumber","getUserById","children","className","onClick","src","photoData","alt","msg","index","currentDate","prevDate","showDate","toLocaleDateString","weekday","day","month","year","toLocaleTimeString","hour","minute","ref","placeholder","value","onChange","target","onKeyDown","shiftKey","preventDefault","rows","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ChatScreen.js"],"sourcesContent":["// React functions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getPrivateLastSeen, markPrivateSeen, getGroupMessages, sendGroupMessage, getPrivateMessages, sendPrivateMessage } from '../services/chatService';\nimport { getUsers } from '../services/userService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\n\nconst ChatScreen = () => {\n    const navigate = useNavigate();\n    const { recipientId } = useParams();\n\n    const [userData, setUserData] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n\n    const messagesEndRef = useRef(null);\n    const [companyUsers, setCompanyUsers] = useState([]);\n\n    const [unreadStatus, setUnreadStatus] = useState({});\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        if (userData?.company?.id) {\n            fetchMessages();\n        }\n    }, [userData, recipientId]);\n\n    useEffect(() => {\n        if (userData?.company?.id) {\n            fetchCompanyUsers();\n        }\n    }, [userData]);\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    useEffect(() => {\n        if (userData?.company?.id && companyUsers.length > 0) {\n            checkUnreadMessages();\n        }\n    }, [userData, companyUsers]);\n\n    const checkUnreadMessages = async () => {\n        const companyId = userData.company.id;\n        const currentUserId = userData.user.id;\n        const statusMap = {};\n\n        for (const user of companyUsers) {\n            try {\n                const chatData = await getPrivateMessages(companyId, currentUserId, user.id);\n                const messages = chatData\n                    ? Object.values(chatData).sort((a, b) => b.timestamp - a.timestamp)\n                    : [];\n\n                const lastMessage = messages[0];\n                if (!lastMessage) {\n                    statusMap[user.id] = false;\n                    continue;\n                }\n\n                const lastSeen = await getPrivateLastSeen(companyId, currentUserId, user.id, currentUserId);\n\n                // ✅ תנאי נוסף: רק אם ההודעה האחרונה לא נשלחה על ידי המשתמש עצמו\n                const isUnread = (\n                    lastMessage.senderId !== currentUserId &&\n                    (!lastSeen || lastMessage.timestamp > lastSeen)\n                );\n\n                statusMap[user.id] = isUnread;\n            } catch (err) {\n                console.error('Error checking unread status for', user.name, err);\n                statusMap[user.id] = false;\n            }\n        }\n\n        setUnreadStatus(statusMap);\n    };\n\n    useEffect(() => {\n        if (messages.length > 0) {\n            scrollToBottom();\n        }\n    }, [messages]);\n\n    const fetchCompanyUsers = async () => {\n        try {\n            const companyId = userData?.company?.id;\n            const currentUserId = userData?.user?.id;\n\n            if (companyId) {\n                const allUsers = await getUsers();\n                const filtered = Object.entries(allUsers)\n                    .map(([id, user]) => ({ id, ...user }))\n                    .filter((user) =>\n                        user.companyIds?.some((comp) => comp.companyId === companyId) &&\n                        user.id !== currentUserId\n                    );\n                setCompanyUsers(filtered);\n            }\n        } catch (error) {\n            console.error('Error fetching users:', error);\n        }\n    };\n\n    const fetchMessages = async () => {\n        try {\n            const companyId = userData.company.id;\n            const userId = userData.user.id;\n\n            let data;\n            if (recipientId) {\n                data = await getPrivateMessages(companyId, userId, recipientId);\n\n                // ✅ סימון הודעות כנקראו:\n                await markPrivateSeen(companyId, userId, recipientId, userId);\n            } else {\n                data = await getGroupMessages(companyId);\n            }\n\n            const messagesArray = data\n                ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp)\n                : [];\n\n            setMessages(messagesArray);\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n            toast.error('Failed to load messages.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleSendMessage = async () => {\n        if (!newMessage.trim()) return;\n\n        const messageData = {\n            senderId: userData.user.id,\n            senderName: userData.user.name || 'Unknown',\n            content: newMessage.trim(),\n            timestamp: Date.now(),\n        };\n\n        try {\n            const companyId = userData.company.id;\n            const userId = userData.user.id;\n\n            if (recipientId) {\n                await sendPrivateMessage(companyId, userId, recipientId, messageData);\n            } else {\n                await sendGroupMessage(companyId, messageData);\n            }\n\n            setMessages((prev) => [...prev, messageData]);\n            setNewMessage('');\n        } catch (error) {\n            toast.error('Failed to send message.');\n        }\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleSendMessage();\n        }\n    };\n\n    const isSameDate = (timestamp1, timestamp2) => {\n        const date1 = new Date(timestamp1);\n        const date2 = new Date(timestamp2);\n        return (\n            date1.getFullYear() === date2.getFullYear() &&\n            date1.getMonth() === date2.getMonth() &&\n            date1.getDate() === date2.getDate()\n        );\n    };\n\n    const getUserNameById = (id) => {\n        const user = companyUsers.find((u) => u.id === id);\n        return user ? user.name : 'User';\n    };\n\n    if (!userData) return <Loader />;\n\n    const getUserById = (id) => {\n        return companyUsers.find((u) => u.id === id);\n    };\n\n    return (\n        <BackgroundWrapper>\n            <Navbar />\n\n            <div className=\"navbar-placeholder\"></div>\n\n            <div className=\"chat-layout\">\n                {/* Sidebar with user list */}\n                <div className=\"chat-sidebar\">\n                    <h3>💬 Chats</h3>\n                    <ul>\n                        <li\n                            className={`chat-link ${!recipientId ? 'active-chat' : ''}`}\n                            onClick={() => navigate('/chat')}\n                        >\n                            🟢 Group Chat\n                        </li>\n\n                        {companyUsers.map((user) => (\n                            <li\n                                key={user.id}\n                                className={`chat-link ${recipientId === user.id ? 'active-chat' : ''}`}\n                                onClick={() => navigate(`/private-chat/${user.id}`)}\n                            >\n                                <span>\n                                    {user.name}\n                                    {unreadStatus[user.id] && <span className=\"unread-dot\"> 🔴</span>}\n                                </span>\n                            </li>\n                        ))}\n                    </ul>\n\n                </div>\n\n                {/* Main chat area */}\n                <div className=\"chat-main\">\n                    <h1>{recipientId ? `Chat with ${getUserNameById(recipientId)}` : 'Group Chat'}</h1>\n                    {recipientId && (\n                        <div className=\"chat-recipient-photo-wrapper\">\n                            <img\n                                src={getUserById(recipientId)?.photoData || '/images/Profile.jpeg'}\n                                alt=\"User\"\n                                className=\"chat-recipient-photo\"\n                            />\n                        </div>\n                    )}\n\n                    {isLoading ? (\n                        <Loader />\n                    ) : (\n                        <>\n                            <div className=\"chat-messages\">\n                                {messages.map((msg, index) => {\n                                    const currentDate = new Date(msg.timestamp);\n                                    const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n                                    const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n\n                                    return (\n                                        <React.Fragment key={index}>\n                                            {showDate && (\n                                                <div className=\"date-header-wrapper\">\n                                                    <div className=\"date-header\">\n                                                        {currentDate.toLocaleDateString('he-IL', {\n                                                            weekday: 'short',\n                                                            day: '2-digit',\n                                                            month: '2-digit',\n                                                            year: 'numeric',\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            )}\n                                            <div className={`chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-right' : 'align-left'}`}>\n                                                <div className={`chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`}>\n                                                    <div className=\"chat-sender\">{msg.senderName}</div>\n                                                    <div className=\"chat-content\">{msg.content}</div>\n                                                    <div className=\"chat-time\">\n                                                        {new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                                                            hour: '2-digit',\n                                                            minute: '2-digit',\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </React.Fragment>\n                                    );\n                                })}\n                                <div ref={messagesEndRef} />\n                            </div>\n\n                            <div className=\"chat-input\">\n                                    <textarea\n                                        placeholder=\"Type a message...\"\n                                        value={newMessage}\n                                        onChange={(e) => setNewMessage(e.target.value)}\n                                        onKeyDown={(e) => {\n                                            if (e.key === 'Enter' && !e.shiftKey) {\n                                                e.preventDefault();\n                                                handleSendMessage();\n                                            }\n                                        }}\n                                        rows={2}\n                                    />\n\n                                <button onClick={handleSendMessage}>Send</button>\n                            </div>\n                        </>\n                    )}\n                </div>\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default ChatScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}