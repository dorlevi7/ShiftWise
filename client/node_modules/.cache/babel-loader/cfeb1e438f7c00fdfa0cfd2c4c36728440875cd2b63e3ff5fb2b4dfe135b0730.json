{"ast":null,"code":"import { getUsers } from '../services/userService';\nimport { fileToBase64 } from './fileUtils';\n\n// Prepare updated user data, including photo in Base64 if provided\nexport const prepareUpdatedUserData = async user => {\n  const photoData = user.photoFile ? await fileToBase64(user.photoFile) // Convert uploaded photo file to Base64\n  : user.photoData || ''; // Use existing photo or fallback to empty string\n\n  return {\n    name: user.name,\n    email: user.email,\n    phone: user.phone,\n    role: user.role,\n    photoData\n  };\n};\n\n// Retrieve logged-in user from localStorage; redirect if not found\nexport const getLoggedInUser = navigate => {\n  const loggedUser = JSON.parse(localStorage.getItem('user'));\n  if (!loggedUser) {\n    navigate('/'); // Redirect to login screen\n    return null;\n  }\n  return loggedUser;\n};\n\n// Fetch user object from database using user ID\nexport const fetchUserFromDB = async userId => {\n  try {\n    const allUsers = await getUsers(); // Get all users from DB\n    const usersWithIds = Object.entries(allUsers).map(([id, user]) => ({\n      id,\n      ...user\n    }));\n    return usersWithIds.find(u => u.id === userId); // Find user by ID\n  } catch (error) {\n    console.error(\"❌ Error fetching user from DB:\", error);\n    return null;\n  }\n};\nexport const updateUserInLocalStorage = (userData, updated) => {\n  const updatedUser = {\n    ...userData,\n    user: {\n      ...userData.user,\n      name: updated.name,\n      email: updated.email,\n      phone: updated.phone,\n      role: updated.role,\n      photoData: updated.photoData\n    }\n  };\n  localStorage.setItem('user', JSON.stringify(updatedUser));\n};","map":{"version":3,"names":["getUsers","fileToBase64","prepareUpdatedUserData","user","photoData","photoFile","name","email","phone","role","getLoggedInUser","navigate","loggedUser","JSON","parse","localStorage","getItem","fetchUserFromDB","userId","allUsers","usersWithIds","Object","entries","map","id","find","u","error","console","updateUserInLocalStorage","userData","updated","updatedUser","setItem","stringify"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/utils/userUtils.js"],"sourcesContent":["import { getUsers } from '../services/userService';\nimport { fileToBase64 } from './fileUtils';\n\n// Prepare updated user data, including photo in Base64 if provided\nexport const prepareUpdatedUserData = async (user) => {\n    const photoData = user.photoFile\n        ? await fileToBase64(user.photoFile) // Convert uploaded photo file to Base64\n        : user.photoData || ''; // Use existing photo or fallback to empty string\n\n    return {\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        role: user.role,\n        photoData,\n    };\n};\n\n// Retrieve logged-in user from localStorage; redirect if not found\nexport const getLoggedInUser = (navigate) => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n        navigate('/'); // Redirect to login screen\n        return null;\n    }\n    return loggedUser;\n};\n\n// Fetch user object from database using user ID\nexport const fetchUserFromDB = async (userId) => {\n    try {\n        const allUsers = await getUsers(); // Get all users from DB\n        const usersWithIds = Object.entries(allUsers).map(([id, user]) => ({ id, ...user }));\n        return usersWithIds.find((u) => u.id === userId); // Find user by ID\n    } catch (error) {\n        console.error(\"❌ Error fetching user from DB:\", error);\n        return null;\n    }\n};\n\nexport const updateUserInLocalStorage = (userData, updated) => {\n    const updatedUser = {\n        ...userData,\n        user: {\n            ...userData.user,\n            name: updated.name,\n            email: updated.email,\n            phone: updated.phone,\n            role: updated.role,\n            photoData: updated.photoData\n        }\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,YAAY,QAAQ,aAAa;;AAE1C;AACA,OAAO,MAAMC,sBAAsB,GAAG,MAAOC,IAAI,IAAK;EAClD,MAAMC,SAAS,GAAGD,IAAI,CAACE,SAAS,GAC1B,MAAMJ,YAAY,CAACE,IAAI,CAACE,SAAS,CAAC,CAAC;EAAA,EACnCF,IAAI,CAACC,SAAS,IAAI,EAAE,CAAC,CAAC;;EAE5B,OAAO;IACHE,IAAI,EAAEH,IAAI,CAACG,IAAI;IACfC,KAAK,EAAEJ,IAAI,CAACI,KAAK;IACjBC,KAAK,EAAEL,IAAI,CAACK,KAAK;IACjBC,IAAI,EAAEN,IAAI,CAACM,IAAI;IACfL;EACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMM,eAAe,GAAIC,QAAQ,IAAK;EACzC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EAC3D,IAAI,CAACJ,UAAU,EAAE;IACbD,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACf,OAAO,IAAI;EACf;EACA,OAAOC,UAAU;AACrB,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAG,MAAOC,MAAM,IAAK;EAC7C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMnB,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnC,MAAMoB,YAAY,GAAGC,MAAM,CAACC,OAAO,CAACH,QAAQ,CAAC,CAACI,GAAG,CAAC,CAAC,CAACC,EAAE,EAAErB,IAAI,CAAC,MAAM;MAAEqB,EAAE;MAAE,GAAGrB;IAAK,CAAC,CAAC,CAAC;IACpF,OAAOiB,YAAY,CAACK,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACF,EAAE,KAAKN,MAAM,CAAC,CAAC,CAAC;EACtD,CAAC,CAAC,OAAOS,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,IAAI;EACf;AACJ,CAAC;AAED,OAAO,MAAME,wBAAwB,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;EAC3D,MAAMC,WAAW,GAAG;IAChB,GAAGF,QAAQ;IACX3B,IAAI,EAAE;MACF,GAAG2B,QAAQ,CAAC3B,IAAI;MAChBG,IAAI,EAAEyB,OAAO,CAACzB,IAAI;MAClBC,KAAK,EAAEwB,OAAO,CAACxB,KAAK;MACpBC,KAAK,EAAEuB,OAAO,CAACvB,KAAK;MACpBC,IAAI,EAAEsB,OAAO,CAACtB,IAAI;MAClBL,SAAS,EAAE2B,OAAO,CAAC3B;IACvB;EACJ,CAAC;EACDW,YAAY,CAACkB,OAAO,CAAC,MAAM,EAAEpB,IAAI,CAACqB,SAAS,CAACF,WAAW,CAAC,CAAC;AAC7D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}