{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ChatScreen.js\",\n  _s = $RefreshSig$();\n// React functions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getGroupMessages, sendGroupMessage, getPrivateMessages, sendPrivateMessage } from '../services/chatService';\nimport { getUsers } from '../services/userService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    recipientId\n  } = useParams();\n  const [userData, setUserData] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const messagesEndRef = useRef(null);\n  const [companyUsers, setCompanyUsers] = useState([]);\n  const [unreadMessages, setUnreadMessages] = useState({});\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n    }\n  }, [navigate]);\n\n  // קריאה להודעות בכל פעם שrecipientId או userData משתנים\n  useEffect(() => {\n    var _userData$company;\n    if (userData !== null && userData !== void 0 && (_userData$company = userData.company) !== null && _userData$company !== void 0 && _userData$company.id) {\n      fetchMessages();\n    }\n  }, [userData, recipientId]);\n\n  // קריאה נפרדת לרשימת המשתמשים רק פעם אחת כשיש userData\n  useEffect(() => {\n    var _userData$company2;\n    if (userData !== null && userData !== void 0 && (_userData$company2 = userData.company) !== null && _userData$company2 !== void 0 && _userData$company2.id) {\n      fetchCompanyUsers();\n    }\n  }, [userData]);\n  const fetchCompanyUsers = async () => {\n    try {\n      var _userData$company3, _userData$user;\n      const companyId = userData === null || userData === void 0 ? void 0 : (_userData$company3 = userData.company) === null || _userData$company3 === void 0 ? void 0 : _userData$company3.id;\n      const currentUserId = userData === null || userData === void 0 ? void 0 : (_userData$user = userData.user) === null || _userData$user === void 0 ? void 0 : _userData$user.id;\n      if (companyId) {\n        const allUsers = await getUsers();\n        const filtered = Object.entries(allUsers).map(([id, user]) => ({\n          id,\n          ...user\n        })).filter(user => {\n          var _user$companyIds;\n          return ((_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(comp => comp.companyId === companyId)) && user.id !== currentUserId;\n        });\n        setCompanyUsers(filtered);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const companyId = userData.company.id;\n      const userId = userData.user.id;\n      let data;\n      if (recipientId) {\n        data = await getPrivateMessages(companyId, userId, recipientId);\n      } else {\n        data = await getGroupMessages(companyId);\n      }\n      const messagesArray = data ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp) : [];\n      setMessages(messagesArray);\n\n      // 🔔 חישוב הודעות שלא נקראו (רק בצ'אט קבוצתי)\n      if (!recipientId && companyUsers.length > 0) {\n        const unreadMap = {};\n        companyUsers.forEach(user => {\n          // דלג על המשתמש הנוכחי – לא צריך להראות לו תווית ליד שמו\n          if (user.id === userId) return;\n          const hasUnread = messagesArray.some(msg => {\n            var _msg$readBy;\n            return msg.senderId === user.id && !((_msg$readBy = msg.readBy) !== null && _msg$readBy !== void 0 && _msg$readBy.includes(userId));\n          });\n          unreadMap[user.id] = hasUnread;\n        });\n        setUnreadMessages(unreadMap); // שמור ב-state\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      toast.error('Failed to load messages.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    const messageData = {\n      senderId: userData.user.id,\n      senderName: userData.user.name || 'Unknown',\n      content: newMessage.trim(),\n      timestamp: Date.now()\n    };\n    try {\n      const companyId = userData.company.id;\n      const userId = userData.user.id;\n      if (recipientId) {\n        await sendPrivateMessage(companyId, userId, recipientId, messageData);\n      } else {\n        await sendGroupMessage(companyId, messageData);\n      }\n      setMessages(prev => [...prev, messageData]);\n      setNewMessage('');\n      scrollToBottom();\n    } catch (error) {\n      toast.error('Failed to send message.');\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const isSameDate = (timestamp1, timestamp2) => {\n    const date1 = new Date(timestamp1);\n    const date2 = new Date(timestamp2);\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  };\n  const getUserNameById = id => {\n    const user = companyUsers.find(u => u.id === id);\n    return user ? user.name : 'משתמש';\n  };\n  if (!userData) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCAC \\u05E9\\u05D9\\u05D7\\u05D5\\u05EA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: `chat-link ${!recipientId ? 'active-chat' : ''}`,\n            onClick: () => navigate('/chat'),\n            children: \"\\uD83D\\uDFE2 \\u05E6'\\u05D0\\u05D8 \\u05E7\\u05D1\\u05D5\\u05E6\\u05EA\\u05D9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), companyUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"chat-link\",\n            onClick: () => navigate(`/private-chat/${user.id}`),\n            children: [unreadMessages[user.id] && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unread-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 61\n            }, this), user.name]\n          }, user.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: recipientId ? `שיחה עם ${getUserNameById(recipientId)}` : 'צ\\'אט קבוצתי'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-messages\",\n            children: [messages.map((msg, index) => {\n              const currentDate = new Date(msg.timestamp);\n              const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n              const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [showDate && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"date-header-wrapper\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"date-header\",\n                    children: currentDate.toLocaleDateString('he-IL', {\n                      weekday: 'short',\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric'\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 230,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-right' : 'align-left'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-sender\",\n                      children: msg.senderName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 242,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-content\",\n                      children: msg.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 243,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-time\",\n                      children: new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 244,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 45\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 41\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type a message...\",\n              value: newMessage,\n              onChange: e => setNewMessage(e.target.value),\n              onKeyDown: handleKeyPress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatScreen, \"5QDzgenTS6C7FSl16i8TfvJh3+M=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ChatScreen;\nexport default ChatScreen;\nvar _c;\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","toast","ToastContainer","getGroupMessages","sendGroupMessage","getPrivateMessages","sendPrivateMessage","getUsers","Navbar","Loader","BackgroundWrapper","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatScreen","_s","navigate","recipientId","userData","setUserData","messages","setMessages","newMessage","setNewMessage","isLoading","setIsLoading","messagesEndRef","companyUsers","setCompanyUsers","unreadMessages","setUnreadMessages","loggedUser","JSON","parse","localStorage","getItem","_userData$company","company","id","fetchMessages","_userData$company2","fetchCompanyUsers","_userData$company3","_userData$user","companyId","currentUserId","user","allUsers","filtered","Object","entries","map","filter","_user$companyIds","companyIds","some","comp","error","console","userId","data","messagesArray","values","sort","a","b","timestamp","length","unreadMap","forEach","hasUnread","msg","_msg$readBy","senderId","readBy","includes","handleSendMessage","trim","messageData","senderName","name","content","Date","now","prev","scrollToBottom","handleKeyPress","e","key","_messagesEndRef$curre","current","scrollIntoView","behavior","isSameDate","timestamp1","timestamp2","date1","date2","getFullYear","getMonth","getDate","getUserNameById","find","u","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onClick","index","currentDate","prevDate","showDate","toLocaleDateString","weekday","day","month","year","toLocaleTimeString","hour","minute","ref","type","placeholder","value","onChange","target","onKeyDown","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ChatScreen.js"],"sourcesContent":["// React functions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getGroupMessages, sendGroupMessage, getPrivateMessages, sendPrivateMessage } from '../services/chatService';\nimport { getUsers } from '../services/userService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\n\nconst ChatScreen = () => {\n    const navigate = useNavigate();\n    const { recipientId } = useParams();\n\n    const [userData, setUserData] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n\n    const messagesEndRef = useRef(null);\n    const [companyUsers, setCompanyUsers] = useState([]);\n    const [unreadMessages, setUnreadMessages] = useState({});\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n        }\n    }, [navigate]);\n\n    // קריאה להודעות בכל פעם שrecipientId או userData משתנים\n    useEffect(() => {\n        if (userData?.company?.id) {\n            fetchMessages();\n        }\n    }, [userData, recipientId]);\n\n    // קריאה נפרדת לרשימת המשתמשים רק פעם אחת כשיש userData\n    useEffect(() => {\n        if (userData?.company?.id) {\n            fetchCompanyUsers();\n        }\n    }, [userData]);\n\n\n    const fetchCompanyUsers = async () => {\n        try {\n            const companyId = userData?.company?.id;\n            const currentUserId = userData?.user?.id;\n\n            if (companyId) {\n                const allUsers = await getUsers();\n                const filtered = Object.entries(allUsers)\n                    .map(([id, user]) => ({ id, ...user }))\n                    .filter((user) =>\n                        user.companyIds?.some((comp) => comp.companyId === companyId) &&\n                        user.id !== currentUserId\n                    );\n                setCompanyUsers(filtered);\n            }\n        } catch (error) {\n            console.error('Error fetching users:', error);\n        }\n    };\n\n    const fetchMessages = async () => {\n        try {\n            const companyId = userData.company.id;\n            const userId = userData.user.id;\n\n            let data;\n            if (recipientId) {\n                data = await getPrivateMessages(companyId, userId, recipientId);\n            } else {\n                data = await getGroupMessages(companyId);\n            }\n\n            const messagesArray = data\n                ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp)\n                : [];\n\n            setMessages(messagesArray);\n\n            // 🔔 חישוב הודעות שלא נקראו (רק בצ'אט קבוצתי)\n            if (!recipientId && companyUsers.length > 0) {\n                const unreadMap = {};\n\n                companyUsers.forEach((user) => {\n                    // דלג על המשתמש הנוכחי – לא צריך להראות לו תווית ליד שמו\n                    if (user.id === userId) return;\n\n                    const hasUnread = messagesArray.some(\n                        (msg) => msg.senderId === user.id && !(msg.readBy?.includes(userId))\n                    );\n\n                    unreadMap[user.id] = hasUnread;\n                });\n\n                setUnreadMessages(unreadMap); // שמור ב-state\n            }\n\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n            toast.error('Failed to load messages.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleSendMessage = async () => {\n        if (!newMessage.trim()) return;\n\n        const messageData = {\n            senderId: userData.user.id,\n            senderName: userData.user.name || 'Unknown',\n            content: newMessage.trim(),\n            timestamp: Date.now(),\n        };\n\n        try {\n            const companyId = userData.company.id;\n            const userId = userData.user.id;\n\n            if (recipientId) {\n                await sendPrivateMessage(companyId, userId, recipientId, messageData);\n            } else {\n                await sendGroupMessage(companyId, messageData);\n            }\n\n            setMessages((prev) => [...prev, messageData]);\n            setNewMessage('');\n            scrollToBottom();\n        } catch (error) {\n            toast.error('Failed to send message.');\n        }\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleSendMessage();\n        }\n    };\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    useEffect(scrollToBottom, [messages]);\n\n    const isSameDate = (timestamp1, timestamp2) => {\n        const date1 = new Date(timestamp1);\n        const date2 = new Date(timestamp2);\n        return (\n            date1.getFullYear() === date2.getFullYear() &&\n            date1.getMonth() === date2.getMonth() &&\n            date1.getDate() === date2.getDate()\n        );\n    };\n\n    const getUserNameById = (id) => {\n        const user = companyUsers.find((u) => u.id === id);\n        return user ? user.name : 'משתמש';\n    };\n\n    if (!userData) return <Loader />;\n\n    return (\n        <BackgroundWrapper>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div>\n\n            <div className=\"chat-layout\">\n                {/* Sidebar with user list */}\n                <div className=\"chat-sidebar\">\n                    <h3>💬 שיחות</h3>\n                    <ul>\n                        <li\n                            className={`chat-link ${!recipientId ? 'active-chat' : ''}`}\n                            onClick={() => navigate('/chat')}\n                        >\n                            🟢 צ'אט קבוצתי\n                        </li>\n\n                        {companyUsers.map((user) => (\n                            <li\n                                key={user.id}\n                                className=\"chat-link\"\n                                onClick={() => navigate(`/private-chat/${user.id}`)}\n                            >\n                                {unreadMessages[user.id] && <span className=\"unread-dot\"></span>}\n                                {user.name}\n                            </li>\n                        ))}\n\n                    </ul>\n\n                </div>\n\n                {/* Main chat area */}\n                <div className=\"chat-main\">\n                    <h1>{recipientId ? `שיחה עם ${getUserNameById(recipientId)}` : 'צ\\'אט קבוצתי'}</h1>\n\n                    {isLoading ? (\n                        <Loader />\n                    ) : (\n                        <>\n                            <div className=\"chat-messages\">\n                                {messages.map((msg, index) => {\n                                    const currentDate = new Date(msg.timestamp);\n                                    const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n                                    const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n\n                                    return (\n                                        <React.Fragment key={index}>\n                                            {showDate && (\n                                                <div className=\"date-header-wrapper\">\n                                                    <div className=\"date-header\">\n                                                        {currentDate.toLocaleDateString('he-IL', {\n                                                            weekday: 'short',\n                                                            day: '2-digit',\n                                                            month: '2-digit',\n                                                            year: 'numeric',\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            )}\n                                            <div className={`chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-right' : 'align-left'}`}>\n                                                <div className={`chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`}>\n                                                    <div className=\"chat-sender\">{msg.senderName}</div>\n                                                    <div className=\"chat-content\">{msg.content}</div>\n                                                    <div className=\"chat-time\">\n                                                        {new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                                                            hour: '2-digit',\n                                                            minute: '2-digit',\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </React.Fragment>\n                                    );\n                                })}\n                                <div ref={messagesEndRef} />\n                            </div>\n\n                            <div className=\"chat-input\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Type a message...\"\n                                    value={newMessage}\n                                    onChange={(e) => setNewMessage(e.target.value)}\n                                    onKeyDown={handleKeyPress}\n                                />\n                                <button onClick={handleSendMessage}>Send</button>\n                            </div>\n                        </>\n                    )}\n                </div>\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default ChatScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}