{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa';\nimport { ThreeDots } from 'react-loader-spinner';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\nimport { updateAvailabilityStatus, getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets, fetchPublishStatus, savePublishStatus, saveEditStatus, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { sendNotification } from '../services/notificationService';\nimport { useLocation } from 'react-router-dom';\nimport { FaCalendarCheck, FaEdit } from 'react-icons/fa';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  var _users$secondSelected, _loggedInUser$user3, _availability$shiftOf, _availability$shiftOf2, _availability$shiftOf3, _users$shiftOfferPara, _users$shiftOfferPara2, _users$shiftOfferPara3, _users$shiftOfferPara4, _users$shiftOfferPara5;\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const initialWeekOffset = parseInt(queryParams.get('weekOffset'), 10) || 0;\n  const [weekOffset, setWeekOffset] = useState(initialWeekOffset);\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n  const [highlightedUser, setHighlightedUser] = useState(null);\n  const [selectedUserNotes, setSelectedUserNotes] = useState('');\n  const [shiftCounts, setShiftCounts] = useState({});\n  const [necessaryEmployees, setNecessaryEmployees] = useState({});\n  const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n  const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n  const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n  const [totalWeeklyTargets, setTotalWeeklyTargets] = useState(0);\n  const [isPublished, setIsPublished] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isEditAllowed, setIsEditAllowed] = useState(false);\n  const [mostCriticalShifts, setMostCriticalShifts] = useState([]);\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n  const [isConfirmingPublish, setIsConfirmingPublish] = useState(false);\n  const [isConfirmingEdit, setIsConfirmingEdit] = useState(false);\n  const [isWarningVisible, setIsWarningVisible] = useState(false);\n  const [isViewingAsEmployee, setIsViewingAsEmployee] = useState(false);\n  const [selectedShiftToSwap, setSelectedShiftToSwap] = useState(null);\n  const [offerToUserId, setOfferToUserId] = useState('');\n  const [shiftOfferParams, setShiftOfferParams] = useState(null);\n  const [hasCheckedShiftOffer, setHasCheckedShiftOffer] = useState(false);\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [secondSelectedShift, setSecondSelectedShift] = useState(null);\n  useEffect(() => {\n    const userFromStorage = JSON.parse(localStorage.getItem('user'));\n    setLoggedInUser(userFromStorage);\n    setIsAdmin((userFromStorage === null || userFromStorage === void 0 ? void 0 : userFromStorage.user.role) === 'admin');\n    setHighlightedUser(userFromStorage === null || userFromStorage === void 0 ? void 0 : userFromStorage.user.id);\n  }, []);\n  useEffect(() => {\n    if (isPublished && !isScheduleFullyStaffed()) {\n      setIsWarningVisible(true);\n    } else {\n      setIsWarningVisible(false);\n    }\n  }, [availability, necessaryEmployees, isPublished]);\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת כל הנתונים הדרושים\n        const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers(), getNecessaryEmployees(companyId, weekKey), getWeeklyShiftTargets(companyId, weekKey) // קריאה לנתוני weeklyShiftTargets\n        ]);\n\n        // עדכון ה-states בהתאם לנתונים שהתקבלו מהשרת\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n        setNecessaryEmployees(necessaryEmployeesData || {});\n        calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n\n        // הגדרת ערכי ברירת מחדל ל-weeklyShiftTargets\n        const updatedWeeklyTargets = {\n          ...weeklyTargetsData\n        };\n        Object.values(usersData).forEach(user => {\n          // בדיקה אם user.id קיים\n          if (!(user !== null && user !== void 0 && user.id)) {\n            console.warn(\"User without ID found:\", user);\n            return; // דלג על משתמשים ללא ID\n          }\n          if (!updatedWeeklyTargets[user.id]) {\n            updatedWeeklyTargets[user.id] = 0; // ערך ברירת מחדל\n          }\n        });\n        setWeeklyShiftTargets(updatedWeeklyTargets);\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeeklyShiftTargetChange = async (userId, value) => {\n    const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n    if (parsedValue < shiftCounts[userId]) {\n      console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n      return; // עצירת השינוי\n    }\n    const updatedTargets = {\n      ...weeklyShiftTargets,\n      [userId]: parsedValue\n    };\n    setWeeklyShiftTargets(updatedTargets);\n    const total = Object.values(updatedTargets).reduce((sum, target) => sum + (target || 0), 0);\n    setTotalWeeklyTargets(total);\n    const cleanedTargets = Object.fromEntries(Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees') // סינון המפתח הלא רצוי\n    );\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n    } catch (error) {\n      console.error('Failed to save weekly shift targets:', error);\n    }\n  };\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = (status, userId, shift, day) => {\n    var _necessaryEmployees$d;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d = necessaryEmployees[day]) === null || _necessaryEmployees$d === void 0 ? void 0 : _necessaryEmployees$d[shift]) || 0;\n    if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n    }\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n    if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n    }\n    if (highlightedUser === userId) {\n      return status === 'disabled' ? 'status-disabled highlighted-user' : `highlighted-user ${status}`;\n    }\n    if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled'; // הכפתורים יהיו חסומים אם היעד השבועי הושג\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleEmployeeClick = async userId => {\n    if (highlightedUser === userId) {\n      setHighlightedUser(null);\n      setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n      return;\n    }\n    setSelectedUserNotes('');\n    setHighlightedUser(userId);\n    if (currentCompany && userId) {\n      try {\n        var _availabilityData$use;\n        const weekKey = calculateWeekKey(weekOffset);\n        const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n        const userNotes = (availabilityData === null || availabilityData === void 0 ? void 0 : (_availabilityData$use = availabilityData[userId]) === null || _availabilityData$use === void 0 ? void 0 : _availabilityData$use.notes) || 'No notes available.';\n        setSelectedUserNotes(userNotes);\n      } catch (err) {\n        console.error('Failed to fetch notes:', err);\n        setSelectedUserNotes('Error fetching notes.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (Object.keys(availability).length > 0) {\n      updateShiftCounts();\n    }\n  }, [availability]);\n  const updateShiftCounts = () => {\n    const counts = {};\n    let totalShifts = 0; // משתנה לספירת המשמרות הכוללות שהוקצו\n\n    Object.entries(availability).forEach(([userId, shifts]) => {\n      const userShiftCount = Object.values(shifts).reduce((sum, dayShifts) => sum + Object.values(dayShifts).filter(shift => shift.status === 'selected').length, 0);\n      counts[userId] = userShiftCount;\n      totalShifts += userShiftCount; // הוספה למספר הכולל\n    });\n    setShiftCounts(counts);\n    setTotalAssignedShifts(totalShifts); // עדכון state של סך כל המשמרות\n  };\n  useEffect(() => {\n    const saveNecessaryEmployeesToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n        if (Object.keys(necessaryEmployees).length > 0) {\n          await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n        }\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n    if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n      saveNecessaryEmployeesToDB();\n    }\n  }, [necessaryEmployees, currentCompany]);\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    var _necessaryEmployees$d2;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift2;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift2 = userData[shift]) === null || _userData$shift2 === void 0 ? void 0 : _userData$shift2[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d2 = necessaryEmployees[day]) === null || _necessaryEmployees$d2 === void 0 ? void 0 : _necessaryEmployees$d2[shift]) || 0;\n    if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n      return;\n    }\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n    if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n      return;\n    }\n    if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n      setAvailability(updatedAvailability);\n      updateShiftCounts();\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  const employeesWithAvailability = Object.entries(users).filter(([userId]) => availability[userId] && Object.values(availability[userId]).some(shifts => Object.values(shifts).some(shift => shift.status === 'selected' || shift.status === 'default'))).sort(([userIdA], [userIdB]) => {\n    var _users$userIdA, _users$userIdA$name, _users$userIdB, _users$userIdB$name;\n    const nameA = ((_users$userIdA = users[userIdA]) === null || _users$userIdA === void 0 ? void 0 : (_users$userIdA$name = _users$userIdA.name) === null || _users$userIdA$name === void 0 ? void 0 : _users$userIdA$name.toLowerCase()) || '';\n    const nameB = ((_users$userIdB = users[userIdB]) === null || _users$userIdB === void 0 ? void 0 : (_users$userIdB$name = _users$userIdB.name) === null || _users$userIdB$name === void 0 ? void 0 : _users$userIdB$name.toLowerCase()) || '';\n    return nameA.localeCompare(nameB); // מיון אלפביתי לפי שם\n  });\n  const handleNecessaryEmployeesChange = (day, shift, value) => {\n    const updatedNecessaryEmployees = {\n      ...necessaryEmployees\n    };\n    if (!updatedNecessaryEmployees[day]) {\n      updatedNecessaryEmployees[day] = {};\n    }\n    const parsedValue = parseInt(value, 10) || 0;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift3;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift3 = userData[shift]) === null || _userData$shift3 === void 0 ? void 0 : _userData$shift3[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    if (parsedValue < selectedEmployeesCount) {\n      return; // עצירת השינוי\n    }\n    updatedNecessaryEmployees[day][shift] = parsedValue;\n    setNecessaryEmployees(updatedNecessaryEmployees);\n    calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n    const saveToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n        await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n    saveToDB();\n  };\n  const calculateTotalNecessaryEmployees = necessaryEmployeesData => {\n    let total = 0;\n    Object.values(necessaryEmployeesData).forEach(dayData => {\n      Object.values(dayData).forEach(shiftCount => {\n        total += shiftCount || 0;\n      });\n    });\n    setTotalNecessaryEmployees(total);\n  };\n  const calculateTotalAssignedShifts = shiftCounts => {\n    const total = Object.values(shiftCounts).reduce((sum, count) => sum + count, 0);\n    setTotalAssignedShifts(total);\n  };\n  useEffect(() => {\n    const total = Object.values(weeklyShiftTargets).reduce((sum, target) => sum + (target || 0), 0);\n    setTotalWeeklyTargets(total);\n  }, [weeklyShiftTargets]);\n  const togglePublishStatus = async () => {\n    if (!isPublished && !isScheduleFullyStaffed()) {\n      alert('Cannot publish schedule: not all shifts are fully staffed.');\n      return;\n    }\n    try {\n      const newStatus = !isPublished;\n      const weekKey = calculateWeekKey(weekOffset);\n      await savePublishStatus(currentCompany, weekKey, newStatus);\n      if (newStatus) {\n        const employeeList = Object.entries(users).filter(([_, u]) => u.role === 'employee');\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() + weekOffset * 7 - startDate.getDay());\n        const weekRange = calculateWeekRange(weekOffset);\n        const formattedStart = startDate.toISOString().slice(0, 10); // YYYY-MM-DD\n        const notificationLink = `/schedule?weekOffset=${weekOffset}`;\n        for (const [employeeId] of employeeList) {\n          await sendNotification(currentCompany, employeeId, `Weekly schedule for ${weekRange} has been published.`, notificationLink);\n        }\n      }\n      setIsPublished(newStatus);\n    } catch (error) {\n      console.error('Failed to toggle publish status:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchPublishStatusFromDB = async () => {\n      try {\n        var _status$status;\n        const weekKey = calculateWeekKey(weekOffset);\n        const status = await fetchPublishStatus(currentCompany, weekKey);\n\n        // השתמש בערך שבתוך המפתח 'status' ולא באובייקט כולו\n        setIsPublished((_status$status = status === null || status === void 0 ? void 0 : status.status) !== null && _status$status !== void 0 ? _status$status : false); // True or False\n      } catch (error) {\n        console.error('Failed to fetch publish status:', error);\n      }\n    };\n    if (currentCompany) {\n      fetchPublishStatusFromDB();\n    }\n  }, [currentCompany, weekOffset]);\n  const isScheduleFullyStaffed = () => {\n    for (const day of Object.keys(necessaryEmployees || {})) {\n      for (const shift of Object.keys(necessaryEmployees[day] || {})) {\n        const requiredCount = necessaryEmployees[day][shift] || 0;\n        const selectedCount = Object.entries(availability).filter(([_, userData]) => {\n          var _userData$shift4;\n          const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift4 = userData[shift]) === null || _userData$shift4 === void 0 ? void 0 : _userData$shift4[day];\n          return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n        }).length;\n        if (selectedCount !== requiredCount) {\n          return false; // לפחות משמרת אחת אינה מלאה\n        }\n      }\n    }\n    return true; // כל המשמרות מלאות\n  };\n  const isPublishButtonDisabled = !isScheduleFullyStaffed() && !isPublished;\n  const hasWeeklyNotes = userId => {\n    const userAvailability = availability[userId];\n    return userAvailability && userAvailability.notes && userAvailability.notes.trim() !== '';\n  };\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    setIsAdmin((loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.role) === 'admin');\n    setHighlightedUser(loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.id); // סימון המשתמש הנוכחי\n  }, []);\n  const toggleEditStatus = async () => {\n    try {\n      const newStatus = !isEditAllowed;\n      const weekKey = calculateWeekKey(weekOffset);\n      await saveEditStatus(currentCompany, weekKey, newStatus);\n      setIsEditAllowed(newStatus);\n    } catch (error) {\n      console.error('Failed to toggle edit status:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchEditStatusFromDB = async () => {\n      try {\n        var _status$isEditAllowed;\n        const weekKey = calculateWeekKey(weekOffset);\n        const status = await fetchEditStatus(currentCompany, weekKey);\n        setIsEditAllowed((_status$isEditAllowed = status === null || status === void 0 ? void 0 : status.isEditAllowed) !== null && _status$isEditAllowed !== void 0 ? _status$isEditAllowed : false); // ברירת מחדל ל-false אם אין מידע\n      } catch (error) {\n        console.error('Failed to fetch edit status:', error);\n      }\n    };\n    if (currentCompany) {\n      fetchEditStatusFromDB();\n    }\n  }, [currentCompany, weekOffset]);\n  const calculateShiftCriticality = (day, shift) => {\n    var _necessaryEmployees$d3;\n    const necessary = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d3 = necessaryEmployees[day]) === null || _necessaryEmployees$d3 === void 0 ? void 0 : _necessaryEmployees$d3[shift]) || 0;\n    const selected = Object.values(availability).filter(userData => {\n      var _userData$shift5, _userData$shift5$day;\n      return (userData === null || userData === void 0 ? void 0 : (_userData$shift5 = userData[shift]) === null || _userData$shift5 === void 0 ? void 0 : (_userData$shift5$day = _userData$shift5[day]) === null || _userData$shift5$day === void 0 ? void 0 : _userData$shift5$day.status) === 'selected';\n    }).length;\n    const defaults = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift6, _userData$shift6$day, _userData$shift7, _userData$shift7$day;\n      const status = userData === null || userData === void 0 ? void 0 : (_userData$shift6 = userData[shift]) === null || _userData$shift6 === void 0 ? void 0 : (_userData$shift6$day = _userData$shift6[day]) === null || _userData$shift6$day === void 0 ? void 0 : _userData$shift6$day.status;\n      return (userData === null || userData === void 0 ? void 0 : (_userData$shift7 = userData[shift]) === null || _userData$shift7 === void 0 ? void 0 : (_userData$shift7$day = _userData$shift7[day]) === null || _userData$shift7$day === void 0 ? void 0 : _userData$shift7$day.isAvailable) && status !== 'selected' && status !== 'disabled';\n    }).length;\n    if (necessary === selected) return 0; // משמרת מלאה אינה קריטית\n\n    return (necessary - selected) / Math.pow(defaults + 1, 2);\n  };\n  const findMostCriticalShifts = () => {\n    let highestCriticality = -Infinity;\n    let criticalShifts = [];\n    Object.keys(necessaryEmployees || {}).forEach(day => {\n      Object.keys(necessaryEmployees[day] || {}).forEach(shift => {\n        var _necessaryEmployees$d4;\n        const criticality = calculateShiftCriticality(day, shift);\n        const necessary = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d4 = necessaryEmployees[day]) === null || _necessaryEmployees$d4 === void 0 ? void 0 : _necessaryEmployees$d4[shift]) || 0;\n        const selected = Object.values(availability).filter(userData => {\n          var _userData$shift8, _userData$shift8$day;\n          return (userData === null || userData === void 0 ? void 0 : (_userData$shift8 = userData[shift]) === null || _userData$shift8 === void 0 ? void 0 : (_userData$shift8$day = _userData$shift8[day]) === null || _userData$shift8$day === void 0 ? void 0 : _userData$shift8$day.status) === 'selected';\n        }).length;\n        if (necessary === selected) return; // אם המשמרת מלאה, אין צורך להוסיף אותה\n\n        if (criticality > highestCriticality) {\n          highestCriticality = criticality;\n          criticalShifts = [{\n            day,\n            shift\n          }];\n        } else if (criticality === highestCriticality && criticality > 0) {\n          criticalShifts.push({\n            day,\n            shift\n          });\n        }\n      });\n    });\n    return criticalShifts;\n  };\n  useEffect(() => {\n    setMostCriticalShifts(findMostCriticalShifts());\n  }, [necessaryEmployees, availability]);\n  const openConfirmModal = actionType => {\n    if (actionType === 'publish') {\n      setIsConfirmingPublish(true);\n      setIsConfirmingEdit(false);\n    } else if (actionType === 'edit') {\n      setIsConfirmingEdit(true);\n      setIsConfirmingPublish(false);\n    }\n    setIsConfirmModalOpen(true);\n  };\n  const closeConfirmModal = () => {\n    setIsConfirmModalOpen(false);\n  };\n  const getUserShiftTable = userId => {\n    if (!availability[userId]) return [];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return shifts.map(shift => {\n      const row = {\n        shift: shift[0] + (shift === 'Night' ? 't' : '')\n      }; // קיצור לשם המשמרת\n      days.forEach(day => {\n        var _availability$userId, _availability$userId$;\n        const shiftData = (_availability$userId = availability[userId]) === null || _availability$userId === void 0 ? void 0 : (_availability$userId$ = _availability$userId[shift]) === null || _availability$userId$ === void 0 ? void 0 : _availability$userId$[day];\n        if ((shiftData === null || shiftData === void 0 ? void 0 : shiftData.status) === 'selected') {\n          row[day] = '✅'; // שובץ\n        } else if (shiftData !== null && shiftData !== void 0 && shiftData.isAvailable) {\n          row[day] = '🟠'; // רק זמינות (חלול)\n        } else {\n          row[day] = ''; // לא הגיש זמינות\n        }\n      });\n      return row;\n    });\n  };\n  const handleOfferShift = async () => {\n    const weekKey = calculateWeekKey(weekOffset);\n    const shift = selectedShiftToSwap.shift;\n    const day = selectedShiftToSwap.day;\n    const fromUser = selectedShiftToSwap.userId;\n    const weekRange = calculateWeekRange(weekOffset);\n    let recipients = [];\n    if (offerToUserId) {\n      // נבחר עובד ספציפי\n      recipients.push(offerToUserId);\n    } else {\n      // \"No one specific\" - שלח לכל מי שנשאר בתפריט אחרי הסינונים\n      recipients = Object.entries(users).filter(([id, user]) => {\n        var _availability$id, _availability$id$Nigh, _availability$id$Nigh2, _availability$id2, _availability$id2$Mor, _availability$id2$Mor2, _availability$id3, _availability$id3$Noo, _availability$id3$Noo2;\n        if (id === fromUser) return false;\n\n        // ❗ סינון לפי רגולציה: לא ניתן להציע לעובד עם 6 משמרות שובצות\n        const currentShiftCount = shiftCounts[id] || 0;\n        if (currentShiftCount >= 6) return false;\n        const isAssignedThatDay = Object.values((availability === null || availability === void 0 ? void 0 : availability[id]) || {}).some(shiftData => {\n          var _shiftData$day;\n          return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$day = shiftData[day]) === null || _shiftData$day === void 0 ? void 0 : _shiftData$day.status) === 'selected';\n        });\n        if (isAssignedThatDay) return false;\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = days.indexOf(day);\n        const prev = days[currentIndex - 1];\n        const next = days[currentIndex + 1];\n        if (['Morning', 'Noon'].includes(shift) && prev && (availability === null || availability === void 0 ? void 0 : (_availability$id = availability[id]) === null || _availability$id === void 0 ? void 0 : (_availability$id$Nigh = _availability$id.Night) === null || _availability$id$Nigh === void 0 ? void 0 : (_availability$id$Nigh2 = _availability$id$Nigh[prev]) === null || _availability$id$Nigh2 === void 0 ? void 0 : _availability$id$Nigh2.status) === 'selected') return false;\n        if (shift === 'Night' && next && ((availability === null || availability === void 0 ? void 0 : (_availability$id2 = availability[id]) === null || _availability$id2 === void 0 ? void 0 : (_availability$id2$Mor = _availability$id2.Morning) === null || _availability$id2$Mor === void 0 ? void 0 : (_availability$id2$Mor2 = _availability$id2$Mor[next]) === null || _availability$id2$Mor2 === void 0 ? void 0 : _availability$id2$Mor2.status) === 'selected' || (availability === null || availability === void 0 ? void 0 : (_availability$id3 = availability[id]) === null || _availability$id3 === void 0 ? void 0 : (_availability$id3$Noo = _availability$id3.Noon) === null || _availability$id3$Noo === void 0 ? void 0 : (_availability$id3$Noo2 = _availability$id3$Noo[next]) === null || _availability$id3$Noo2 === void 0 ? void 0 : _availability$id3$Noo2.status) === 'selected')) return false;\n        return true;\n      }).map(([id]) => id);\n    }\n    for (const recipientId of recipients) {\n      var _users$fromUser;\n      const link = `/schedule?weekOffset=${weekOffset}&offerShift=true&offerDay=${day}&shift=${shift}&fromUser=${fromUser}&offeredTo=${recipientId}`;\n      await sendNotification(currentCompany, recipientId, `You are offered to take ${shift} shift on ${day} (Week: ${weekRange}) from ${((_users$fromUser = users[fromUser]) === null || _users$fromUser === void 0 ? void 0 : _users$fromUser.name) || 'a colleague'}.`, link);\n    }\n    toast.success('Shift offer sent successfully!');\n    setSelectedShiftToSwap(null);\n    setOfferToUserId('');\n  };\n  useEffect(() => {\n    var _loggedInUser$user;\n    if (hasCheckedShiftOffer || isLoading || !loggedInUser) return; // ← חשוב!\n\n    const offerShift = queryParams.get('offerShift');\n    const offerDay = queryParams.get('offerDay');\n    const offeredTo = queryParams.get('offeredTo');\n    const fromUser = queryParams.get('fromUser');\n    const shift = queryParams.get('shift');\n    if (offerShift === 'true' && offerDay && shift && fromUser && (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user = loggedInUser.user) === null || _loggedInUser$user === void 0 ? void 0 : _loggedInUser$user.id) === offeredTo // ← זה התנאי הנכון\n    ) {\n      var _availability$fromUse, _availability$fromUse2, _availability$fromUse3;\n      const isStillOffered = (availability === null || availability === void 0 ? void 0 : (_availability$fromUse = availability[fromUser]) === null || _availability$fromUse === void 0 ? void 0 : (_availability$fromUse2 = _availability$fromUse[shift]) === null || _availability$fromUse2 === void 0 ? void 0 : (_availability$fromUse3 = _availability$fromUse2[offerDay]) === null || _availability$fromUse3 === void 0 ? void 0 : _availability$fromUse3.status) === 'selected';\n      if (!isStillOffered) {\n        toast.info('This shift offer is no longer available.');\n      } else {\n        setShiftOfferParams({\n          day: offerDay,\n          shift,\n          fromUser,\n          offeredTo,\n          weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0\n        });\n      }\n      setHasCheckedShiftOffer(true);\n    }\n  }, [location.search, availability, isLoading, loggedInUser]); // ← חשוב להוסיף את loggedInUser כאן\n\n  useEffect(() => {\n    const approve = queryParams.get('approveShiftTransfer');\n    const day = queryParams.get('day');\n    const shift = queryParams.get('shift');\n    const fromUser = queryParams.get('fromUser');\n    const toUser = queryParams.get('toUser');\n    if (approve === 'true' && day && shift && fromUser && toUser && isAdmin // רק אם המנהל מחובר\n    ) {\n      setShiftOfferParams({\n        day,\n        shift,\n        fromUser,\n        offeredTo: toUser,\n        weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n        isAdminApproval: true\n      });\n    }\n  }, [location.search, isAdmin]);\n  const handleSwapProposal = async () => {\n    var _availability$me3, _availability$me3$Nig, _availability$me3$Nig2, _availability$them3, _availability$them3$N, _availability$them3$N2, _loggedInUser$user2, _Object$entries$find, _users$me, _users$them;\n    const {\n      shift: myShift,\n      day: myDay,\n      userId: me\n    } = selectedShiftToSwap;\n    const {\n      shift: theirShift,\n      day: theirDay,\n      userId: them\n    } = secondSelectedShift;\n    const weekKey = calculateWeekKey(weekOffset);\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const myDayIndex = daysOfWeek.indexOf(myDay);\n    const theirDayIndex = daysOfWeek.indexOf(theirDay);\n    const dayBeforeMyDay = daysOfWeek[myDayIndex - 1];\n    const dayBeforeTheirDay = daysOfWeek[theirDayIndex - 1];\n    const dayAfterMyDay = daysOfWeek[myDayIndex + 1];\n    const dayAfterTheirDay = daysOfWeek[theirDayIndex + 1];\n    const meAssignedOnTheirDay = Object.entries(availability[me] || {}).some(([_, shiftData]) => {\n      var _shiftData$theirDay;\n      return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$theirDay = shiftData[theirDay]) === null || _shiftData$theirDay === void 0 ? void 0 : _shiftData$theirDay.status) === 'selected';\n    });\n    const themAssignedOnMyDay = Object.entries(availability[them] || {}).some(([_, shiftData]) => {\n      var _shiftData$myDay;\n      return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$myDay = shiftData[myDay]) === null || _shiftData$myDay === void 0 ? void 0 : _shiftData$myDay.status) === 'selected';\n    });\n    const meMorningAfterTheirNight = theirShift === 'Night' && dayAfterTheirDay && ['Morning', 'Noon'].some(s => {\n      var _availability$me, _availability$me$s, _availability$me$s$da;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$me = availability[me]) === null || _availability$me === void 0 ? void 0 : (_availability$me$s = _availability$me[s]) === null || _availability$me$s === void 0 ? void 0 : (_availability$me$s$da = _availability$me$s[dayAfterTheirDay]) === null || _availability$me$s$da === void 0 ? void 0 : _availability$me$s$da.status) === 'selected';\n    });\n    const themMorningAfterMyNight = myShift === 'Night' && dayAfterMyDay && ['Morning', 'Noon'].some(s => {\n      var _availability$them, _availability$them$s, _availability$them$s$;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$them = availability[them]) === null || _availability$them === void 0 ? void 0 : (_availability$them$s = _availability$them[s]) === null || _availability$them$s === void 0 ? void 0 : (_availability$them$s$ = _availability$them$s[dayAfterMyDay]) === null || _availability$them$s$ === void 0 ? void 0 : _availability$them$s$.status) === 'selected';\n    });\n    const meNightAfterMorningBeforeTheirDay = theirShift === 'Night' && dayBeforeTheirDay && ['Morning', 'Noon'].some(s => {\n      var _availability$me2, _availability$me2$s, _availability$me2$s$d;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$me2 = availability[me]) === null || _availability$me2 === void 0 ? void 0 : (_availability$me2$s = _availability$me2[s]) === null || _availability$me2$s === void 0 ? void 0 : (_availability$me2$s$d = _availability$me2$s[dayBeforeTheirDay]) === null || _availability$me2$s$d === void 0 ? void 0 : _availability$me2$s$d.status) === 'selected';\n    });\n    const themNightAfterMorningBeforeMyDay = myShift === 'Night' && dayBeforeMyDay && ['Morning', 'Noon'].some(s => {\n      var _availability$them2, _availability$them2$s, _availability$them2$s2;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$them2 = availability[them]) === null || _availability$them2 === void 0 ? void 0 : (_availability$them2$s = _availability$them2[s]) === null || _availability$them2$s === void 0 ? void 0 : (_availability$them2$s2 = _availability$them2$s[dayBeforeMyDay]) === null || _availability$them2$s2 === void 0 ? void 0 : _availability$them2$s2.status) === 'selected';\n    });\n    const meMorningAfterNightBeforeTheirDay = ['Morning', 'Noon'].includes(theirShift) && dayBeforeTheirDay && (availability === null || availability === void 0 ? void 0 : (_availability$me3 = availability[me]) === null || _availability$me3 === void 0 ? void 0 : (_availability$me3$Nig = _availability$me3.Night) === null || _availability$me3$Nig === void 0 ? void 0 : (_availability$me3$Nig2 = _availability$me3$Nig[dayBeforeTheirDay]) === null || _availability$me3$Nig2 === void 0 ? void 0 : _availability$me3$Nig2.status) === 'selected';\n    const themMorningAfterNightBeforeMyDay = ['Morning', 'Noon'].includes(myShift) && dayBeforeMyDay && (availability === null || availability === void 0 ? void 0 : (_availability$them3 = availability[them]) === null || _availability$them3 === void 0 ? void 0 : (_availability$them3$N = _availability$them3.Night) === null || _availability$them3$N === void 0 ? void 0 : (_availability$them3$N2 = _availability$them3$N[dayBeforeMyDay]) === null || _availability$them3$N2 === void 0 ? void 0 : _availability$them3$N2.status) === 'selected';\n    if (meAssignedOnTheirDay || themAssignedOnMyDay || meMorningAfterTheirNight || themMorningAfterMyNight || meNightAfterMorningBeforeTheirDay || themNightAfterMorningBeforeMyDay || meMorningAfterNightBeforeTheirDay || themMorningAfterNightBeforeMyDay) {\n      toast.error(\"Swap not allowed: Conflict with shift-before/after rules or existing assignments.\");\n      return;\n    }\n    if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user2 = loggedInUser.user) === null || _loggedInUser$user2 === void 0 ? void 0 : _loggedInUser$user2.role) === 'admin') {\n      await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n      await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n      await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n      await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n      const updated = {\n        ...availability\n      };\n      updated[me][myShift][myDay].status = 'default';\n      updated[them][theirShift][theirDay].status = 'default';\n      updated[me][theirShift] ||= {};\n      updated[me][theirShift][theirDay] ||= {\n        isAvailable: true\n      };\n      updated[me][theirShift][theirDay].status = 'selected';\n      updated[them][myShift] ||= {};\n      updated[them][myShift][myDay] ||= {\n        isAvailable: true\n      };\n      updated[them][myShift][myDay].status = 'selected';\n      setAvailability(updated);\n      updateShiftCounts();\n      setSelectedShiftToSwap(null);\n      setSecondSelectedShift(null);\n      toast.success(\"Swap completed successfully.\");\n      return;\n    }\n    const adminId = (_Object$entries$find = Object.entries(users).find(([, u]) => u.role === 'admin')) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];\n    if (!adminId) {\n      toast.error('Admin not found.');\n      return;\n    }\n    const notificationLink = `/schedule?weekOffset=${weekOffset}&approveSwap=true&me=${me}&them=${them}&myDay=${myDay}&myShift=${myShift}&theirDay=${theirDay}&theirShift=${theirShift}`;\n    await sendNotification(currentCompany, adminId, `${((_users$me = users[me]) === null || _users$me === void 0 ? void 0 : _users$me.name) || 'An employee'} requested to swap their ${myShift} shift on ${myDay} with ${((_users$them = users[them]) === null || _users$them === void 0 ? void 0 : _users$them.name) || 'another employee'}'s ${theirShift} shift on ${theirDay}.`, notificationLink);\n    toast.success('Your swap request has been sent to the admin.');\n    setSelectedShiftToSwap(null);\n    setSecondSelectedShift(null);\n  };\n  useEffect(() => {\n    const approveSwap = queryParams.get('approveSwap');\n    const me = queryParams.get('me');\n    const them = queryParams.get('them');\n    const myDay = queryParams.get('myDay');\n    const myShift = queryParams.get('myShift');\n    const theirDay = queryParams.get('theirDay');\n    const theirShift = queryParams.get('theirShift');\n    if (approveSwap === 'true' && me && them && myDay && myShift && theirDay && theirShift && isAdmin) {\n      setShiftOfferParams({\n        isAdminSwapApproval: true,\n        me,\n        them,\n        myDay,\n        myShift,\n        theirDay,\n        theirShift,\n        weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0\n      });\n    }\n  }, [location.search, isAdmin]);\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 17\n      }, this), isConfirmModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: isConfirmingPublish ? isPublished ? 'Confirm Schedule Unpublishing' : 'Confirm Schedule Publication' : isConfirmingEdit ? isEditAllowed ? 'Confirm Disabling Editing' : 'Confirm Enabling Editing' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 871,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: isConfirmingPublish ? isPublished ? 'Are you sure you want to unpublish this schedule?' : 'Are you sure you want to publish this schedule?' : isConfirmingEdit ? isEditAllowed ? 'Are you sure you want to disable weekly availability submissions?' : 'Are you sure you want to enable weekly availability submissions?' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"confirm-button\",\n              onClick: () => {\n                if (isConfirmingPublish) {\n                  togglePublishStatus();\n                } else if (isConfirmingEdit) {\n                  toggleEditStatus();\n                }\n                closeConfirmModal();\n              },\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 886,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cancel-button\",\n              onClick: closeConfirmModal,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 896,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 885,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Weekly Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 21\n        }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-toggle-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"view-toggle-button\",\n            onClick: () => setIsViewingAsEmployee(prev => !prev),\n            children: [isViewingAsEmployee ? /*#__PURE__*/_jsxDEV(FaEdit, {\n              style: {\n                marginRight: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 56\n            }, this) : /*#__PURE__*/_jsxDEV(FaCalendarCheck, {\n              style: {\n                marginRight: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 100\n            }, this), isViewingAsEmployee ? 'Back to Draft View' : 'View Final Schedule']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 907,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 25\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 25\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [!isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"week-navigation centered-navigation\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(-1),\n              children: \"Previous Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"week-range\",\n              children: calculateWeekRange(weekOffset)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 929,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(1),\n              children: \"Next Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 925,\n            columnNumber: 33\n          }, this), isAdmin && !isViewingAsEmployee ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"schedule-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"schedule-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Shift\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 941,\n                    columnNumber: 49\n                  }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 945,\n                      columnNumber: 67\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"date\",\n                      children: weekDates[index]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 946,\n                      columnNumber: 61\n                    }, this)]\n                  }, day, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 944,\n                    columnNumber: 57\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 940,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 939,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: shift\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 955,\n                    columnNumber: 53\n                  }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                    var _necessaryEmployees$d5, _necessaryEmployees$d6;\n                    const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                      var _userData$shift9;\n                      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift9 = userData[shift]) === null || _userData$shift9 === void 0 ? void 0 : _userData$shift9[day];\n                      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                    }).length;\n                    const isFullyStaffed = selectedEmployeesCount === ((necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d5 = necessaryEmployees[day]) === null || _necessaryEmployees$d5 === void 0 ? void 0 : _necessaryEmployees$d5[shift]) || 0);\n                    const criticality = calculateShiftCriticality(day, shift);\n                    const isMostCritical = mostCriticalShifts.some(criticalShift => criticalShift.day === day && criticalShift.shift === shift);\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: `schedule-cell \n                                                                ${isFullyStaffed ? 'fully-staffed' : ''} \n                                                                ${isMostCritical ? 'most-critical' : ''}\n                                                            `,\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"number\",\n                        min: \"0\",\n                        className: \"necessary-employees-input\",\n                        value: (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d6 = necessaryEmployees[day]) === null || _necessaryEmployees$d6 === void 0 ? void 0 : _necessaryEmployees$d6[shift]) || 0,\n                        onChange: e => handleNecessaryEmployeesChange(day, shift, e.target.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 977,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"selected-employees-indicator\",\n                        children: [selectedEmployeesCount, \" Selected\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 985,\n                        columnNumber: 65\n                      }, this), Object.entries(availability).filter(([userId, userData]) => {\n                        var _userData$shift10;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift10 = userData[shift]) === null || _userData$shift10 === void 0 ? void 0 : _userData$shift10[day];\n                        return availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.isAvailable; // רק עובדים זמינים\n                      }).sort(([userIdA], [userIdB]) => {\n                        var _users$userIdA2, _users$userIdB2;\n                        const nameA = ((_users$userIdA2 = users[userIdA]) === null || _users$userIdA2 === void 0 ? void 0 : _users$userIdA2.name) || '';\n                        const nameB = ((_users$userIdB2 = users[userIdB]) === null || _users$userIdB2 === void 0 ? void 0 : _users$userIdB2.name) || '';\n                        return nameA.localeCompare(nameB); // מיון אלפביתי לפי שם\n                      }).map(([userId, userData]) => {\n                        var _userData$shift11, _users$userId;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift11 = userData[shift]) === null || _userData$shift11 === void 0 ? void 0 : _userData$shift11[day];\n                        const statusClass = getStatusClass(availabilityInfo.status, userId);\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: `availability-entry ${statusClass}`,\n                          onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                          style: {\n                            backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ffff',\n                            color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                            pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                            cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                          },\n                          children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                        }, userId, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1004,\n                          columnNumber: 77\n                        }, this);\n                      })]\n                    }, day, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 969,\n                      columnNumber: 61\n                    }, this);\n                  })]\n                }, shift, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 954,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 952,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 938,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"employees-list\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Employees\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1041,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"week-navigation\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"week-nav-button\",\n                  onClick: () => handleWeekChange(-1),\n                  children: /*#__PURE__*/_jsxDEV(FaChevronLeft, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1045,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1044,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"week-range\",\n                  children: calculateWeekRange(weekOffset)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1047,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"week-nav-button\",\n                  onClick: () => handleWeekChange(1),\n                  children: /*#__PURE__*/_jsxDEV(FaChevronRight, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1049,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1048,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1043,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"buttons-container\",\n                children: [isWarningVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"warning-banner\",\n                  children: \"\\u26A0\\uFE0F Warning: One or more shifts are no longer fully staffed. Please review the schedule.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1055,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `general-button ${isPublished ? 'green' : 'red'}`,\n                  onClick: () => openConfirmModal('publish'),\n                  disabled: isPublishButtonDisabled,\n                  children: [isPublished ? 'Unpublish Schedule' : 'Publish Schedule', isWarningVisible && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"publish-warning-icon\",\n                    children: \"\\uD83D\\uDD34\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1066,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1060,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `general-button ${isEditAllowed ? 'green' : 'red'}`,\n                  onClick: () => openConfirmModal('edit'),\n                  children: isEditAllowed ? 'Disable Editing' : 'Enable Editing'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1069,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1053,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"total-info-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Weekly Overview\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1079,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1080,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Weekly Staff: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalNecessaryEmployees\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1081,\n                    columnNumber: 62\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1081,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1082,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Weekly Shift Targets: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalWeeklyTargets\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1083,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1083,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1084,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Assigned Shifts: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalAssignedShifts\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1085,\n                    columnNumber: 65\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1085,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1086,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1078,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: employeesWithAvailability.map(([userId, user]) => {\n                  const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId]; // בדיקה אם היעד הושג\n                  const hasNotes = hasWeeklyNotes(userId); // בדיקה אם יש הערות לעובד זה\n                  const backgroundColor = hasNotes ? 'yellow' : '#2980b9'; // צהוב אם יש הערות, כחול אם אין\n                  const textColor = hasNotes ? 'black' : 'white'; // טקסט שחור אם צהוב, לבן אם כחול\n\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    onClick: () => handleEmployeeClick(userId),\n                    className: `${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`,\n                    style: {\n                      backgroundColor: isTargetMet ? '#d4edda' : 'inherit' // צבע רקע ירוק בהיר אם היעד הושג\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"employee-details\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"notes-indicator\",\n                        style: {\n                          backgroundColor: backgroundColor,\n                          color: textColor // צבע הטקסט לפי צבע הרקע\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"indicator-text\",\n                          children: \"i\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1114,\n                          columnNumber: 65\n                        }, this), \" \"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1107,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"employee-name\",\n                        children: user.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1117,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"weekly-shift-target\",\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [shiftCounts[userId] || 0, \" shifts out of:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"number\",\n                            min: \"0\",\n                            max: \"6\" // הגבלה ברמת ה-UI\n                            ,\n                            value: weeklyShiftTargets[userId] || 0,\n                            onClick: e => e.stopPropagation() // עצירת האירוע\n                            ,\n                            onChange: e => handleWeeklyShiftTargetChange(userId, e.target.value),\n                            className: \"weekly-shift-input\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1124,\n                            columnNumber: 69\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1122,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1121,\n                        columnNumber: 61\n                      }, this), highlightedUser === userId && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [selectedUserNotes && selectedUserNotes !== 'No notes available.' && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"employee-notes\",\n                          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                            children: \"Notes:\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1140,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                            children: selectedUserNotes\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1141,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1139,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"employee-table\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"mini-schedule-legend compact\",\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"legend-symbol\",\n                              children: \"\\u2705\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1147,\n                              columnNumber: 77\n                            }, this), \" Assigned \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"legend-symbol\",\n                              children: \"\\uD83D\\uDFE0\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1148,\n                              columnNumber: 77\n                            }, this), \" Submitted\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1146,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                            className: \"mini-schedule-table\",\n                            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                                  children: \"Shift\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1154,\n                                  columnNumber: 85\n                                }, this), ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n                                  children: day\n                                }, day, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1156,\n                                  columnNumber: 89\n                                }, this))]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1153,\n                                columnNumber: 81\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1152,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                              children: getUserShiftTable(userId).map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n                                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                                  children: {\n                                    Morning: 'M',\n                                    Noon: 'N',\n                                    Evening: 'E',\n                                    Night: 'Nt'\n                                  }[row.shift] || row.shift\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1163,\n                                  columnNumber: 89\n                                }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n                                  children: row[day]\n                                }, day, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1172,\n                                  columnNumber: 93\n                                }, this))]\n                              }, row.shift, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1162,\n                                columnNumber: 85\n                              }, this))\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1160,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1151,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1145,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1105,\n                      columnNumber: 57\n                    }, this)\n                  }, userId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1097,\n                    columnNumber: 53\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1089,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1040,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 33\n          }, this) : isPublished ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"schedule-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"schedule-table\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Shift\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1195,\n                      columnNumber: 57\n                    }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1199,\n                        columnNumber: 75\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"date\",\n                        children: weekDates[index]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1200,\n                        columnNumber: 69\n                      }, this)]\n                    }, day, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1198,\n                      columnNumber: 65\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1194,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1193,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: shift\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1209,\n                      columnNumber: 61\n                    }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                      const selectedEmployees = Object.entries(availability).filter(([userId, userData]) => {\n                        var _userData$shift12;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift12 = userData[shift]) === null || _userData$shift12 === void 0 ? void 0 : _userData$shift12[day];\n                        return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                      });\n                      return /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"schedule-cell\",\n                        children: selectedEmployees.sort(([userIdA], [userIdB]) => {\n                          var _users$userIdA3, _users$userIdA3$name, _users$userIdB3, _users$userIdB3$name;\n                          const nameA = ((_users$userIdA3 = users[userIdA]) === null || _users$userIdA3 === void 0 ? void 0 : (_users$userIdA3$name = _users$userIdA3.name) === null || _users$userIdA3$name === void 0 ? void 0 : _users$userIdA3$name.toLowerCase()) || '';\n                          const nameB = ((_users$userIdB3 = users[userIdB]) === null || _users$userIdB3 === void 0 ? void 0 : (_users$userIdB3$name = _users$userIdB3.name) === null || _users$userIdB3$name === void 0 ? void 0 : _users$userIdB3$name.toLowerCase()) || '';\n                          return nameA.localeCompare(nameB);\n                        }).map(([userId]) => {\n                          var _users$userId2;\n                          const isOwnShift = userId === highlightedUser;\n                          const isSelected = selectedShiftToSwap && selectedShiftToSwap.userId === userId && selectedShiftToSwap.day === day && selectedShiftToSwap.shift === shift;\n                          const isOfferedToMe = shiftOfferParams && userId === shiftOfferParams.fromUser && shift === shiftOfferParams.shift && day === shiftOfferParams.day;\n                          const isSecondSelected = secondSelectedShift && secondSelectedShift.userId === userId && secondSelectedShift.day === day && secondSelectedShift.shift === shift;\n                          console.log('[DEBUG] checking cell', {\n                            userId,\n                            shift,\n                            day,\n                            highlightedUser,\n                            isOwnShift,\n                            isSelected,\n                            isOfferedToMe,\n                            shiftOfferParams\n                          });\n                          return /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: `employee-button \n                                                                                        ${isOwnShift ? 'highlighted-own-shift' : ''} \n                                                                                        ${isSelected ? 'highlighted-swap-source' : ''} \n                                                                                        ${isSecondSelected ? 'highlighted-swap-target' : ''} \n                                                                                        ${isOfferedToMe ? 'offered-to-me' : ''} \n                                                                                        ${shiftOfferParams !== null && shiftOfferParams !== void 0 && shiftOfferParams.isAdminSwapApproval && (userId === shiftOfferParams.me && shift === shiftOfferParams.myShift && day === shiftOfferParams.myDay || userId === shiftOfferParams.them && shift === shiftOfferParams.theirShift && day === shiftOfferParams.theirDay) ? 'highlighted-swap' : ''}\n                                                                                    `,\n                            onClick: () => {\n                              if (isOwnShift) {\n                                // אם המשתמש לוחץ על המשמרת של עצמו\n                                if (selectedShiftToSwap && selectedShiftToSwap.userId === userId && selectedShiftToSwap.shift === shift && selectedShiftToSwap.day === day) {\n                                  setSelectedShiftToSwap(null);\n                                  setSecondSelectedShift(null);\n                                } else {\n                                  setSelectedShiftToSwap({\n                                    userId,\n                                    shift,\n                                    day\n                                  });\n                                  setSecondSelectedShift(null); // איפוס בחירה קודמת\n                                }\n                              } else if (selectedShiftToSwap && !secondSelectedShift) {\n                                // אם נבחרה כבר משמרת של המשתמש, ועכשיו נבחרה של מישהו אחר\n                                setSecondSelectedShift({\n                                  userId,\n                                  shift,\n                                  day\n                                });\n                              } else {\n                                // כל מקרה אחר – איפוס\n                                setSelectedShiftToSwap(null);\n                                setSecondSelectedShift(null);\n                              }\n                            },\n                            children: ((_users$userId2 = users[userId]) === null || _users$userId2 === void 0 ? void 0 : _users$userId2.name) || 'Unknown'\n                          }, userId, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1254,\n                            columnNumber: 85\n                          }, this);\n                        })\n                      }, day, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1217,\n                        columnNumber: 69\n                      }, this);\n                    })]\n                  }, shift, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1208,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1206,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1192,\n                columnNumber: 45\n              }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employees-list\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Employees\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1315,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: employeesWithAvailability.map(([userId, user]) => {\n                    return /*#__PURE__*/_jsxDEV(\"li\", {\n                      onClick: () => handleEmployeeClick(userId),\n                      className: `${highlightedUser === userId ? 'selected' : ''}`,\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"employee-details\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"employee-name\",\n                          children: user.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1325,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1324,\n                        columnNumber: 69\n                      }, this)\n                    }, userId, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1319,\n                      columnNumber: 65\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1316,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1314,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1191,\n              columnNumber: 41\n            }, this), selectedShiftToSwap && (secondSelectedShift ?\n            /*#__PURE__*/\n            // טופס החלפה (Swap) בין שני עובדים\n            _jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Swap Shifts With Another Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1339,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are proposing to swap your \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1341,\n                  columnNumber: 88\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1341,\n                  columnNumber: 142\n                }, this), \"with \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: (_users$secondSelected = users[secondSelectedShift.userId]) === null || _users$secondSelected === void 0 ? void 0 : _users$secondSelected.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1342,\n                  columnNumber: 62\n                }, this), \"'s\", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\" \", secondSelectedShift.shift]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1343,\n                  columnNumber: 57\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: secondSelectedShift.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1343,\n                  columnNumber: 112\n                }, this), \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1340,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  onClick: handleSwapProposal // פונקציה שנוסיף בהמשך\n                  ,\n                  children: \"Propose Swap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1346,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setSelectedShiftToSwap(null);\n                    setSecondSelectedShift(null);\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1352,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1345,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1338,\n              columnNumber: 49\n            }, this) :\n            /*#__PURE__*/\n            // טופס רגיל של הצעת משמרת\n            _jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Offer Shift to Another Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1367,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are offering your \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1369,\n                  columnNumber: 79\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1369,\n                  columnNumber: 133\n                }, this), \" to another employee.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1368,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Choose employee to offer the shift to:\", /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: offerToUserId,\n                    onChange: e => setOfferToUserId(e.target.value),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"No one specific\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1375,\n                      columnNumber: 65\n                    }, this), Object.entries(users).filter(([id, user]) => {\n                      var _user$companyIds, _availability$id4, _availability$id4$Nig, _availability$id4$Nig2, _availability$id5, _availability$id5$Mor, _availability$id5$Mor2, _availability$id6, _availability$id6$Noo, _availability$id6$Noo2;\n                      if (id === selectedShiftToSwap.userId) return false;\n                      if (!((_user$companyIds = user.companyIds) !== null && _user$companyIds !== void 0 && _user$companyIds.some(company => {\n                        var _loggedInUser$company;\n                        return company.companyId === (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$company = loggedInUser.company) === null || _loggedInUser$company === void 0 ? void 0 : _loggedInUser$company.id);\n                      }))) return false;\n\n                      // ✅ סינון לפי רגולציה\n                      if ((shiftCounts[id] || 0) >= 6) return false;\n                      const isAssignedThatDay = Object.values((availability === null || availability === void 0 ? void 0 : availability[id]) || {}).some(shiftData => {\n                        var _shiftData$selectedSh;\n                        return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$selectedSh = shiftData[selectedShiftToSwap.day]) === null || _shiftData$selectedSh === void 0 ? void 0 : _shiftData$selectedSh.status) === 'selected';\n                      });\n                      if (isAssignedThatDay) return false;\n                      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                      const currentIndex = days.indexOf(selectedShiftToSwap.day);\n                      const previousDay = days[currentIndex - 1];\n                      const nextDay = days[currentIndex + 1];\n                      if (['Morning', 'Noon'].includes(selectedShiftToSwap.shift) && previousDay && (availability === null || availability === void 0 ? void 0 : (_availability$id4 = availability[id]) === null || _availability$id4 === void 0 ? void 0 : (_availability$id4$Nig = _availability$id4.Night) === null || _availability$id4$Nig === void 0 ? void 0 : (_availability$id4$Nig2 = _availability$id4$Nig[previousDay]) === null || _availability$id4$Nig2 === void 0 ? void 0 : _availability$id4$Nig2.status) === 'selected') return false;\n                      if (selectedShiftToSwap.shift === 'Night' && nextDay && ((availability === null || availability === void 0 ? void 0 : (_availability$id5 = availability[id]) === null || _availability$id5 === void 0 ? void 0 : (_availability$id5$Mor = _availability$id5.Morning) === null || _availability$id5$Mor === void 0 ? void 0 : (_availability$id5$Mor2 = _availability$id5$Mor[nextDay]) === null || _availability$id5$Mor2 === void 0 ? void 0 : _availability$id5$Mor2.status) === 'selected' || (availability === null || availability === void 0 ? void 0 : (_availability$id6 = availability[id]) === null || _availability$id6 === void 0 ? void 0 : (_availability$id6$Noo = _availability$id6.Noon) === null || _availability$id6$Noo === void 0 ? void 0 : (_availability$id6$Noo2 = _availability$id6$Noo[nextDay]) === null || _availability$id6$Noo2 === void 0 ? void 0 : _availability$id6$Noo2.status) === 'selected')) return false;\n                      return true;\n                    }).sort(([, a], [, b]) => (a.name || '').localeCompare(b.name || '')).map(([id, user]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: id,\n                      children: user.name\n                    }, id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1413,\n                      columnNumber: 73\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1374,\n                    columnNumber: 61\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1372,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  onClick: handleOfferShift,\n                  children: \"Offer Shift\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1420,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1371,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1366,\n              columnNumber: 49\n            }, this)), shiftOfferParams && (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user3 = loggedInUser.user) === null || _loggedInUser$user3 === void 0 ? void 0 : _loggedInUser$user3.id) === shiftOfferParams.offeredTo && (availability === null || availability === void 0 ? void 0 : (_availability$shiftOf = availability[shiftOfferParams.fromUser]) === null || _availability$shiftOf === void 0 ? void 0 : (_availability$shiftOf2 = _availability$shiftOf[shiftOfferParams.shift]) === null || _availability$shiftOf2 === void 0 ? void 0 : (_availability$shiftOf3 = _availability$shiftOf2[shiftOfferParams.day]) === null || _availability$shiftOf3 === void 0 ? void 0 : _availability$shiftOf3.status) === 'selected' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"You\\u2019ve received a shift offer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1433,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are being offered the \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: shiftOfferParams.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1435,\n                  columnNumber: 83\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: shiftOfferParams.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1435,\n                  columnNumber: 134\n                }, this), \" by\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara = users[shiftOfferParams.fromUser]) === null || _users$shiftOfferPara === void 0 ? void 0 : _users$shiftOfferPara.name) || 'a colleague'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1436,\n                  columnNumber: 57\n                }, this), \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1434,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$fromUse4, _availability$fromUse5, _availability$fromUse6, _Object$entries$find2;\n                    const weekKey = calculateWeekKey(shiftOfferParams.weekOffset);\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo\n                    } = shiftOfferParams;\n                    const currentStatus = availability === null || availability === void 0 ? void 0 : (_availability$fromUse4 = availability[fromUser]) === null || _availability$fromUse4 === void 0 ? void 0 : (_availability$fromUse5 = _availability$fromUse4[shift]) === null || _availability$fromUse5 === void 0 ? void 0 : (_availability$fromUse6 = _availability$fromUse5[day]) === null || _availability$fromUse6 === void 0 ? void 0 : _availability$fromUse6.status;\n                    if (currentStatus !== 'selected') {\n                      toast.error('This shift has already been taken by someone else.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n                    const adminId = (_Object$entries$find2 = Object.entries(users).find(([, u]) => u.role === 'admin')) === null || _Object$entries$find2 === void 0 ? void 0 : _Object$entries$find2[0];\n                    if (!adminId) {\n                      toast.error('Admin not found.');\n                      return;\n                    }\n                    const weekRange = calculateWeekRange(shiftOfferParams.weekOffset);\n                    const notificationLink = `/schedule?weekOffset=${shiftOfferParams.weekOffset}&approveShiftTransfer=true&day=${day}&shift=${shift}&fromUser=${fromUser}&toUser=${offeredTo}`;\n                    if (adminId === offeredTo) {\n                      // אם האדמין לוקח את המשמרת – נבצע את ההחלפה מיד\n                      await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                      await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n                      const updated = {\n                        ...availability\n                      };\n                      updated[fromUser][shift][day].status = 'default';\n                      if (!updated[offeredTo]) updated[offeredTo] = {};\n                      if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                      if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = {\n                        isAvailable: true\n                      };\n                      updated[offeredTo][shift][day].status = 'selected';\n                      setAvailability(updated);\n                      updateShiftCounts();\n                      toast.success('Shift was successfully reassigned to you.');\n                      setShiftOfferParams(null);\n                    } else {\n                      var _users$offeredTo;\n                      // אחרת – שלח לאדמין בקשה לאישור\n                      await sendNotification(currentCompany, adminId, `${((_users$offeredTo = users[offeredTo]) === null || _users$offeredTo === void 0 ? void 0 : _users$offeredTo.name) || 'An employee'} accepted the offer to take the ${shift} shift on ${day}. Please approve the change.`, notificationLink);\n                      toast.success('Your request has been sent to the admin for approval.');\n                      setShiftOfferParams(null);\n                    }\n                  },\n                  children: \"Accept Shift\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1439,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setShiftOfferParams(null);\n                    toast.info('You declined the shift.');\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1495,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1438,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1432,\n              columnNumber: 49\n            }, this), (shiftOfferParams === null || shiftOfferParams === void 0 ? void 0 : shiftOfferParams.isAdminApproval) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Admin Approval Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1511,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Approve transfer of \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [shiftOfferParams.shift, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1513,\n                  columnNumber: 73\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [shiftOfferParams.day, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1513,\n                  columnNumber: 125\n                }, this), \"from \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [((_users$shiftOfferPara2 = users[shiftOfferParams.fromUser]) === null || _users$shiftOfferPara2 === void 0 ? void 0 : _users$shiftOfferPara2.name) || 'Unknown', \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1514,\n                  columnNumber: 58\n                }, this), \"to \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara3 = users[shiftOfferParams.offeredTo]) === null || _users$shiftOfferPara3 === void 0 ? void 0 : _users$shiftOfferPara3.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1515,\n                  columnNumber: 56\n                }, this), \"?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1512,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$fromUse7, _availability$fromUse8, _availability$fromUse9, _users$fromUser2, _users$offeredTo2, _loggedInUser$user4, _loggedInUser$user5;\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const weekKey = calculateWeekKey(weekOffset);\n                    const currentStatus = availability === null || availability === void 0 ? void 0 : (_availability$fromUse7 = availability[fromUser]) === null || _availability$fromUse7 === void 0 ? void 0 : (_availability$fromUse8 = _availability$fromUse7[shift]) === null || _availability$fromUse8 === void 0 ? void 0 : (_availability$fromUse9 = _availability$fromUse8[day]) === null || _availability$fromUse9 === void 0 ? void 0 : _availability$fromUse9.status;\n                    if (currentStatus !== 'selected') {\n                      toast.error('This shift has already been reassigned.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n                    await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n                    const updated = {\n                      ...availability\n                    };\n                    updated[fromUser][shift][day].status = 'default';\n                    if (!updated[offeredTo]) updated[offeredTo] = {};\n                    if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                    if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = {\n                      isAvailable: true\n                    };\n                    updated[offeredTo][shift][day].status = 'selected';\n                    setAvailability(updated);\n                    updateShiftCounts();\n                    const fromUserName = ((_users$fromUser2 = users[fromUser]) === null || _users$fromUser2 === void 0 ? void 0 : _users$fromUser2.name) || 'Unknown';\n                    const offeredToName = ((_users$offeredTo2 = users[offeredTo]) === null || _users$offeredTo2 === void 0 ? void 0 : _users$offeredTo2.name) || 'Unknown';\n                    const link = `/schedule?weekOffset=${weekOffset}`;\n\n                    // שלח התראה רק אם השולח אינו ה-admin\n                    if (fromUser !== (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user4 = loggedInUser.user) === null || _loggedInUser$user4 === void 0 ? void 0 : _loggedInUser$user4.id)) {\n                      await sendNotification(currentCompany, fromUser, `The admin approved your request to transfer the ${shift} shift on ${day} to ${offeredToName}.`, link);\n                    }\n\n                    // שלח התראה רק אם המקבל אינו ה-admin\n                    if (offeredTo !== (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user5 = loggedInUser.user) === null || _loggedInUser$user5 === void 0 ? void 0 : _loggedInUser$user5.id)) {\n                      await sendNotification(currentCompany, offeredTo, `The admin approved your request to take the ${shift} shift on ${day} from ${fromUserName}.`, link);\n                    }\n                    toast.success('Shift transfer approved.');\n                    setShiftOfferParams(null);\n                  },\n                  children: \"Approve\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1518,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: async () => {\n                    var _users$fromUser3, _users$offeredTo3;\n                    setShiftOfferParams(null);\n                    toast.info('Shift transfer declined.');\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const fromUserName = ((_users$fromUser3 = users[fromUser]) === null || _users$fromUser3 === void 0 ? void 0 : _users$fromUser3.name) || 'Unknown';\n                    const offeredToName = ((_users$offeredTo3 = users[offeredTo]) === null || _users$offeredTo3 === void 0 ? void 0 : _users$offeredTo3.name) || 'an employee';\n                    const weekRange = calculateWeekRange(weekOffset);\n\n                    // התראה למי שהציע את המשמרת\n                    await sendNotification(currentCompany, fromUser, `Your shift offer to ${offeredToName} for the ${shift} shift on ${day} was declined by the admin.`, `/schedule?weekOffset=${weekOffset}`);\n\n                    // התראה למי שביקש לקבל את המשמרת\n                    await sendNotification(currentCompany, offeredTo, `Your request to take the ${shift} shift on ${day} from ${fromUserName} was declined by the admin.`, `/schedule?weekOffset=${weekOffset}`);\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1574,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1517,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1510,\n              columnNumber: 45\n            }, this), (shiftOfferParams === null || shiftOfferParams === void 0 ? void 0 : shiftOfferParams.isAdminSwapApproval) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Admin Approval Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1612,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Approve shift swap between\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara4 = users[shiftOfferParams.me]) === null || _users$shiftOfferPara4 === void 0 ? void 0 : _users$shiftOfferPara4.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1615,\n                  columnNumber: 53\n                }, this), \"(shift: \", shiftOfferParams.myShift, \" on \", shiftOfferParams.myDay, \") and\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara5 = users[shiftOfferParams.them]) === null || _users$shiftOfferPara5 === void 0 ? void 0 : _users$shiftOfferPara5.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1617,\n                  columnNumber: 53\n                }, this), \"(shift: \", shiftOfferParams.theirShift, \" on \", shiftOfferParams.theirDay, \")?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1613,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$me4, _availability$me4$myS, _availability$me4$myS2, _availability$them4, _availability$them4$t, _availability$them4$t2;\n                    const {\n                      me,\n                      them,\n                      myDay,\n                      myShift,\n                      theirDay,\n                      theirShift,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const weekKey = calculateWeekKey(weekOffset);\n\n                    // בדיקה לפני אישור\n                    const myStatus = availability === null || availability === void 0 ? void 0 : (_availability$me4 = availability[me]) === null || _availability$me4 === void 0 ? void 0 : (_availability$me4$myS = _availability$me4[myShift]) === null || _availability$me4$myS === void 0 ? void 0 : (_availability$me4$myS2 = _availability$me4$myS[myDay]) === null || _availability$me4$myS2 === void 0 ? void 0 : _availability$me4$myS2.status;\n                    const theirStatus = availability === null || availability === void 0 ? void 0 : (_availability$them4 = availability[them]) === null || _availability$them4 === void 0 ? void 0 : (_availability$them4$t = _availability$them4[theirShift]) === null || _availability$them4$t === void 0 ? void 0 : (_availability$them4$t2 = _availability$them4$t[theirDay]) === null || _availability$them4$t2 === void 0 ? void 0 : _availability$them4$t2.status;\n                    if (myStatus !== 'selected' || theirStatus !== 'selected') {\n                      toast.error('One of the shifts has already changed.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n\n                    // עדכון בבסיס נתונים\n                    await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n                    await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n\n                    // עדכון ב־state\n                    const updated = {\n                      ...availability\n                    };\n                    updated[me][myShift][myDay].status = 'default';\n                    updated[them][theirShift][theirDay].status = 'default';\n                    updated[me][theirShift] ||= {};\n                    updated[me][theirShift][theirDay] ||= {\n                      isAvailable: true\n                    };\n                    updated[me][theirShift][theirDay].status = 'selected';\n                    updated[them][myShift] ||= {};\n                    updated[them][myShift][myDay] ||= {\n                      isAvailable: true\n                    };\n                    updated[them][myShift][myDay].status = 'selected';\n                    setAvailability(updated);\n                    updateShiftCounts();\n                    toast.success('Swap approved and shifts updated.');\n                    setShiftOfferParams(null);\n                    await sendNotification(currentCompany, me, `The admin approved your shift swap. You are now assigned to the ${theirShift} shift on ${theirDay}.`, `/schedule?weekOffset=${weekOffset}`);\n                    await sendNotification(currentCompany, them, `The admin approved your shift swap. You are now assigned to the ${myShift} shift on ${myDay}.`, `/schedule?weekOffset=${weekOffset}`);\n                  },\n                  children: \"Approve\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1621,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setShiftOfferParams(null);\n                    toast.info('Swap request declined.');\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1684,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1620,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1611,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1190,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-schedule-message\",\n            children: \"No published schedule is available for this week.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1700,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 864,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 863,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"fsfamIuAXa/5bUAOim7PmAwlDu0=\", false, function () {\n  return [useLocation];\n});\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","FaChevronLeft","FaChevronRight","ThreeDots","Loader","BackgroundWrapper","updateAvailabilityStatus","getAllAvailabilities","getNecessaryEmployees","saveNecessaryEmployees","saveWeeklyShiftTargets","getWeeklyShiftTargets","fetchPublishStatus","savePublishStatus","saveEditStatus","fetchEditStatus","getUsers","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","handleOtherShiftsOfDayWhenDeselectAShift","Navbar","sendNotification","useLocation","FaCalendarCheck","FaEdit","toast","ToastContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","ScheduleScreen","_s","_users$secondSelected","_loggedInUser$user3","_availability$shiftOf","_availability$shiftOf2","_availability$shiftOf3","_users$shiftOfferPara","_users$shiftOfferPara2","_users$shiftOfferPara3","_users$shiftOfferPara4","_users$shiftOfferPara5","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","location","queryParams","URLSearchParams","search","initialWeekOffset","parseInt","get","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","highlightedUser","setHighlightedUser","selectedUserNotes","setSelectedUserNotes","shiftCounts","setShiftCounts","necessaryEmployees","setNecessaryEmployees","weeklyShiftTargets","setWeeklyShiftTargets","totalNecessaryEmployees","setTotalNecessaryEmployees","totalAssignedShifts","setTotalAssignedShifts","totalWeeklyTargets","setTotalWeeklyTargets","isPublished","setIsPublished","isAdmin","setIsAdmin","isEditAllowed","setIsEditAllowed","mostCriticalShifts","setMostCriticalShifts","isConfirmModalOpen","setIsConfirmModalOpen","isConfirmingPublish","setIsConfirmingPublish","isConfirmingEdit","setIsConfirmingEdit","isWarningVisible","setIsWarningVisible","isViewingAsEmployee","setIsViewingAsEmployee","selectedShiftToSwap","setSelectedShiftToSwap","offerToUserId","setOfferToUserId","shiftOfferParams","setShiftOfferParams","hasCheckedShiftOffer","setHasCheckedShiftOffer","loggedInUser","setLoggedInUser","secondSelectedShift","setSecondSelectedShift","userFromStorage","JSON","parse","localStorage","getItem","user","role","id","isScheduleFullyStaffed","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","companyId","company","weekKey","availabilityData","usersData","necessaryEmployeesData","weeklyTargetsData","Promise","all","calculateTotalNecessaryEmployees","updatedWeeklyTargets","Object","values","forEach","console","warn","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","handleWeeklyShiftTargetChange","userId","value","parsedValue","Math","min","updatedTargets","total","reduce","sum","target","cleanedTargets","fromEntries","entries","filter","key","handleWeekChange","direction","prevOffset","getStatusClass","status","shift","day","_necessaryEmployees$d","selectedEmployeesCount","userData","_userData$shift","availabilityInfo","maxNecessaryEmployees","currentShiftCount","maxShiftsAllowed","handleEmployeeClick","_availabilityData$use","userNotes","notes","keys","updateShiftCounts","counts","totalShifts","shifts","userShiftCount","dayShifts","saveNecessaryEmployeesToDB","handleStatusUpdate","currentStatus","_necessaryEmployees$d2","_userData$shift2","newStatus","updatedAvailability","otherShift","employeesWithAvailability","some","sort","userIdA","userIdB","_users$userIdA","_users$userIdA$name","_users$userIdB","_users$userIdB$name","nameA","name","toLowerCase","nameB","localeCompare","handleNecessaryEmployeesChange","updatedNecessaryEmployees","_userData$shift3","saveToDB","dayData","shiftCount","calculateTotalAssignedShifts","count","togglePublishStatus","alert","employeeList","u","startDate","weekRange","formattedStart","toISOString","slice","notificationLink","employeeId","fetchPublishStatusFromDB","_status$status","requiredCount","selectedCount","_userData$shift4","isPublishButtonDisabled","hasWeeklyNotes","userAvailability","trim","toggleEditStatus","fetchEditStatusFromDB","_status$isEditAllowed","calculateShiftCriticality","_necessaryEmployees$d3","necessary","selected","_userData$shift5","_userData$shift5$day","defaults","_userData$shift6","_userData$shift6$day","_userData$shift7","_userData$shift7$day","isAvailable","pow","findMostCriticalShifts","highestCriticality","Infinity","criticalShifts","_necessaryEmployees$d4","criticality","_userData$shift8","_userData$shift8$day","push","openConfirmModal","actionType","closeConfirmModal","getUserShiftTable","days","map","row","_availability$userId","_availability$userId$","shiftData","handleOfferShift","fromUser","recipients","_availability$id","_availability$id$Nigh","_availability$id$Nigh2","_availability$id2","_availability$id2$Mor","_availability$id2$Mor2","_availability$id3","_availability$id3$Noo","_availability$id3$Noo2","isAssignedThatDay","_shiftData$day","currentIndex","indexOf","prev","next","includes","Night","Morning","Noon","recipientId","_users$fromUser","link","success","_loggedInUser$user","offerShift","offerDay","offeredTo","_availability$fromUse","_availability$fromUse2","_availability$fromUse3","isStillOffered","info","approve","toUser","isAdminApproval","handleSwapProposal","_availability$me3","_availability$me3$Nig","_availability$me3$Nig2","_availability$them3","_availability$them3$N","_availability$them3$N2","_loggedInUser$user2","_Object$entries$find","_users$me","_users$them","myShift","myDay","me","theirShift","theirDay","them","daysOfWeek","myDayIndex","theirDayIndex","dayBeforeMyDay","dayBeforeTheirDay","dayAfterMyDay","dayAfterTheirDay","meAssignedOnTheirDay","_shiftData$theirDay","themAssignedOnMyDay","_shiftData$myDay","meMorningAfterTheirNight","s","_availability$me","_availability$me$s","_availability$me$s$da","themMorningAfterMyNight","_availability$them","_availability$them$s","_availability$them$s$","meNightAfterMorningBeforeTheirDay","_availability$me2","_availability$me2$s","_availability$me2$s$d","themNightAfterMorningBeforeMyDay","_availability$them2","_availability$them2$s","_availability$them2$s2","meMorningAfterNightBeforeTheirDay","themMorningAfterNightBeforeMyDay","updated","adminId","find","approveSwap","isAdminSwapApproval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","style","marginRight","index","_necessaryEmployees$d5","_necessaryEmployees$d6","_userData$shift9","isFullyStaffed","isMostCritical","criticalShift","type","onChange","e","_userData$shift10","_users$userIdA2","_users$userIdB2","_userData$shift11","_users$userId","statusClass","backgroundColor","color","pointerEvents","cursor","disabled","isTargetMet","hasNotes","textColor","max","stopPropagation","Evening","selectedEmployees","_userData$shift12","_users$userIdA3","_users$userIdA3$name","_users$userIdB3","_users$userIdB3$name","_users$userId2","isOwnShift","isSelected","isOfferedToMe","isSecondSelected","log","_user$companyIds","_availability$id4","_availability$id4$Nig","_availability$id4$Nig2","_availability$id5","_availability$id5$Mor","_availability$id5$Mor2","_availability$id6","_availability$id6$Noo","_availability$id6$Noo2","companyIds","_loggedInUser$company","_shiftData$selectedSh","previousDay","nextDay","a","b","_availability$fromUse4","_availability$fromUse5","_availability$fromUse6","_Object$entries$find2","_users$offeredTo","_availability$fromUse7","_availability$fromUse8","_availability$fromUse9","_users$fromUser2","_users$offeredTo2","_loggedInUser$user4","_loggedInUser$user5","fromUserName","offeredToName","_users$fromUser3","_users$offeredTo3","_availability$me4","_availability$me4$myS","_availability$me4$myS2","_availability$them4","_availability$them4$t","_availability$them4$t2","myStatus","theirStatus","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa';\nimport { ThreeDots } from 'react-loader-spinner';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\n\nimport { updateAvailabilityStatus, getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets, fetchPublishStatus, savePublishStatus, saveEditStatus, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nimport { sendNotification } from '../services/notificationService';\nimport { useLocation } from 'react-router-dom';\n\nimport { FaCalendarCheck, FaEdit } from 'react-icons/fa';\n\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const initialWeekOffset = parseInt(queryParams.get('weekOffset'), 10) || 0;\n    const [weekOffset, setWeekOffset] = useState(initialWeekOffset);\n\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n    const [highlightedUser, setHighlightedUser] = useState(null);\n    const [selectedUserNotes, setSelectedUserNotes] = useState('');\n    const [shiftCounts, setShiftCounts] = useState({});\n    const [necessaryEmployees, setNecessaryEmployees] = useState({});\n    const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n    const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n    const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n    const [totalWeeklyTargets, setTotalWeeklyTargets] = useState(0);\n    const [isPublished, setIsPublished] = useState(false);\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [isEditAllowed, setIsEditAllowed] = useState(false);\n    const [mostCriticalShifts, setMostCriticalShifts] = useState([]);\n    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n    const [isConfirmingPublish, setIsConfirmingPublish] = useState(false);\n    const [isConfirmingEdit, setIsConfirmingEdit] = useState(false);\n\n    const [isWarningVisible, setIsWarningVisible] = useState(false);\n    const [isViewingAsEmployee, setIsViewingAsEmployee] = useState(false);\n\n    const [selectedShiftToSwap, setSelectedShiftToSwap] = useState(null);\n\n    const [offerToUserId, setOfferToUserId] = useState('');\n\n    const [shiftOfferParams, setShiftOfferParams] = useState(null);\n\n    const [hasCheckedShiftOffer, setHasCheckedShiftOffer] = useState(false);\n\n    const [loggedInUser, setLoggedInUser] = useState(null);\n\n    const [secondSelectedShift, setSecondSelectedShift] = useState(null);\n\n    useEffect(() => {\n        const userFromStorage = JSON.parse(localStorage.getItem('user'));\n        setLoggedInUser(userFromStorage);\n        setIsAdmin(userFromStorage?.user.role === 'admin');\n        setHighlightedUser(userFromStorage?.user.id);\n    }, []);\n\n    useEffect(() => {\n        if (isPublished && !isScheduleFullyStaffed()) {\n            setIsWarningVisible(true);\n        } else {\n            setIsWarningVisible(false);\n        }\n    }, [availability, necessaryEmployees, isPublished]);\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת כל הנתונים הדרושים\n                const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers(),\n                    getNecessaryEmployees(companyId, weekKey),\n                    getWeeklyShiftTargets(companyId, weekKey), // קריאה לנתוני weeklyShiftTargets\n                ]);\n\n                // עדכון ה-states בהתאם לנתונים שהתקבלו מהשרת\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n                setNecessaryEmployees(necessaryEmployeesData || {});\n                calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n\n                // הגדרת ערכי ברירת מחדל ל-weeklyShiftTargets\n                const updatedWeeklyTargets = { ...weeklyTargetsData };\n                Object.values(usersData).forEach(user => {\n                    // בדיקה אם user.id קיים\n                    if (!user?.id) {\n                        console.warn(\"User without ID found:\", user);\n                        return; // דלג על משתמשים ללא ID\n                    }\n\n                    if (!updatedWeeklyTargets[user.id]) {\n                        updatedWeeklyTargets[user.id] = 0; // ערך ברירת מחדל\n                    }\n                });\n\n                setWeeklyShiftTargets(updatedWeeklyTargets);\n\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n                });\n                setWeekDates(dates);\n\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n    const handleWeeklyShiftTargetChange = async (userId, value) => {\n        const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n\n        if (parsedValue < shiftCounts[userId]) {\n            console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n            return; // עצירת השינוי\n        }\n\n        const updatedTargets = { ...weeklyShiftTargets, [userId]: parsedValue };\n        setWeeklyShiftTargets(updatedTargets);\n\n        const total = Object.values(updatedTargets).reduce((sum, target) => sum + (target || 0), 0);\n        setTotalWeeklyTargets(total);\n\n        const cleanedTargets = Object.fromEntries(\n            Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees') // סינון המפתח הלא רצוי\n        );\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n        } catch (error) {\n            console.error('Failed to save weekly shift targets:', error);\n        }\n    };\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status, userId, shift, day) => {\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n        }\n\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n        }\n\n        if (highlightedUser === userId) {\n            return status === 'disabled' ? 'status-disabled highlighted-user' : `highlighted-user ${status}`;\n        }\n\n        if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled'; // הכפתורים יהיו חסומים אם היעד השבועי הושג\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const handleEmployeeClick = async (userId) => {\n        if (highlightedUser === userId) {\n            setHighlightedUser(null);\n            setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n            return;\n        }\n\n        setSelectedUserNotes('');\n\n        setHighlightedUser(userId);\n\n        if (currentCompany && userId) {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n\n                const userNotes = availabilityData?.[userId]?.notes || 'No notes available.';\n                setSelectedUserNotes(userNotes);\n            } catch (err) {\n                console.error('Failed to fetch notes:', err);\n                setSelectedUserNotes('Error fetching notes.');\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (Object.keys(availability).length > 0) {\n            updateShiftCounts();\n        }\n    }, [availability]);\n\n    const updateShiftCounts = () => {\n        const counts = {};\n        let totalShifts = 0; // משתנה לספירת המשמרות הכוללות שהוקצו\n\n        Object.entries(availability).forEach(([userId, shifts]) => {\n            const userShiftCount = Object.values(shifts).reduce(\n                (sum, dayShifts) =>\n                    sum +\n                    Object.values(dayShifts).filter((shift) => shift.status === 'selected').length,\n                0\n            );\n            counts[userId] = userShiftCount;\n            totalShifts += userShiftCount; // הוספה למספר הכולל\n        });\n\n        setShiftCounts(counts);\n        setTotalAssignedShifts(totalShifts); // עדכון state של סך כל המשמרות\n    };\n\n    useEffect(() => {\n        const saveNecessaryEmployeesToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n\n                if (Object.keys(necessaryEmployees).length > 0) {\n                    await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n                }\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n\n        if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n            saveNecessaryEmployeesToDB();\n        }\n    }, [necessaryEmployees, currentCompany]);\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n            return;\n        }\n\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n            return;\n        }\n\n        if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            setAvailability(updatedAvailability);\n\n            updateShiftCounts();\n\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    const employeesWithAvailability = Object.entries(users)\n        .filter(([userId]) =>\n            availability[userId] && Object.values(availability[userId]).some((shifts) =>\n                Object.values(shifts).some((shift) => shift.status === 'selected' || shift.status === 'default')\n            )\n        )\n        .sort(([userIdA], [userIdB]) => {\n            const nameA = users[userIdA]?.name?.toLowerCase() || '';\n            const nameB = users[userIdB]?.name?.toLowerCase() || '';\n            return nameA.localeCompare(nameB); // מיון אלפביתי לפי שם\n        });\n\n    const handleNecessaryEmployeesChange = (day, shift, value) => {\n        const updatedNecessaryEmployees = { ...necessaryEmployees };\n\n        if (!updatedNecessaryEmployees[day]) {\n            updatedNecessaryEmployees[day] = {};\n        }\n\n        const parsedValue = parseInt(value, 10) || 0;\n\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        if (parsedValue < selectedEmployeesCount) {\n            return; // עצירת השינוי\n        }\n\n        updatedNecessaryEmployees[day][shift] = parsedValue;\n\n        setNecessaryEmployees(updatedNecessaryEmployees);\n        calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n\n        const saveToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n        saveToDB();\n    };\n\n    const calculateTotalNecessaryEmployees = (necessaryEmployeesData) => {\n        let total = 0;\n        Object.values(necessaryEmployeesData).forEach((dayData) => {\n            Object.values(dayData).forEach((shiftCount) => {\n                total += shiftCount || 0;\n            });\n        });\n        setTotalNecessaryEmployees(total);\n    };\n\n    const calculateTotalAssignedShifts = (shiftCounts) => {\n        const total = Object.values(shiftCounts).reduce((sum, count) => sum + count, 0);\n        setTotalAssignedShifts(total);\n    };\n\n    useEffect(() => {\n        const total = Object.values(weeklyShiftTargets).reduce((sum, target) => sum + (target || 0), 0);\n        setTotalWeeklyTargets(total);\n    }, [weeklyShiftTargets]);\n\n    const togglePublishStatus = async () => {\n        if (!isPublished && !isScheduleFullyStaffed()) {\n            alert('Cannot publish schedule: not all shifts are fully staffed.');\n            return;\n        }\n\n        try {\n            const newStatus = !isPublished;\n            const weekKey = calculateWeekKey(weekOffset);\n\n            await savePublishStatus(currentCompany, weekKey, newStatus);\n\n            if (newStatus) {\n                const employeeList = Object.entries(users).filter(([_, u]) => u.role === 'employee');\n                const startDate = new Date();\n                startDate.setDate(startDate.getDate() + weekOffset * 7 - startDate.getDay());\n\n                const weekRange = calculateWeekRange(weekOffset);\n                const formattedStart = startDate.toISOString().slice(0, 10); // YYYY-MM-DD\n                const notificationLink = `/schedule?weekOffset=${weekOffset}`;\n\n                for (const [employeeId] of employeeList) {\n                    await sendNotification(\n                        currentCompany,\n                        employeeId,\n                        `Weekly schedule for ${weekRange} has been published.`,\n                        notificationLink\n                    );\n                }\n            }\n\n            setIsPublished(newStatus);\n        } catch (error) {\n            console.error('Failed to toggle publish status:', error);\n        }\n    };\n\n    useEffect(() => {\n        const fetchPublishStatusFromDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const status = await fetchPublishStatus(currentCompany, weekKey);\n\n                // השתמש בערך שבתוך המפתח 'status' ולא באובייקט כולו\n                setIsPublished(status?.status ?? false); // True or False\n            } catch (error) {\n                console.error('Failed to fetch publish status:', error);\n            }\n        };\n\n        if (currentCompany) {\n            fetchPublishStatusFromDB();\n        }\n    }, [currentCompany, weekOffset]);\n\n    const isScheduleFullyStaffed = () => {\n        for (const day of Object.keys(necessaryEmployees || {})) {\n            for (const shift of Object.keys(necessaryEmployees[day] || {})) {\n                const requiredCount = necessaryEmployees[day][shift] || 0;\n                const selectedCount = Object.entries(availability).filter(([_, userData]) => {\n                    const availabilityInfo = userData?.[shift]?.[day];\n                    return availabilityInfo?.status === 'selected';\n                }).length;\n\n                if (selectedCount !== requiredCount) {\n                    return false; // לפחות משמרת אחת אינה מלאה\n                }\n            }\n        }\n        return true; // כל המשמרות מלאות\n    };\n\n    const isPublishButtonDisabled = !isScheduleFullyStaffed() && !isPublished;\n\n    const hasWeeklyNotes = (userId) => {\n        const userAvailability = availability[userId];\n        return userAvailability && userAvailability.notes && userAvailability.notes.trim() !== '';\n    };\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        setIsAdmin(loggedUser?.user.role === 'admin');\n        setHighlightedUser(loggedUser?.user.id); // סימון המשתמש הנוכחי\n    }, []);\n\n    const toggleEditStatus = async () => {\n        try {\n            const newStatus = !isEditAllowed;\n            const weekKey = calculateWeekKey(weekOffset);\n\n            await saveEditStatus(currentCompany, weekKey, newStatus);\n\n            setIsEditAllowed(newStatus);\n        } catch (error) {\n            console.error('Failed to toggle edit status:', error);\n        }\n    };\n\n    useEffect(() => {\n        const fetchEditStatusFromDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const status = await fetchEditStatus(currentCompany, weekKey);\n\n                setIsEditAllowed(status?.isEditAllowed ?? false); // ברירת מחדל ל-false אם אין מידע\n            } catch (error) {\n                console.error('Failed to fetch edit status:', error);\n            }\n        };\n\n        if (currentCompany) {\n            fetchEditStatusFromDB();\n        }\n    }, [currentCompany, weekOffset]);\n\n    const calculateShiftCriticality = (day, shift) => {\n        const necessary = necessaryEmployees?.[day]?.[shift] || 0;\n        const selected = Object.values(availability).filter(userData =>\n            userData?.[shift]?.[day]?.status === 'selected'\n        ).length;\n\n        const defaults = Object.entries(availability)\n            .filter(([_, userData]) => {\n                const status = userData?.[shift]?.[day]?.status;\n                return userData?.[shift]?.[day]?.isAvailable && status !== 'selected' && status !== 'disabled';\n            })\n            .length;\n\n        if (necessary === selected) return 0; // משמרת מלאה אינה קריטית\n\n        return (necessary - selected) / Math.pow((defaults + 1), 2);\n    };\n\n    const findMostCriticalShifts = () => {\n        let highestCriticality = -Infinity;\n        let criticalShifts = [];\n\n        Object.keys(necessaryEmployees || {}).forEach(day => {\n            Object.keys(necessaryEmployees[day] || {}).forEach(shift => {\n                const criticality = calculateShiftCriticality(day, shift);\n                const necessary = necessaryEmployees?.[day]?.[shift] || 0;\n                const selected = Object.values(availability).filter(userData =>\n                    userData?.[shift]?.[day]?.status === 'selected'\n                ).length;\n\n                if (necessary === selected) return; // אם המשמרת מלאה, אין צורך להוסיף אותה\n\n                if (criticality > highestCriticality) {\n                    highestCriticality = criticality;\n                    criticalShifts = [{ day, shift }];\n                } else if (criticality === highestCriticality && criticality > 0) {\n                    criticalShifts.push({ day, shift });\n                }\n            });\n        });\n\n        return criticalShifts;\n    };\n\n    useEffect(() => {\n        setMostCriticalShifts(findMostCriticalShifts());\n    }, [necessaryEmployees, availability]);\n\n    const openConfirmModal = (actionType) => {\n        if (actionType === 'publish') {\n            setIsConfirmingPublish(true);\n            setIsConfirmingEdit(false);\n        } else if (actionType === 'edit') {\n            setIsConfirmingEdit(true);\n            setIsConfirmingPublish(false);\n        }\n        setIsConfirmModalOpen(true);\n    };\n\n    const closeConfirmModal = () => {\n        setIsConfirmModalOpen(false);\n    };\n\n    const getUserShiftTable = (userId) => {\n        if (!availability[userId]) return [];\n\n        const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        return shifts.map((shift) => {\n            const row = { shift: shift[0] + (shift === 'Night' ? 't' : '') }; // קיצור לשם המשמרת\n            days.forEach((day) => {\n                const shiftData = availability[userId]?.[shift]?.[day];\n                if (shiftData?.status === 'selected') {\n                    row[day] = '✅'; // שובץ\n                } else if (shiftData?.isAvailable) {\n                    row[day] = '🟠'; // רק זמינות (חלול)\n                } else {\n                    row[day] = ''; // לא הגיש זמינות\n                }\n            });\n            return row;\n        });\n    };\n\n    const handleOfferShift = async () => {\n        const weekKey = calculateWeekKey(weekOffset);\n        const shift = selectedShiftToSwap.shift;\n        const day = selectedShiftToSwap.day;\n        const fromUser = selectedShiftToSwap.userId;\n\n        const weekRange = calculateWeekRange(weekOffset);\n\n        let recipients = [];\n\n        if (offerToUserId) {\n            // נבחר עובד ספציפי\n            recipients.push(offerToUserId);\n        } else {\n            // \"No one specific\" - שלח לכל מי שנשאר בתפריט אחרי הסינונים\n            recipients = Object.entries(users)\n                .filter(([id, user]) => {\n                    if (id === fromUser) return false;\n\n                    // ❗ סינון לפי רגולציה: לא ניתן להציע לעובד עם 6 משמרות שובצות\n                    const currentShiftCount = shiftCounts[id] || 0;\n                    if (currentShiftCount >= 6) return false;\n\n                    const isAssignedThatDay = Object.values(availability?.[id] || {}).some(\n                        shiftData => shiftData?.[day]?.status === 'selected'\n                    );\n                    if (isAssignedThatDay) return false;\n\n                    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                    const currentIndex = days.indexOf(day);\n                    const prev = days[currentIndex - 1];\n                    const next = days[currentIndex + 1];\n\n                    if (\n                        ['Morning', 'Noon'].includes(shift) &&\n                        prev &&\n                        availability?.[id]?.Night?.[prev]?.status === 'selected'\n                    ) return false;\n\n                    if (\n                        shift === 'Night' &&\n                        next &&\n                        (\n                            availability?.[id]?.Morning?.[next]?.status === 'selected' ||\n                            availability?.[id]?.Noon?.[next]?.status === 'selected'\n                        )\n                    ) return false;\n\n                    return true;\n                })\n                .map(([id]) => id);\n\n        }\n\n        for (const recipientId of recipients) {\n            const link = `/schedule?weekOffset=${weekOffset}&offerShift=true&offerDay=${day}&shift=${shift}&fromUser=${fromUser}&offeredTo=${recipientId}`;\n\n            await sendNotification(\n                currentCompany,\n                recipientId,\n                `You are offered to take ${shift} shift on ${day} (Week: ${weekRange}) from ${users[fromUser]?.name || 'a colleague'}.`,\n                link\n            );\n        }\n\n        toast.success('Shift offer sent successfully!');\n        setSelectedShiftToSwap(null);\n        setOfferToUserId('');\n    };\n\n    useEffect(() => {\n        if (hasCheckedShiftOffer || isLoading || !loggedInUser) return; // ← חשוב!\n\n        const offerShift = queryParams.get('offerShift');\n        const offerDay = queryParams.get('offerDay');\n        const offeredTo = queryParams.get('offeredTo');\n        const fromUser = queryParams.get('fromUser');\n        const shift = queryParams.get('shift');\n\n        if (\n            offerShift === 'true' &&\n            offerDay &&\n            shift &&\n            fromUser &&\n            loggedInUser?.user?.id === offeredTo // ← זה התנאי הנכון\n        ) {\n            const isStillOffered = availability?.[fromUser]?.[shift]?.[offerDay]?.status === 'selected';\n\n            if (!isStillOffered) {\n                toast.info('This shift offer is no longer available.');\n            } else {\n                setShiftOfferParams({\n                    day: offerDay,\n                    shift,\n                    fromUser,\n                    offeredTo,\n                    weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n                });\n            }\n\n            setHasCheckedShiftOffer(true);\n        }\n    }, [location.search, availability, isLoading, loggedInUser]); // ← חשוב להוסיף את loggedInUser כאן\n\n    useEffect(() => {\n        const approve = queryParams.get('approveShiftTransfer');\n        const day = queryParams.get('day');\n        const shift = queryParams.get('shift');\n        const fromUser = queryParams.get('fromUser');\n        const toUser = queryParams.get('toUser');\n\n        if (\n            approve === 'true' &&\n            day && shift && fromUser && toUser &&\n            isAdmin // רק אם המנהל מחובר\n        ) {\n            setShiftOfferParams({\n                day,\n                shift,\n                fromUser,\n                offeredTo: toUser,\n                weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n                isAdminApproval: true\n            });\n        }\n    }, [location.search, isAdmin]);\n\n    const handleSwapProposal = async () => {\n        const { shift: myShift, day: myDay, userId: me } = selectedShiftToSwap;\n        const { shift: theirShift, day: theirDay, userId: them } = secondSelectedShift;\n\n        const weekKey = calculateWeekKey(weekOffset);\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const myDayIndex = daysOfWeek.indexOf(myDay);\n        const theirDayIndex = daysOfWeek.indexOf(theirDay);\n        const dayBeforeMyDay = daysOfWeek[myDayIndex - 1];\n        const dayBeforeTheirDay = daysOfWeek[theirDayIndex - 1];\n        const dayAfterMyDay = daysOfWeek[myDayIndex + 1];\n        const dayAfterTheirDay = daysOfWeek[theirDayIndex + 1];\n\n        const meAssignedOnTheirDay = Object.entries(availability[me] || {}).some(\n            ([_, shiftData]) => shiftData?.[theirDay]?.status === 'selected'\n        );\n        const themAssignedOnMyDay = Object.entries(availability[them] || {}).some(\n            ([_, shiftData]) => shiftData?.[myDay]?.status === 'selected'\n        );\n\n        const meMorningAfterTheirNight = theirShift === 'Night' &&\n            dayAfterTheirDay &&\n            ['Morning', 'Noon'].some(s => availability?.[me]?.[s]?.[dayAfterTheirDay]?.status === 'selected');\n\n        const themMorningAfterMyNight = myShift === 'Night' &&\n            dayAfterMyDay &&\n            ['Morning', 'Noon'].some(s => availability?.[them]?.[s]?.[dayAfterMyDay]?.status === 'selected');\n\n        const meNightAfterMorningBeforeTheirDay = theirShift === 'Night' &&\n            dayBeforeTheirDay &&\n            ['Morning', 'Noon'].some(s => availability?.[me]?.[s]?.[dayBeforeTheirDay]?.status === 'selected');\n\n        const themNightAfterMorningBeforeMyDay = myShift === 'Night' &&\n            dayBeforeMyDay &&\n            ['Morning', 'Noon'].some(s => availability?.[them]?.[s]?.[dayBeforeMyDay]?.status === 'selected');\n\n        const meMorningAfterNightBeforeTheirDay = ['Morning', 'Noon'].includes(theirShift) &&\n            dayBeforeTheirDay &&\n            availability?.[me]?.Night?.[dayBeforeTheirDay]?.status === 'selected';\n\n        const themMorningAfterNightBeforeMyDay = ['Morning', 'Noon'].includes(myShift) &&\n            dayBeforeMyDay &&\n            availability?.[them]?.Night?.[dayBeforeMyDay]?.status === 'selected';\n\n        if (\n            meAssignedOnTheirDay ||\n            themAssignedOnMyDay ||\n            meMorningAfterTheirNight ||\n            themMorningAfterMyNight ||\n            meNightAfterMorningBeforeTheirDay ||\n            themNightAfterMorningBeforeMyDay ||\n            meMorningAfterNightBeforeTheirDay ||\n            themMorningAfterNightBeforeMyDay\n        ) {\n            toast.error(\"Swap not allowed: Conflict with shift-before/after rules or existing assignments.\");\n            return;\n        }\n\n        if (loggedInUser?.user?.role === 'admin') {\n            await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n            await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n            await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n            await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n\n            const updated = { ...availability };\n            updated[me][myShift][myDay].status = 'default';\n            updated[them][theirShift][theirDay].status = 'default';\n\n            updated[me][theirShift] ||= {};\n            updated[me][theirShift][theirDay] ||= { isAvailable: true };\n            updated[me][theirShift][theirDay].status = 'selected';\n\n            updated[them][myShift] ||= {};\n            updated[them][myShift][myDay] ||= { isAvailable: true };\n            updated[them][myShift][myDay].status = 'selected';\n\n            setAvailability(updated);\n            updateShiftCounts();\n\n            setSelectedShiftToSwap(null);\n            setSecondSelectedShift(null);\n            toast.success(\"Swap completed successfully.\");\n            return;\n        }\n\n        const adminId = Object.entries(users).find(([, u]) => u.role === 'admin')?.[0];\n        if (!adminId) {\n            toast.error('Admin not found.');\n            return;\n        }\n\n        const notificationLink = `/schedule?weekOffset=${weekOffset}&approveSwap=true&me=${me}&them=${them}&myDay=${myDay}&myShift=${myShift}&theirDay=${theirDay}&theirShift=${theirShift}`;\n\n        await sendNotification(\n            currentCompany,\n            adminId,\n            `${users[me]?.name || 'An employee'} requested to swap their ${myShift} shift on ${myDay} with ${users[them]?.name || 'another employee'}'s ${theirShift} shift on ${theirDay}.`,\n            notificationLink\n        );\n\n        toast.success('Your swap request has been sent to the admin.');\n        setSelectedShiftToSwap(null);\n        setSecondSelectedShift(null);\n    };\n\n    useEffect(() => {\n        const approveSwap = queryParams.get('approveSwap');\n        const me = queryParams.get('me');\n        const them = queryParams.get('them');\n        const myDay = queryParams.get('myDay');\n        const myShift = queryParams.get('myShift');\n        const theirDay = queryParams.get('theirDay');\n        const theirShift = queryParams.get('theirShift');\n\n        if (\n            approveSwap === 'true' &&\n            me && them && myDay && myShift && theirDay && theirShift &&\n            isAdmin\n        ) {\n            setShiftOfferParams({\n                isAdminSwapApproval: true,\n                me, them, myDay, myShift, theirDay, theirShift,\n                weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n            });\n        }\n    }, [location.search, isAdmin]);\n\n    return (\n        <BackgroundWrapper >\n            <div>\n                <Navbar />\n                <ToastContainer />\n\n                {isConfirmModalOpen && (\n                    <div className=\"modal-overlay\">\n                        <div className=\"modal-content\">\n                            <h2>\n                                {isConfirmingPublish\n                                    ? isPublished ? 'Confirm Schedule Unpublishing' : 'Confirm Schedule Publication'\n                                    : isConfirmingEdit\n                                        ? isEditAllowed ? 'Confirm Disabling Editing' : 'Confirm Enabling Editing'\n                                        : ''}\n                            </h2>\n                            <p>\n                                {isConfirmingPublish\n                                    ? isPublished ? 'Are you sure you want to unpublish this schedule?' : 'Are you sure you want to publish this schedule?'\n                                    : isConfirmingEdit\n                                        ? isEditAllowed ? 'Are you sure you want to disable weekly availability submissions?' : 'Are you sure you want to enable weekly availability submissions?'\n                                        : ''}\n                            </p>\n                            <div className=\"modal-buttons\">\n                                <button className=\"confirm-button\" onClick={() => {\n                                    if (isConfirmingPublish) {\n                                        togglePublishStatus();\n                                    } else if (isConfirmingEdit) {\n                                        toggleEditStatus();\n                                    }\n                                    closeConfirmModal();\n                                }}>\n                                    Confirm\n                                </button>\n                                <button className=\"cancel-button\" onClick={closeConfirmModal}>Cancel</button>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                <div className=\"navbar-placeholder\"></div>\n                <div className=\"schedule-container\">\n                    <h1>Weekly Schedule</h1>\n                    {isAdmin && (\n                        <div className=\"view-toggle-container\">\n                            <button\n                                className=\"view-toggle-button\"\n                                onClick={() => setIsViewingAsEmployee(prev => !prev)}\n                            >\n                                {isViewingAsEmployee ? <FaEdit style={{ marginRight: '6px' }} /> : <FaCalendarCheck style={{ marginRight: '6px' }} />}\n                                {isViewingAsEmployee ? 'Back to Draft View' : 'View Final Schedule'}\n                            </button>\n                        </div>\n                    )}\n\n                    {isLoading ? (\n                        <Loader />\n\n                    ) : error ? (\n                        <p className=\"error\">{error}</p>\n                    ) : (\n                        <>\n                            {!isAdmin && (\n                                <div className=\"week-navigation centered-navigation\">\n                                    <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                        Previous Week\n                                    </button>\n                                    <h2 className=\"week-range\">{calculateWeekRange(weekOffset)}</h2>\n                                    <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                        Next Week\n                                    </button>\n                                </div>\n                            )}\n\n                            {(isAdmin && !isViewingAsEmployee) ? (\n                                <div className=\"schedule-content\">\n                                    <table className=\"schedule-table\">\n                                        <thead>\n                                            <tr>\n                                                <th>Shift</th>\n                                                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                                    (day, index) => (\n                                                        <th key={day}>\n                                                            {day} <br />\n                                                            <span className=\"date\">{weekDates[index]}</span>\n                                                        </th>\n                                                    )\n                                                )}\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                                <tr key={shift}>\n                                                    <td>{shift}</td>\n                                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                        const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                                                            const availabilityInfo = userData?.[shift]?.[day];\n                                                            return availabilityInfo?.status === 'selected';\n                                                        }).length;\n\n                                                        const isFullyStaffed = selectedEmployeesCount === (necessaryEmployees?.[day]?.[shift] || 0);\n                                                        const criticality = calculateShiftCriticality(day, shift);\n                                                        const isMostCritical = mostCriticalShifts.some(criticalShift =>\n                                                            criticalShift.day === day && criticalShift.shift === shift\n                                                        );\n\n                                                        return (\n                                                            <td\n                                                                key={day}\n                                                                className={`schedule-cell \n                                                                ${isFullyStaffed ? 'fully-staffed' : ''} \n                                                                ${isMostCritical ? 'most-critical' : ''}\n                                                            `}\n                                                            >\n\n                                                                <input\n                                                                    type=\"number\"\n                                                                    min=\"0\"\n                                                                    className=\"necessary-employees-input\"\n                                                                    value={necessaryEmployees?.[day]?.[shift] || 0}\n                                                                    onChange={(e) => handleNecessaryEmployeesChange(day, shift, e.target.value)}\n                                                                />\n\n                                                                <div className=\"selected-employees-indicator\">\n                                                                    {selectedEmployeesCount} Selected\n                                                                </div>\n\n                                                                {Object.entries(availability)\n                                                                    .filter(([userId, userData]) => {\n                                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                                        return availabilityInfo?.isAvailable; // רק עובדים זמינים\n                                                                    })\n                                                                    .sort(([userIdA], [userIdB]) => {\n                                                                        const nameA = users[userIdA]?.name || '';\n                                                                        const nameB = users[userIdB]?.name || '';\n                                                                        return nameA.localeCompare(nameB); // מיון אלפביתי לפי שם\n                                                                    })\n                                                                    .map(([userId, userData]) => {\n                                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                                        const statusClass = getStatusClass(availabilityInfo.status, userId);\n\n                                                                        return (\n                                                                            <div\n                                                                                key={userId}\n                                                                                className={`availability-entry ${statusClass}`}\n                                                                                onClick={() =>\n                                                                                    handleStatusUpdate(\n                                                                                        userId,\n                                                                                        shift,\n                                                                                        day,\n                                                                                        availabilityInfo.status\n                                                                                    )\n                                                                                }\n                                                                                style={{\n                                                                                    backgroundColor:\n                                                                                        availabilityInfo.status === 'selected'\n                                                                                            ? '#2ecc71'\n                                                                                            : availabilityInfo.status === 'disabled'\n                                                                                                ? '#e74c3c'\n                                                                                                : '#ffff',\n                                                                                    color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                                    pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                                    cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                                }}\n                                                                            >\n                                                                                {users[userId]?.name || 'Unknown'}\n                                                                            </div>\n                                                                        );\n                                                                    })}\n                                                            </td>\n                                                        );\n                                                    })}\n                                                </tr>\n                                            ))}\n\n                                        </tbody>\n                                    </table>\n\n                                    <div className=\"employees-list\">\n                                        <h3>Employees</h3>\n\n                                        <div className=\"week-navigation\">\n                                            <button className=\"week-nav-button\" onClick={() => handleWeekChange(-1)}>\n                                                <FaChevronLeft />\n                                            </button>\n                                            <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                                            <button className=\"week-nav-button\" onClick={() => handleWeekChange(1)}>\n                                                <FaChevronRight />\n                                            </button>\n                                        </div>\n\n                                        <div className=\"buttons-container\">\n                                            {isWarningVisible && (\n                                                <div className=\"warning-banner\">\n                                                    ⚠️ Warning: One or more shifts are no longer fully staffed. Please review the schedule.\n                                                </div>\n                                            )}\n\n                                            <button\n                                                className={`general-button ${isPublished ? 'green' : 'red'}`}\n                                                onClick={() => openConfirmModal('publish')}\n                                                disabled={isPublishButtonDisabled}\n                                            >\n                                                {isPublished ? 'Unpublish Schedule' : 'Publish Schedule'}\n                                                {isWarningVisible && <span className=\"publish-warning-icon\">🔴</span>}\n                                            </button>\n\n                                            <button\n                                                className={`general-button ${isEditAllowed ? 'green' : 'red'}`}\n                                                onClick={() => openConfirmModal('edit')}\n                                            >\n                                                {isEditAllowed ? 'Disable Editing' : 'Enable Editing'}\n                                            </button>\n\n                                        </div>\n\n                                        <div className=\"total-info-container\">\n                                            <h3>Weekly Overview</h3>\n                                            <hr />\n                                            <p>Weekly Staff: <span>{totalNecessaryEmployees}</span></p>\n                                            <hr />\n                                            <p>Weekly Shift Targets: <span>{totalWeeklyTargets}</span></p>\n                                            <hr />\n                                            <p>Assigned Shifts: <span>{totalAssignedShifts}</span></p>\n                                            <hr />\n                                        </div>\n\n                                        <ul>\n                                            {employeesWithAvailability.map(([userId, user]) => {\n                                                const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId]; // בדיקה אם היעד הושג\n                                                const hasNotes = hasWeeklyNotes(userId); // בדיקה אם יש הערות לעובד זה\n                                                const backgroundColor = hasNotes ? 'yellow' : '#2980b9'; // צהוב אם יש הערות, כחול אם אין\n                                                const textColor = hasNotes ? 'black' : 'white'; // טקסט שחור אם צהוב, לבן אם כחול\n\n                                                return (\n                                                    <li\n                                                        key={userId}\n                                                        onClick={() => handleEmployeeClick(userId)}\n                                                        className={`${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`}\n                                                        style={{\n                                                            backgroundColor: isTargetMet ? '#d4edda' : 'inherit', // צבע רקע ירוק בהיר אם היעד הושג\n                                                        }}\n                                                    >\n                                                        <div className=\"employee-details\">\n\n                                                            <span\n                                                                className=\"notes-indicator\"\n                                                                style={{\n                                                                    backgroundColor: backgroundColor,\n                                                                    color: textColor, // צבע הטקסט לפי צבע הרקע\n                                                                }}\n                                                            >\n                                                                <span className=\"indicator-text\">i</span> {/* האות i */}\n                                                            </span>\n\n                                                            <span className=\"employee-name\">\n                                                                {user.name}\n                                                            </span>\n\n                                                            <div className=\"weekly-shift-target\">\n                                                                <label>\n                                                                    {shiftCounts[userId] || 0} shifts out of:\n                                                                    <input\n                                                                        type=\"number\"\n                                                                        min=\"0\"\n                                                                        max=\"6\" // הגבלה ברמת ה-UI\n                                                                        value={weeklyShiftTargets[userId] || 0}\n                                                                        onClick={(e) => e.stopPropagation()} // עצירת האירוע\n                                                                        onChange={(e) => handleWeeklyShiftTargetChange(userId, e.target.value)}\n                                                                        className=\"weekly-shift-input\"\n                                                                    />\n                                                                </label>\n                                                            </div>\n\n                                                            {highlightedUser === userId && (\n                                                                <>\n                                                                    {selectedUserNotes && selectedUserNotes !== 'No notes available.' && (\n                                                                        <div className=\"employee-notes\">\n                                                                            <h4>Notes:</h4>\n                                                                            <p>{selectedUserNotes}</p>\n                                                                        </div>\n                                                                    )}\n\n                                                                    <div className=\"employee-table\">\n                                                                        <div className=\"mini-schedule-legend compact\">\n                                                                            <span className=\"legend-symbol\">✅</span> Assigned &nbsp;&nbsp;\n                                                                            <span className=\"legend-symbol\">🟠</span> Submitted\n                                                                        </div>\n\n                                                                        <table className=\"mini-schedule-table\">\n                                                                            <thead>\n                                                                                <tr>\n                                                                                    <th>Shift</th>\n                                                                                    {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                                                                                        <th key={day}>{day}</th>\n                                                                                    ))}\n                                                                                </tr>\n                                                                            </thead>\n                                                                            <tbody>\n                                                                                {getUserShiftTable(userId).map((row) => (\n                                                                                    <tr key={row.shift}>\n                                                                                        <td>\n                                                                                            {{\n                                                                                                Morning: 'M',\n                                                                                                Noon: 'N',\n                                                                                                Evening: 'E',\n                                                                                                Night: 'Nt'\n                                                                                            }[row.shift] || row.shift}\n                                                                                        </td>\n                                                                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => (\n                                                                                            <td key={day}>{row[day]}</td>\n                                                                                        ))}\n                                                                                    </tr>\n                                                                                ))}\n                                                                            </tbody>\n                                                                        </table>\n                                                                    </div>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </li>\n                                                );\n                                            })}\n                                        </ul>\n                                    </div>\n                                </div>\n                            ) : (\n                                isPublished ? (\n                                    <div>\n                                        <div className=\"schedule-content\">\n                                            <table className=\"schedule-table\">\n                                                <thead>\n                                                    <tr>\n                                                        <th>Shift</th>\n                                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                                            (day, index) => (\n                                                                <th key={day}>\n                                                                    {day} <br />\n                                                                    <span className=\"date\">{weekDates[index]}</span>\n                                                                </th>\n                                                            )\n                                                        )}\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                                        <tr key={shift}>\n                                                            <td>{shift}</td>\n                                                            {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                                const selectedEmployees = Object.entries(availability).filter(([userId, userData]) => {\n                                                                    const availabilityInfo = userData?.[shift]?.[day];\n                                                                    return availabilityInfo?.status === 'selected';\n                                                                });\n\n                                                                return (\n                                                                    <td key={day} className=\"schedule-cell\">\n\n                                                                        {selectedEmployees\n                                                                            .sort(([userIdA], [userIdB]) => {\n                                                                                const nameA = users[userIdA]?.name?.toLowerCase() || '';\n                                                                                const nameB = users[userIdB]?.name?.toLowerCase() || '';\n                                                                                return nameA.localeCompare(nameB);\n                                                                            })\n                                                                            .map(([userId]) => {\n                                                                                const isOwnShift = userId === highlightedUser;\n                                                                                const isSelected = selectedShiftToSwap &&\n                                                                                    selectedShiftToSwap.userId === userId &&\n                                                                                    selectedShiftToSwap.day === day &&\n                                                                                    selectedShiftToSwap.shift === shift;\n\n                                                                                const isOfferedToMe = shiftOfferParams &&\n                                                                                    userId === shiftOfferParams.fromUser &&\n                                                                                    shift === shiftOfferParams.shift &&\n                                                                                    day === shiftOfferParams.day;\n\n                                                                                const isSecondSelected = secondSelectedShift &&\n                                                                                    secondSelectedShift.userId === userId &&\n                                                                                    secondSelectedShift.day === day &&\n                                                                                    secondSelectedShift.shift === shift;\n\n                                                                                console.log('[DEBUG] checking cell', {\n                                                                                    userId,\n                                                                                    shift,\n                                                                                    day,\n                                                                                    highlightedUser,\n                                                                                    isOwnShift,\n                                                                                    isSelected,\n                                                                                    isOfferedToMe,\n                                                                                    shiftOfferParams,\n                                                                                });\n\n                                                                                return (\n                                                                                    <div\n                                                                                        key={userId}\n                                                                                        className={`employee-button \n                                                                                        ${isOwnShift ? 'highlighted-own-shift' : ''} \n                                                                                        ${isSelected ? 'highlighted-swap-source' : ''} \n                                                                                        ${isSecondSelected ? 'highlighted-swap-target' : ''} \n                                                                                        ${isOfferedToMe ? 'offered-to-me' : ''} \n                                                                                        ${shiftOfferParams?.isAdminSwapApproval &&\n                                                                                                (\n                                                                                                    (userId === shiftOfferParams.me &&\n                                                                                                        shift === shiftOfferParams.myShift &&\n                                                                                                        day === shiftOfferParams.myDay) ||\n                                                                                                    (userId === shiftOfferParams.them &&\n                                                                                                        shift === shiftOfferParams.theirShift &&\n                                                                                                        day === shiftOfferParams.theirDay)\n                                                                                                )\n                                                                                                ? 'highlighted-swap'\n                                                                                                : ''\n                                                                                            }\n                                                                                    `}\n\n                                                                                        onClick={() => {\n                                                                                            if (isOwnShift) {\n                                                                                                // אם המשתמש לוחץ על המשמרת של עצמו\n                                                                                                if (\n                                                                                                    selectedShiftToSwap &&\n                                                                                                    selectedShiftToSwap.userId === userId &&\n                                                                                                    selectedShiftToSwap.shift === shift &&\n                                                                                                    selectedShiftToSwap.day === day\n                                                                                                ) {\n                                                                                                    setSelectedShiftToSwap(null);\n                                                                                                    setSecondSelectedShift(null);\n                                                                                                } else {\n                                                                                                    setSelectedShiftToSwap({ userId, shift, day });\n                                                                                                    setSecondSelectedShift(null); // איפוס בחירה קודמת\n                                                                                                }\n                                                                                            } else if (selectedShiftToSwap && !secondSelectedShift) {\n                                                                                                // אם נבחרה כבר משמרת של המשתמש, ועכשיו נבחרה של מישהו אחר\n                                                                                                setSecondSelectedShift({ userId, shift, day });\n                                                                                            } else {\n                                                                                                // כל מקרה אחר – איפוס\n                                                                                                setSelectedShiftToSwap(null);\n                                                                                                setSecondSelectedShift(null);\n                                                                                            }\n                                                                                        }}\n                                                                                    >\n                                                                                        {users[userId]?.name || 'Unknown'}\n                                                                                    </div>\n                                                                                );\n                                                                            })\n                                                                        }\n                                                                    </td>\n                                                                );\n                                                            })}\n                                                        </tr>\n                                                    ))}\n                                                </tbody>\n                                            </table>\n\n                                            {isAdmin && (\n                                                <div className=\"employees-list\">\n                                                    <h3>Employees</h3>\n                                                    <ul>\n                                                        {employeesWithAvailability.map(([userId, user]) => {\n                                                            return (\n                                                                <li\n                                                                    key={userId}\n                                                                    onClick={() => handleEmployeeClick(userId)}\n                                                                    className={`${highlightedUser === userId ? 'selected' : ''}`}\n                                                                >\n                                                                    <div className=\"employee-details\">\n                                                                        <span className=\"employee-name\">{user.name}</span>\n                                                                    </div>\n                                                                </li>\n                                                            );\n                                                        })}\n                                                    </ul>\n                                                </div>\n                                            )}\n\n                                        </div>\n                                        {selectedShiftToSwap && (\n                                            secondSelectedShift ? (\n                                                // טופס החלפה (Swap) בין שני עובדים\n                                                <div className=\"swap-request-container\">\n                                                    <h3>Swap Shifts With Another Employee</h3>\n                                                    <p>\n                                                        You are proposing to swap your <strong>{selectedShiftToSwap.shift}</strong> shift on <strong>{selectedShiftToSwap.day}</strong>\n                                                        with <strong>{users[secondSelectedShift.userId]?.name}</strong>'s\n                                                        <strong> {secondSelectedShift.shift}</strong> shift on <strong>{secondSelectedShift.day}</strong>.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            onClick={handleSwapProposal} // פונקציה שנוסיף בהמשך\n                                                        >\n                                                            Propose Swap\n                                                        </button>\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            style={{ backgroundColor: '#e74c3c' }}\n                                                            onClick={() => {\n                                                                setSelectedShiftToSwap(null);\n                                                                setSecondSelectedShift(null);\n                                                            }}\n                                                        >\n                                                            Cancel\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            ) : (\n                                                // טופס רגיל של הצעת משמרת\n                                                <div className=\"swap-request-container\">\n                                                    <h3>Offer Shift to Another Employee</h3>\n                                                    <p>\n                                                        You are offering your <strong>{selectedShiftToSwap.shift}</strong> shift on <strong>{selectedShiftToSwap.day}</strong> to another employee.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <label>\n                                                            Choose employee to offer the shift to:\n                                                            <select value={offerToUserId} onChange={(e) => setOfferToUserId(e.target.value)}>\n                                                                <option value=\"\">No one specific</option>\n                                                                {Object.entries(users)\n                                                                    .filter(([id, user]) => {\n                                                                        if (id === selectedShiftToSwap.userId) return false;\n\n                                                                        if (!user.companyIds?.some((company) => company.companyId === loggedInUser?.company?.id)) return false;\n\n                                                                        // ✅ סינון לפי רגולציה\n                                                                        if ((shiftCounts[id] || 0) >= 6) return false;\n\n                                                                        const isAssignedThatDay = Object.values(availability?.[id] || {}).some(\n                                                                            shiftData => shiftData?.[selectedShiftToSwap.day]?.status === 'selected'\n                                                                        );\n                                                                        if (isAssignedThatDay) return false;\n\n                                                                        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                                                                        const currentIndex = days.indexOf(selectedShiftToSwap.day);\n                                                                        const previousDay = days[currentIndex - 1];\n                                                                        const nextDay = days[currentIndex + 1];\n\n                                                                        if (['Morning', 'Noon'].includes(selectedShiftToSwap.shift) &&\n                                                                            previousDay &&\n                                                                            availability?.[id]?.Night?.[previousDay]?.status === 'selected'\n                                                                        ) return false;\n\n                                                                        if (selectedShiftToSwap.shift === 'Night' &&\n                                                                            nextDay &&\n                                                                            (\n                                                                                availability?.[id]?.Morning?.[nextDay]?.status === 'selected' ||\n                                                                                availability?.[id]?.Noon?.[nextDay]?.status === 'selected'\n                                                                            )\n                                                                        ) return false;\n\n                                                                        return true;\n                                                                    })\n\n                                                                    .sort(([, a], [, b]) => (a.name || '').localeCompare(b.name || ''))\n                                                                    .map(([id, user]) => (\n                                                                        <option key={id} value={id}>\n                                                                            {user.name}\n                                                                        </option>\n                                                                    ))}\n                                                            </select>\n                                                        </label>\n\n                                                        <button className=\"submit-swap-button\" onClick={handleOfferShift}>\n                                                            Offer Shift\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )\n                                        )}\n\n                                        {shiftOfferParams &&\n                                            loggedInUser?.user?.id === shiftOfferParams.offeredTo &&\n                                            availability?.[shiftOfferParams.fromUser]?.[shiftOfferParams.shift]?.[shiftOfferParams.day]?.status === 'selected' && (\n\n                                                <div className=\"swap-request-container\">\n                                                    <h3>You’ve received a shift offer</h3>\n                                                    <p>\n                                                        You are being offered the <strong>{shiftOfferParams.shift}</strong> shift on <strong>{shiftOfferParams.day}</strong> by{' '}\n                                                        <strong>{users[shiftOfferParams.fromUser]?.name || 'a colleague'}</strong>.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <button\n                                                            className=\"accept-swap-button\"\n                                                            onClick={async () => {\n                                                                const weekKey = calculateWeekKey(shiftOfferParams.weekOffset);\n                                                                const { shift, day, fromUser, offeredTo } = shiftOfferParams;\n\n                                                                const currentStatus = availability?.[fromUser]?.[shift]?.[day]?.status;\n                                                                if (currentStatus !== 'selected') {\n                                                                    toast.error('This shift has already been taken by someone else.');\n                                                                    setShiftOfferParams(null);\n                                                                    return;\n                                                                }\n\n                                                                const adminId = Object.entries(users).find(([, u]) => u.role === 'admin')?.[0];\n                                                                if (!adminId) {\n                                                                    toast.error('Admin not found.');\n                                                                    return;\n                                                                }\n\n                                                                const weekRange = calculateWeekRange(shiftOfferParams.weekOffset);\n                                                                const notificationLink = `/schedule?weekOffset=${shiftOfferParams.weekOffset}&approveShiftTransfer=true&day=${day}&shift=${shift}&fromUser=${fromUser}&toUser=${offeredTo}`;\n\n                                                                if (adminId === offeredTo) {\n                                                                    // אם האדמין לוקח את המשמרת – נבצע את ההחלפה מיד\n                                                                    await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                                                                    await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n\n                                                                    const updated = { ...availability };\n                                                                    updated[fromUser][shift][day].status = 'default';\n                                                                    if (!updated[offeredTo]) updated[offeredTo] = {};\n                                                                    if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                                                                    if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = { isAvailable: true };\n                                                                    updated[offeredTo][shift][day].status = 'selected';\n\n                                                                    setAvailability(updated);\n                                                                    updateShiftCounts();\n\n                                                                    toast.success('Shift was successfully reassigned to you.');\n                                                                    setShiftOfferParams(null);\n                                                                } else {\n                                                                    // אחרת – שלח לאדמין בקשה לאישור\n                                                                    await sendNotification(\n                                                                        currentCompany,\n                                                                        adminId,\n                                                                        `${users[offeredTo]?.name || 'An employee'} accepted the offer to take the ${shift} shift on ${day}. Please approve the change.`,\n                                                                        notificationLink\n                                                                    );\n\n                                                                    toast.success('Your request has been sent to the admin for approval.');\n                                                                    setShiftOfferParams(null);\n                                                                }\n                                                            }}\n                                                        >\n                                                            Accept Shift\n                                                        </button>\n\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            style={{ backgroundColor: '#e74c3c' }}\n                                                            onClick={() => {\n                                                                setShiftOfferParams(null);\n                                                                toast.info('You declined the shift.');\n                                                            }}\n                                                        >\n                                                            Decline\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )}\n\n                                        {shiftOfferParams?.isAdminApproval && (\n                                            <div className=\"swap-request-container\">\n                                                <h3>Admin Approval Required</h3>\n                                                <p>\n                                                    Approve transfer of <strong>{shiftOfferParams.shift} </strong> shift on <strong>{shiftOfferParams.day} </strong>\n                                                    from <strong>{users[shiftOfferParams.fromUser]?.name || 'Unknown'} </strong>\n                                                    to <strong>{users[shiftOfferParams.offeredTo]?.name || 'Unknown'}</strong>?\n                                                </p>\n                                                <div className=\"swap-form\">\n                                                    <button\n                                                        className=\"accept-swap-button\"\n                                                        onClick={async () => {\n                                                            const { shift, day, fromUser, offeredTo, weekOffset } = shiftOfferParams;\n                                                            const weekKey = calculateWeekKey(weekOffset);\n\n                                                            const currentStatus = availability?.[fromUser]?.[shift]?.[day]?.status;\n                                                            if (currentStatus !== 'selected') {\n                                                                toast.error('This shift has already been reassigned.');\n                                                                setShiftOfferParams(null);\n                                                                return;\n                                                            }\n\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n\n                                                            const updated = { ...availability };\n                                                            updated[fromUser][shift][day].status = 'default';\n                                                            if (!updated[offeredTo]) updated[offeredTo] = {};\n                                                            if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                                                            if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = { isAvailable: true };\n                                                            updated[offeredTo][shift][day].status = 'selected';\n\n                                                            setAvailability(updated);\n                                                            updateShiftCounts();\n\n                                                            const fromUserName = users[fromUser]?.name || 'Unknown';\n                                                            const offeredToName = users[offeredTo]?.name || 'Unknown';\n                                                            const link = `/schedule?weekOffset=${weekOffset}`;\n\n                                                            // שלח התראה רק אם השולח אינו ה-admin\n                                                            if (fromUser !== loggedInUser?.user?.id) {\n                                                                await sendNotification(\n                                                                    currentCompany,\n                                                                    fromUser,\n                                                                    `The admin approved your request to transfer the ${shift} shift on ${day} to ${offeredToName}.`,\n                                                                    link\n                                                                );\n                                                            }\n\n                                                            // שלח התראה רק אם המקבל אינו ה-admin\n                                                            if (offeredTo !== loggedInUser?.user?.id) {\n                                                                await sendNotification(\n                                                                    currentCompany,\n                                                                    offeredTo,\n                                                                    `The admin approved your request to take the ${shift} shift on ${day} from ${fromUserName}.`,\n                                                                    link\n                                                                );\n                                                            }\n\n                                                            toast.success('Shift transfer approved.');\n                                                            setShiftOfferParams(null);\n                                                        }}\n                                                    >\n                                                        Approve\n                                                    </button>\n                                                    <button\n                                                        className=\"submit-swap-button\"\n                                                        style={{ backgroundColor: '#e74c3c' }}\n                                                        onClick={async () => {\n                                                            setShiftOfferParams(null);\n                                                            toast.info('Shift transfer declined.');\n\n                                                            const { shift, day, fromUser, offeredTo, weekOffset } = shiftOfferParams;\n\n                                                            const fromUserName = users[fromUser]?.name || 'Unknown';\n                                                            const offeredToName = users[offeredTo]?.name || 'an employee';\n                                                            const weekRange = calculateWeekRange(weekOffset);\n\n                                                            // התראה למי שהציע את המשמרת\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                fromUser,\n                                                                `Your shift offer to ${offeredToName} for the ${shift} shift on ${day} was declined by the admin.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n\n                                                            // התראה למי שביקש לקבל את המשמרת\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                offeredTo,\n                                                                `Your request to take the ${shift} shift on ${day} from ${fromUserName} was declined by the admin.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n                                                        }}\n                                                    >\n                                                        Decline\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        )}\n\n                                        {shiftOfferParams?.isAdminSwapApproval && (\n                                            <div className=\"swap-request-container\">\n                                                <h3>Admin Approval Required</h3>\n                                                <p>\n                                                    Approve shift swap between{' '}\n                                                    <strong>{users[shiftOfferParams.me]?.name || 'Unknown'}</strong>\n                                                    (shift: {shiftOfferParams.myShift} on {shiftOfferParams.myDay}) and{' '}\n                                                    <strong>{users[shiftOfferParams.them]?.name || 'Unknown'}</strong>\n                                                    (shift: {shiftOfferParams.theirShift} on {shiftOfferParams.theirDay})?\n                                                </p>\n                                                <div className=\"swap-form\">\n                                                    <button\n                                                        className=\"accept-swap-button\"\n                                                        onClick={async () => {\n                                                            const {\n                                                                me, them, myDay, myShift, theirDay, theirShift, weekOffset\n                                                            } = shiftOfferParams;\n                                                            const weekKey = calculateWeekKey(weekOffset);\n\n                                                            // בדיקה לפני אישור\n                                                            const myStatus = availability?.[me]?.[myShift]?.[myDay]?.status;\n                                                            const theirStatus = availability?.[them]?.[theirShift]?.[theirDay]?.status;\n\n                                                            if (myStatus !== 'selected' || theirStatus !== 'selected') {\n                                                                toast.error('One of the shifts has already changed.');\n                                                                setShiftOfferParams(null);\n                                                                return;\n                                                            }\n\n                                                            // עדכון בבסיס נתונים\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n\n                                                            // עדכון ב־state\n                                                            const updated = { ...availability };\n                                                            updated[me][myShift][myDay].status = 'default';\n                                                            updated[them][theirShift][theirDay].status = 'default';\n\n                                                            updated[me][theirShift] ||= {};\n                                                            updated[me][theirShift][theirDay] ||= { isAvailable: true };\n                                                            updated[me][theirShift][theirDay].status = 'selected';\n\n                                                            updated[them][myShift] ||= {};\n                                                            updated[them][myShift][myDay] ||= { isAvailable: true };\n                                                            updated[them][myShift][myDay].status = 'selected';\n\n                                                            setAvailability(updated);\n                                                            updateShiftCounts();\n\n                                                            toast.success('Swap approved and shifts updated.');\n                                                            setShiftOfferParams(null);\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                me,\n                                                                `The admin approved your shift swap. You are now assigned to the ${theirShift} shift on ${theirDay}.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                them,\n                                                                `The admin approved your shift swap. You are now assigned to the ${myShift} shift on ${myDay}.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n\n\n                                                        }}\n                                                    >\n                                                        Approve\n                                                    </button>\n\n                                                    <button\n                                                        className=\"submit-swap-button\"\n                                                        style={{ backgroundColor: '#e74c3c' }}\n                                                        onClick={() => {\n                                                            setShiftOfferParams(null);\n                                                            toast.info('Swap request declined.');\n                                                        }}\n                                                    >\n                                                        Decline\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        )}\n\n                                    </div>\n                                ) : (\n                                    <p className=\"no-schedule-message\">\n                                        No published schedule is available for this week.\n                                    </p>\n                                )\n                            )}\n                        </>\n                    )}\n                </div>\n            </div>\n        </BackgroundWrapper>\n    );\n}\n\nexport default ScheduleScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}