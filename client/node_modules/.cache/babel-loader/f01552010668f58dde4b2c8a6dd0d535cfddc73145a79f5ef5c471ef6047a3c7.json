{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa';\nimport { updateAvailabilityStatus, getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets, fetchPublishStatus, savePublishStatus, saveEditStatus, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { sendNotification } from '../services/notificationService';\nimport { useLocation } from 'react-router-dom';\nimport { FaCalendarCheck, FaEdit } from 'react-icons/fa';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const initialWeekOffset = parseInt(queryParams.get('weekOffset'), 10) || 0;\n  const [weekOffset, setWeekOffset] = useState(initialWeekOffset);\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n  const [highlightedUser, setHighlightedUser] = useState(null);\n  const [selectedUserNotes, setSelectedUserNotes] = useState('');\n  const [shiftCounts, setShiftCounts] = useState({});\n  const [necessaryEmployees, setNecessaryEmployees] = useState({});\n  const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n  const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n  const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n  const [totalWeeklyTargets, setTotalWeeklyTargets] = useState(0);\n  const [isPublished, setIsPublished] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isEditAllowed, setIsEditAllowed] = useState(false);\n  const [mostCriticalShifts, setMostCriticalShifts] = useState([]);\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n  const [isConfirmingPublish, setIsConfirmingPublish] = useState(false);\n  const [isConfirmingEdit, setIsConfirmingEdit] = useState(false);\n  const [isWarningVisible, setIsWarningVisible] = useState(false);\n  const [isViewingAsEmployee, setIsViewingAsEmployee] = useState(false);\n  const [selectedShiftToSwap, setSelectedShiftToSwap] = useState(null);\n  const [offerToUserId, setOfferToUserId] = useState('');\n  const [shiftOfferParams, setShiftOfferParams] = useState(null);\n  useEffect(() => {\n    const offerShift = queryParams.get('offerShift');\n    const offerDay = queryParams.get('offerDay');\n    const fromUser = queryParams.get('fromUser');\n    const offeredTo = queryParams.get('offeredTo');\n    if (offerShift && offerDay && fromUser && offeredTo) {\n      setShiftOfferParams({\n        shift: offerShift,\n        day: offerDay,\n        fromUser,\n        offeredTo\n      });\n    }\n  }, [location.search]);\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    setIsAdmin((loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.role) === 'admin');\n    setHighlightedUser(loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.id);\n    const offeredTo = queryParams.get('offeredTo');\n    if (offeredTo && offeredTo === (loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.id)) {\n      setHighlightedUser(offeredTo);\n    }\n  }, []);\n  useEffect(() => {\n    if (isPublished && !isScheduleFullyStaffed()) {\n      setIsWarningVisible(true);\n    } else {\n      setIsWarningVisible(false);\n    }\n  }, [availability, necessaryEmployees, isPublished]);\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת כל הנתונים הדרושים\n        const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers(), getNecessaryEmployees(companyId, weekKey), getWeeklyShiftTargets(companyId, weekKey) // קריאה לנתוני weeklyShiftTargets\n        ]);\n\n        // עדכון ה-states בהתאם לנתונים שהתקבלו מהשרת\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n        setNecessaryEmployees(necessaryEmployeesData || {});\n        calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n\n        // הגדרת ערכי ברירת מחדל ל-weeklyShiftTargets\n        const updatedWeeklyTargets = {\n          ...weeklyTargetsData\n        };\n        Object.values(usersData).forEach(user => {\n          // בדיקה אם user.id קיים\n          if (!(user !== null && user !== void 0 && user.id)) {\n            console.warn(\"User without ID found:\", user);\n            return; // דלג על משתמשים ללא ID\n          }\n          if (!updatedWeeklyTargets[user.id]) {\n            updatedWeeklyTargets[user.id] = 0; // ערך ברירת מחדל\n          }\n        });\n        setWeeklyShiftTargets(updatedWeeklyTargets);\n\n        // חישוב תאריכים לשבוע הנוכחי\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeeklyShiftTargetChange = async (userId, value) => {\n    // הבטחת הערך המקסימלי ל-6\n    const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n\n    // בדיקה אם היעד החדש קטן ממספר המשמרות הנוכחי\n    if (parsedValue < shiftCounts[userId]) {\n      console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n      return; // עצירת השינוי\n    }\n\n    // עדכון היעדים השבועיים\n    const updatedTargets = {\n      ...weeklyShiftTargets,\n      [userId]: parsedValue\n    };\n    setWeeklyShiftTargets(updatedTargets);\n\n    // עדכון הסכום הכולל של היעדים השבועיים\n    const total = Object.values(updatedTargets).reduce((sum, target) => sum + (target || 0), 0);\n    setTotalWeeklyTargets(total);\n\n    // סינון המידע לפני שמירתו ל-DB\n    const cleanedTargets = Object.fromEntries(Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees') // סינון המפתח הלא רצוי\n    );\n\n    // שמירת הערך ל-DB\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n    } catch (error) {\n      console.error('Failed to save weekly shift targets:', error);\n    }\n  };\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = (status, userId, shift, day) => {\n    var _necessaryEmployees$d;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d = necessaryEmployees[day]) === null || _necessaryEmployees$d === void 0 ? void 0 : _necessaryEmployees$d[shift]) || 0;\n\n    // אם מספר העובדים הנבחרים שווה או גדול מהנדרש למשמרת\n    if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n    }\n\n    // בדיקת מספר המשמרות שכבר נבחרו עבור העובד מול היעד השבועי\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n    // אם העובד הגיע למכסת המשמרות השבועיות שהוגדרו לו\n    if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n    }\n\n    // **הוספת הדגשה תמידית למשתמש שנבחר**\n    if (highlightedUser === userId) {\n      return status === 'disabled' ? 'status-disabled highlighted-user' : `highlighted-user ${status}`;\n    }\n\n    // שאר הלוגיקה הקיימת\n    if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled'; // הכפתורים יהיו חסומים אם היעד השבועי הושג\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleEmployeeClick = async userId => {\n    if (highlightedUser === userId) {\n      setHighlightedUser(null);\n      setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n      return;\n    }\n\n    // איפוס ההערות לפני שליפת ההערות החדשות\n    setSelectedUserNotes('');\n    setHighlightedUser(userId);\n    if (currentCompany && userId) {\n      try {\n        var _availabilityData$use;\n        const weekKey = calculateWeekKey(weekOffset);\n        const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n        const userNotes = (availabilityData === null || availabilityData === void 0 ? void 0 : (_availabilityData$use = availabilityData[userId]) === null || _availabilityData$use === void 0 ? void 0 : _availabilityData$use.notes) || 'No notes available.';\n        setSelectedUserNotes(userNotes);\n      } catch (err) {\n        console.error('Failed to fetch notes:', err);\n        setSelectedUserNotes('Error fetching notes.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (Object.keys(availability).length > 0) {\n      updateShiftCounts();\n    }\n  }, [availability]);\n  const updateShiftCounts = () => {\n    const counts = {};\n    let totalShifts = 0; // משתנה לספירת המשמרות הכוללות שהוקצו\n\n    Object.entries(availability).forEach(([userId, shifts]) => {\n      const userShiftCount = Object.values(shifts).reduce((sum, dayShifts) => sum + Object.values(dayShifts).filter(shift => shift.status === 'selected').length, 0);\n      counts[userId] = userShiftCount;\n      totalShifts += userShiftCount; // הוספה למספר הכולל\n    });\n    setShiftCounts(counts);\n    setTotalAssignedShifts(totalShifts); // עדכון state של סך כל המשמרות\n  };\n  useEffect(() => {\n    const saveNecessaryEmployeesToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שמירת necessaryEmployees ל-DB\n        if (Object.keys(necessaryEmployees).length > 0) {\n          await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n        }\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n\n    // נוודא שאנו שומרים רק אם מדובר בעדכון אמיתי ולא מעבר שבוע\n    if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n      saveNecessaryEmployeesToDB();\n    }\n  }, [necessaryEmployees, currentCompany]);\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    var _necessaryEmployees$d2;\n    // בדיקת מספר העובדים הנבחרים למשמרת הנוכחית מול העובדים הנדרשים\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift2;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift2 = userData[shift]) === null || _userData$shift2 === void 0 ? void 0 : _userData$shift2[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d2 = necessaryEmployees[day]) === null || _necessaryEmployees$d2 === void 0 ? void 0 : _necessaryEmployees$d2[shift]) || 0;\n\n    // אם מספר העובדים הנבחרים שווה או גדול מהנדרש, למנוע בחירה נוספת\n    if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n      return;\n    }\n\n    // בדיקת מספר המשמרות שכבר נבחרו עבור העובד מול היעד השבועי\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n    // אם העובד הגיע למספר המשמרות המקסימלי, למנוע בחירה נוספת\n    if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n      return;\n    }\n\n    // המשך עדכון סטטוס\n    if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n\n      // Update the current shift's status to 'selected' or 'default'\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        // Disable other shifts on the same day\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n\n        // Handle unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        // Undo selection and revert unique rules\n        await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n        // Revert unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n\n      // Update state with the modified availability\n      setAvailability(updatedAvailability);\n\n      // עדכון ה-counts והכפתורים\n      updateShiftCounts();\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  const employeesWithAvailability = Object.entries(users).filter(([userId]) => availability[userId] && Object.values(availability[userId]).some(shifts => Object.values(shifts).some(shift => shift.status === 'selected' || shift.status === 'default'))).sort(([userIdA], [userIdB]) => {\n    var _users$userIdA, _users$userIdA$name, _users$userIdB, _users$userIdB$name;\n    const nameA = ((_users$userIdA = users[userIdA]) === null || _users$userIdA === void 0 ? void 0 : (_users$userIdA$name = _users$userIdA.name) === null || _users$userIdA$name === void 0 ? void 0 : _users$userIdA$name.toLowerCase()) || '';\n    const nameB = ((_users$userIdB = users[userIdB]) === null || _users$userIdB === void 0 ? void 0 : (_users$userIdB$name = _users$userIdB.name) === null || _users$userIdB$name === void 0 ? void 0 : _users$userIdB$name.toLowerCase()) || '';\n    return nameA.localeCompare(nameB); // מיון אלפביתי לפי שם\n  });\n  const handleNecessaryEmployeesChange = (day, shift, value) => {\n    const updatedNecessaryEmployees = {\n      ...necessaryEmployees\n    };\n    if (!updatedNecessaryEmployees[day]) {\n      updatedNecessaryEmployees[day] = {};\n    }\n    const parsedValue = parseInt(value, 10) || 0;\n\n    // בדיקת מספר העובדים שכבר נבחרו למשמרת\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift3;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift3 = userData[shift]) === null || _userData$shift3 === void 0 ? void 0 : _userData$shift3[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n\n    // אם הערך החדש קטן ממספר העובדים שנבחרו, למנוע שינוי\n    if (parsedValue < selectedEmployeesCount) {\n      return; // עצירת השינוי\n    }\n\n    // עדכון הערך החדש אם הוא חוקי\n    updatedNecessaryEmployees[day][shift] = parsedValue;\n    setNecessaryEmployees(updatedNecessaryEmployees);\n    calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n\n    // שמירה ל-DB כאשר הערך משתנה\n    const saveToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n        await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n    saveToDB();\n  };\n  const calculateTotalNecessaryEmployees = necessaryEmployeesData => {\n    let total = 0;\n    Object.values(necessaryEmployeesData).forEach(dayData => {\n      Object.values(dayData).forEach(shiftCount => {\n        total += shiftCount || 0;\n      });\n    });\n    setTotalNecessaryEmployees(total);\n  };\n  const calculateTotalAssignedShifts = shiftCounts => {\n    const total = Object.values(shiftCounts).reduce((sum, count) => sum + count, 0);\n    setTotalAssignedShifts(total);\n  };\n  useEffect(() => {\n    const total = Object.values(weeklyShiftTargets).reduce((sum, target) => sum + (target || 0), 0);\n    setTotalWeeklyTargets(total);\n  }, [weeklyShiftTargets]);\n  const togglePublishStatus = async () => {\n    if (!isPublished && !isScheduleFullyStaffed()) {\n      alert('Cannot publish schedule: not all shifts are fully staffed.');\n      return;\n    }\n    try {\n      const newStatus = !isPublished;\n      const weekKey = calculateWeekKey(weekOffset);\n\n      // עדכון הסטטוס ב-DB\n      await savePublishStatus(currentCompany, weekKey, newStatus);\n\n      // שליחת התראות אם מפרסמים (ולא אם מבטלים פרסום)\n      // בתוך togglePublishStatus:\n      if (newStatus) {\n        const employeeList = Object.entries(users).filter(([_, u]) => u.role === 'employee');\n        const startDate = new Date();\n        startDate.setDate(startDate.getDate() + weekOffset * 7 - startDate.getDay());\n        const weekRange = calculateWeekRange(weekOffset);\n        const formattedStart = startDate.toISOString().slice(0, 10); // YYYY-MM-DD\n        const notificationLink = `/schedule?weekOffset=${weekOffset}`;\n        for (const [employeeId] of employeeList) {\n          await sendNotification(currentCompany, employeeId, `Weekly schedule for ${weekRange} has been published.`, notificationLink);\n        }\n      }\n\n      // עדכון ה-UI\n      setIsPublished(newStatus);\n    } catch (error) {\n      console.error('Failed to toggle publish status:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchPublishStatusFromDB = async () => {\n      try {\n        var _status$status;\n        const weekKey = calculateWeekKey(weekOffset);\n        const status = await fetchPublishStatus(currentCompany, weekKey);\n\n        // השתמש בערך שבתוך המפתח 'status' ולא באובייקט כולו\n        setIsPublished((_status$status = status === null || status === void 0 ? void 0 : status.status) !== null && _status$status !== void 0 ? _status$status : false); // True or False\n      } catch (error) {\n        console.error('Failed to fetch publish status:', error);\n      }\n    };\n    if (currentCompany) {\n      fetchPublishStatusFromDB();\n    }\n  }, [currentCompany, weekOffset]);\n  const isScheduleFullyStaffed = () => {\n    for (const day of Object.keys(necessaryEmployees || {})) {\n      for (const shift of Object.keys(necessaryEmployees[day] || {})) {\n        const requiredCount = necessaryEmployees[day][shift] || 0;\n        const selectedCount = Object.entries(availability).filter(([_, userData]) => {\n          var _userData$shift4;\n          const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift4 = userData[shift]) === null || _userData$shift4 === void 0 ? void 0 : _userData$shift4[day];\n          return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n        }).length;\n        if (selectedCount !== requiredCount) {\n          return false; // לפחות משמרת אחת אינה מלאה\n        }\n      }\n    }\n    return true; // כל המשמרות מלאות\n  };\n  const isPublishButtonDisabled = !isScheduleFullyStaffed() && !isPublished;\n  const hasWeeklyNotes = userId => {\n    const userAvailability = availability[userId];\n    return userAvailability && userAvailability.notes && userAvailability.notes.trim() !== '';\n  };\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    setIsAdmin((loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.role) === 'admin');\n    const offeredTo = queryParams.get('offeredTo');\n    if (offeredTo && offeredTo === (loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.id)) {\n      setHighlightedUser(offeredTo);\n    } else {\n      setHighlightedUser(loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.id);\n    }\n  }, []);\n  const toggleEditStatus = async () => {\n    try {\n      const newStatus = !isEditAllowed;\n      const weekKey = calculateWeekKey(weekOffset);\n\n      // שמירת הסטטוס לשרת\n      await saveEditStatus(currentCompany, weekKey, newStatus);\n\n      // עדכון ה-UI\n      setIsEditAllowed(newStatus);\n    } catch (error) {\n      console.error('Failed to toggle edit status:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchEditStatusFromDB = async () => {\n      try {\n        var _status$isEditAllowed;\n        const weekKey = calculateWeekKey(weekOffset);\n        const status = await fetchEditStatus(currentCompany, weekKey);\n\n        // עדכון המצב\n        setIsEditAllowed((_status$isEditAllowed = status === null || status === void 0 ? void 0 : status.isEditAllowed) !== null && _status$isEditAllowed !== void 0 ? _status$isEditAllowed : false); // ברירת מחדל ל-false אם אין מידע\n      } catch (error) {\n        console.error('Failed to fetch edit status:', error);\n      }\n    };\n    if (currentCompany) {\n      fetchEditStatusFromDB();\n    }\n  }, [currentCompany, weekOffset]);\n  const calculateShiftCriticality = (day, shift) => {\n    var _necessaryEmployees$d3;\n    const necessary = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d3 = necessaryEmployees[day]) === null || _necessaryEmployees$d3 === void 0 ? void 0 : _necessaryEmployees$d3[shift]) || 0;\n    const selected = Object.values(availability).filter(userData => {\n      var _userData$shift5, _userData$shift5$day;\n      return (userData === null || userData === void 0 ? void 0 : (_userData$shift5 = userData[shift]) === null || _userData$shift5 === void 0 ? void 0 : (_userData$shift5$day = _userData$shift5[day]) === null || _userData$shift5$day === void 0 ? void 0 : _userData$shift5$day.status) === 'selected';\n    }).length;\n    const defaults = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift6, _userData$shift6$day, _userData$shift7, _userData$shift7$day;\n      const status = userData === null || userData === void 0 ? void 0 : (_userData$shift6 = userData[shift]) === null || _userData$shift6 === void 0 ? void 0 : (_userData$shift6$day = _userData$shift6[day]) === null || _userData$shift6$day === void 0 ? void 0 : _userData$shift6$day.status;\n      return (userData === null || userData === void 0 ? void 0 : (_userData$shift7 = userData[shift]) === null || _userData$shift7 === void 0 ? void 0 : (_userData$shift7$day = _userData$shift7[day]) === null || _userData$shift7$day === void 0 ? void 0 : _userData$shift7$day.isAvailable) && status !== 'selected' && status !== 'disabled';\n    }).length;\n    if (necessary === selected) return 0; // משמרת מלאה אינה קריטית\n\n    return (necessary - selected) / Math.pow(defaults + 1, 2);\n  };\n  const findMostCriticalShifts = () => {\n    let highestCriticality = -Infinity;\n    let criticalShifts = [];\n    Object.keys(necessaryEmployees || {}).forEach(day => {\n      Object.keys(necessaryEmployees[day] || {}).forEach(shift => {\n        var _necessaryEmployees$d4;\n        const criticality = calculateShiftCriticality(day, shift);\n        const necessary = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d4 = necessaryEmployees[day]) === null || _necessaryEmployees$d4 === void 0 ? void 0 : _necessaryEmployees$d4[shift]) || 0;\n        const selected = Object.values(availability).filter(userData => {\n          var _userData$shift8, _userData$shift8$day;\n          return (userData === null || userData === void 0 ? void 0 : (_userData$shift8 = userData[shift]) === null || _userData$shift8 === void 0 ? void 0 : (_userData$shift8$day = _userData$shift8[day]) === null || _userData$shift8$day === void 0 ? void 0 : _userData$shift8$day.status) === 'selected';\n        }).length;\n        if (necessary === selected) return; // אם המשמרת מלאה, אין צורך להוסיף אותה\n\n        if (criticality > highestCriticality) {\n          highestCriticality = criticality;\n          criticalShifts = [{\n            day,\n            shift\n          }];\n        } else if (criticality === highestCriticality && criticality > 0) {\n          criticalShifts.push({\n            day,\n            shift\n          });\n        }\n      });\n    });\n    return criticalShifts;\n  };\n\n  // עדכון הנתון בכל שינוי\n  useEffect(() => {\n    setMostCriticalShifts(findMostCriticalShifts());\n  }, [necessaryEmployees, availability]);\n  const openConfirmModal = actionType => {\n    if (actionType === 'publish') {\n      setIsConfirmingPublish(true);\n      setIsConfirmingEdit(false);\n    } else if (actionType === 'edit') {\n      setIsConfirmingEdit(true);\n      setIsConfirmingPublish(false);\n    }\n    setIsConfirmModalOpen(true);\n  };\n  const closeConfirmModal = () => {\n    setIsConfirmModalOpen(false);\n  };\n  const getUserShiftTable = userId => {\n    if (!availability[userId]) return [];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return shifts.map(shift => {\n      const row = {\n        shift: shift[0] + (shift === 'Night' ? 't' : '')\n      }; // קיצור לשם המשמרת\n      days.forEach(day => {\n        var _availability$userId, _availability$userId$;\n        const shiftData = (_availability$userId = availability[userId]) === null || _availability$userId === void 0 ? void 0 : (_availability$userId$ = _availability$userId[shift]) === null || _availability$userId$ === void 0 ? void 0 : _availability$userId$[day];\n        if ((shiftData === null || shiftData === void 0 ? void 0 : shiftData.status) === 'selected') {\n          row[day] = '✅'; // שובץ\n        } else if (shiftData !== null && shiftData !== void 0 && shiftData.isAvailable) {\n          row[day] = '🟠'; // רק זמינות (חלול)\n        } else {\n          row[day] = ''; // לא הגיש זמינות\n        }\n      });\n      return row;\n    });\n  };\n  const handleOfferShift = async () => {\n    const weekKey = calculateWeekKey(weekOffset);\n    const shift = selectedShiftToSwap.shift;\n    const day = selectedShiftToSwap.day;\n    const fromUser = selectedShiftToSwap.userId;\n    const weekRange = calculateWeekRange(weekOffset);\n    const link = `/schedule?weekOffset=${weekOffset}`;\n    let recipients = [];\n    if (offerToUserId) {\n      // נבחר עובד ספציפי\n      recipients.push(offerToUserId);\n    } else {\n      // \"No one specific\" - שלח לכל מי שנשאר בתפריט אחרי הסינונים\n      recipients = Object.entries(users).filter(([id, user]) => {\n        var _availability$id, _availability$id$Nigh, _availability$id$Nigh2, _availability$id2, _availability$id2$Mor, _availability$id2$Mor2, _availability$id3, _availability$id3$Noo, _availability$id3$Noo2;\n        if (id === fromUser) return false;\n        const isAssignedThatDay = Object.values((availability === null || availability === void 0 ? void 0 : availability[id]) || {}).some(shiftData => {\n          var _shiftData$day;\n          return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$day = shiftData[day]) === null || _shiftData$day === void 0 ? void 0 : _shiftData$day.status) === 'selected';\n        });\n        if (isAssignedThatDay) return false;\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = days.indexOf(day);\n        const prev = days[currentIndex - 1];\n        const next = days[currentIndex + 1];\n        if (['Morning', 'Noon'].includes(shift) && prev && (availability === null || availability === void 0 ? void 0 : (_availability$id = availability[id]) === null || _availability$id === void 0 ? void 0 : (_availability$id$Nigh = _availability$id.Night) === null || _availability$id$Nigh === void 0 ? void 0 : (_availability$id$Nigh2 = _availability$id$Nigh[prev]) === null || _availability$id$Nigh2 === void 0 ? void 0 : _availability$id$Nigh2.status) === 'selected') return false;\n        if (shift === 'Night' && next && ((availability === null || availability === void 0 ? void 0 : (_availability$id2 = availability[id]) === null || _availability$id2 === void 0 ? void 0 : (_availability$id2$Mor = _availability$id2.Morning) === null || _availability$id2$Mor === void 0 ? void 0 : (_availability$id2$Mor2 = _availability$id2$Mor[next]) === null || _availability$id2$Mor2 === void 0 ? void 0 : _availability$id2$Mor2.status) === 'selected' || (availability === null || availability === void 0 ? void 0 : (_availability$id3 = availability[id]) === null || _availability$id3 === void 0 ? void 0 : (_availability$id3$Noo = _availability$id3.Noon) === null || _availability$id3$Noo === void 0 ? void 0 : (_availability$id3$Noo2 = _availability$id3$Noo[next]) === null || _availability$id3$Noo2 === void 0 ? void 0 : _availability$id3$Noo2.status) === 'selected')) return false;\n        return true;\n      }).map(([id]) => id);\n    }\n    for (const recipientId of recipients) {\n      var _users$fromUser;\n      await sendNotification(currentCompany, recipientId, `You are offered to take ${shift} shift on ${day} (Week: ${weekRange}) from ${((_users$fromUser = users[fromUser]) === null || _users$fromUser === void 0 ? void 0 : _users$fromUser.name) || 'a colleague'}.`, link);\n    }\n    toast.success('Shift offer sent successfully!');\n    setSelectedShiftToSwap(null);\n    setOfferToUserId('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 13\n    }, this), isConfirmModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isConfirmingPublish ? isPublished ? 'Confirm Schedule Unpublishing' : 'Confirm Schedule Publication' : isConfirmingEdit ? isEditAllowed ? 'Confirm Disabling Editing' : 'Confirm Enabling Editing' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isConfirmingPublish ? isPublished ? 'Are you sure you want to unpublish this schedule?' : 'Are you sure you want to publish this schedule?' : isConfirmingEdit ? isEditAllowed ? 'Are you sure you want to disable weekly availability submissions?' : 'Are you sure you want to enable weekly availability submissions?' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"confirm-button\",\n            onClick: () => {\n              if (isConfirmingPublish) {\n                togglePublishStatus();\n              } else if (isConfirmingEdit) {\n                toggleEditStatus();\n              }\n              closeConfirmModal();\n            },\n            children: \"Confirm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-button\",\n            onClick: closeConfirmModal,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 17\n      }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-toggle-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"view-toggle-button\",\n          onClick: () => setIsViewingAsEmployee(prev => !prev),\n          children: [isViewingAsEmployee ? /*#__PURE__*/_jsxDEV(FaEdit, {\n            style: {\n              marginRight: '6px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 52\n          }, this) : /*#__PURE__*/_jsxDEV(FaCalendarCheck, {\n            style: {\n              marginRight: '6px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 96\n          }, this), isViewingAsEmployee ? 'Back to Draft View' : 'View Final Schedule']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 21\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading schedule...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [!isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week-navigation centered-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"navigation-button\",\n            onClick: () => handleWeekChange(-1),\n            children: \"Previous Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"week-range\",\n            children: calculateWeekRange(weekOffset)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"navigation-button\",\n            onClick: () => handleWeekChange(1),\n            children: \"Next Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 29\n        }, this), isAdmin && !isViewingAsEmployee ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"schedule-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"schedule-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Shift\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 807,\n                  columnNumber: 45\n                }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 811,\n                    columnNumber: 63\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"date\",\n                    children: weekDates[index]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 812,\n                    columnNumber: 57\n                  }, this)]\n                }, day, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 810,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 806,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 805,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 821,\n                  columnNumber: 49\n                }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                  var _necessaryEmployees$d5, _necessaryEmployees$d6;\n                  const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                    var _userData$shift9;\n                    const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift9 = userData[shift]) === null || _userData$shift9 === void 0 ? void 0 : _userData$shift9[day];\n                    return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                  }).length;\n                  const isFullyStaffed = selectedEmployeesCount === ((necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d5 = necessaryEmployees[day]) === null || _necessaryEmployees$d5 === void 0 ? void 0 : _necessaryEmployees$d5[shift]) || 0);\n                  const criticality = calculateShiftCriticality(day, shift);\n                  const isMostCritical = mostCriticalShifts.some(criticalShift => criticalShift.day === day && criticalShift.shift === shift);\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: `schedule-cell \n                                                                ${isFullyStaffed ? 'fully-staffed' : ''} \n                                                                ${mostCriticalShifts.some(criticalShift => criticalShift.day === day && criticalShift.shift === shift) ? 'most-critical' : ''}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"number\",\n                      min: \"0\",\n                      className: \"necessary-employees-input\",\n                      value: (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d6 = necessaryEmployees[day]) === null || _necessaryEmployees$d6 === void 0 ? void 0 : _necessaryEmployees$d6[shift]) || 0,\n                      onChange: e => handleNecessaryEmployeesChange(day, shift, e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 845,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"selected-employees-indicator\",\n                      children: [selectedEmployeesCount, \" Selected\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 854,\n                      columnNumber: 61\n                    }, this), Object.entries(availability).filter(([userId, userData]) => {\n                      var _userData$shift10;\n                      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift10 = userData[shift]) === null || _userData$shift10 === void 0 ? void 0 : _userData$shift10[day];\n                      return availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.isAvailable; // רק עובדים זמינים\n                    }).sort(([userIdA], [userIdB]) => {\n                      var _users$userIdA2, _users$userIdB2;\n                      const nameA = ((_users$userIdA2 = users[userIdA]) === null || _users$userIdA2 === void 0 ? void 0 : _users$userIdA2.name) || '';\n                      const nameB = ((_users$userIdB2 = users[userIdB]) === null || _users$userIdB2 === void 0 ? void 0 : _users$userIdB2.name) || '';\n                      return nameA.localeCompare(nameB); // מיון אלפביתי לפי שם\n                    }).map(([userId, userData]) => {\n                      var _userData$shift11, _users$userId;\n                      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift11 = userData[shift]) === null || _userData$shift11 === void 0 ? void 0 : _userData$shift11[day];\n                      const statusClass = getStatusClass(availabilityInfo.status, userId);\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: `availability-entry ${statusClass}`,\n                        onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                        style: {\n                          backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ffff',\n                          color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                          pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                          cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                        },\n                        children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                      }, userId, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 873,\n                        columnNumber: 73\n                      }, this);\n                    })]\n                  }, day, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 835,\n                    columnNumber: 57\n                  }, this);\n                })]\n              }, shift, true, {\n                fileName: _jsxFileName,\n                lineNumber: 820,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 818,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employees-list\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Employees\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"week-navigation\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"week-nav-button\",\n                onClick: () => handleWeekChange(-1),\n                children: /*#__PURE__*/_jsxDEV(FaChevronLeft, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 914,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 913,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"week-range\",\n                children: calculateWeekRange(weekOffset)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 916,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"week-nav-button\",\n                onClick: () => handleWeekChange(1),\n                children: /*#__PURE__*/_jsxDEV(FaChevronRight, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 918,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 917,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 912,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"buttons-container\",\n              children: [isWarningVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"warning-banner\",\n                children: \"\\u26A0\\uFE0F Warning: One or more shifts are no longer fully staffed. Please review the schedule.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 924,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `general-button ${isPublished ? 'green' : 'red'}`,\n                onClick: () => openConfirmModal('publish'),\n                disabled: isPublishButtonDisabled,\n                children: [isPublished ? 'Unpublish Schedule' : 'Publish Schedule', isWarningVisible && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"publish-warning-icon\",\n                  children: \"\\uD83D\\uDD34\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 935,\n                  columnNumber: 66\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 929,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `general-button ${isEditAllowed ? 'green' : 'red'}`,\n                onClick: () => openConfirmModal('edit'),\n                children: isEditAllowed ? 'Disable Editing' : 'Enable Editing'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 939,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 922,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"total-info-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Weekly Overview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 950,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 951,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Weekly Staff: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: totalNecessaryEmployees\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 952,\n                  columnNumber: 58\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 952,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 953,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Weekly Shift Targets: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: totalWeeklyTargets\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 954,\n                  columnNumber: 66\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 954,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 955,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Assigned Shifts: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: totalAssignedShifts\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 956,\n                  columnNumber: 61\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 956,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 949,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: employeesWithAvailability.map(([userId, user]) => {\n                const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId]; // בדיקה אם היעד הושג\n                const hasNotes = hasWeeklyNotes(userId); // בדיקה אם יש הערות לעובד זה\n                const backgroundColor = hasNotes ? 'yellow' : '#2980b9'; // צהוב אם יש הערות, כחול אם אין\n                const textColor = hasNotes ? 'black' : 'white'; // טקסט שחור אם צהוב, לבן אם כחול\n\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  onClick: () => handleEmployeeClick(userId),\n                  className: `${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`,\n                  style: {\n                    backgroundColor: isTargetMet ? '#d4edda' : 'inherit' // צבע רקע ירוק בהיר אם היעד הושג\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"employee-details\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"notes-indicator\",\n                      style: {\n                        backgroundColor: backgroundColor,\n                        color: textColor // צבע הטקסט לפי צבע הרקע\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"indicator-text\",\n                        children: \"i\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 987,\n                        columnNumber: 61\n                      }, this), \" \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 980,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"employee-name\",\n                      children: user.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 990,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"weekly-shift-target\",\n                      children: /*#__PURE__*/_jsxDEV(\"label\", {\n                        children: [shiftCounts[userId] || 0, \" shifts out of:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                          type: \"number\",\n                          min: \"0\",\n                          max: \"6\" // הגבלה ברמת ה-UI\n                          ,\n                          value: weeklyShiftTargets[userId] || 0,\n                          onClick: e => e.stopPropagation() // עצירת האירוע\n                          ,\n                          onChange: e => handleWeeklyShiftTargetChange(userId, e.target.value),\n                          className: \"weekly-shift-input\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 998,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 996,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 995,\n                      columnNumber: 57\n                    }, this), highlightedUser === userId && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [selectedUserNotes && selectedUserNotes !== 'No notes available.' && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"employee-notes\",\n                        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                          children: \"Notes:\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1014,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: selectedUserNotes\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1015,\n                          columnNumber: 73\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1013,\n                        columnNumber: 69\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"employee-table\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"mini-schedule-legend compact\",\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            className: \"legend-symbol\",\n                            children: \"\\u2705\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1021,\n                            columnNumber: 73\n                          }, this), \" Assigned \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                            className: \"legend-symbol\",\n                            children: \"\\uD83D\\uDFE0\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1022,\n                            columnNumber: 73\n                          }, this), \" Submitted\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1020,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                          className: \"mini-schedule-table\",\n                          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                                children: \"Shift\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1029,\n                                columnNumber: 81\n                              }, this), ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n                                children: day\n                              }, day, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1031,\n                                columnNumber: 85\n                              }, this))]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1028,\n                              columnNumber: 77\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1027,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                            children: getUserShiftTable(userId).map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n                              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                                children: {\n                                  Morning: 'M',\n                                  Noon: 'N',\n                                  Evening: 'E',\n                                  Night: 'Nt'\n                                }[row.shift] || row.shift\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1038,\n                                columnNumber: 85\n                              }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n                                children: row[day]\n                              }, day, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1047,\n                                columnNumber: 89\n                              }, this))]\n                            }, row.shift, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1037,\n                              columnNumber: 81\n                            }, this))\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1035,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1026,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1019,\n                        columnNumber: 65\n                      }, this)]\n                    }, void 0, true)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 977,\n                    columnNumber: 53\n                  }, this)\n                }, userId, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 969,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 961,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 909,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 29\n        }, this) : isPublished ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"schedule-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"schedule-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Shift\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1075,\n                    columnNumber: 53\n                  }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1079,\n                      columnNumber: 71\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"date\",\n                      children: weekDates[index]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1080,\n                      columnNumber: 65\n                    }, this)]\n                  }, day, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1078,\n                    columnNumber: 61\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1074,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: shift\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1089,\n                    columnNumber: 57\n                  }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                    const selectedEmployees = Object.entries(availability).filter(([userId, userData]) => {\n                      var _userData$shift12;\n                      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift12 = userData[shift]) === null || _userData$shift12 === void 0 ? void 0 : _userData$shift12[day];\n                      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                    });\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"schedule-cell\",\n                      children: selectedEmployees.sort(([userIdA], [userIdB]) => {\n                        var _users$userIdA3, _users$userIdA3$name, _users$userIdB3, _users$userIdB3$name;\n                        const nameA = ((_users$userIdA3 = users[userIdA]) === null || _users$userIdA3 === void 0 ? void 0 : (_users$userIdA3$name = _users$userIdA3.name) === null || _users$userIdA3$name === void 0 ? void 0 : _users$userIdA3$name.toLowerCase()) || '';\n                        const nameB = ((_users$userIdB3 = users[userIdB]) === null || _users$userIdB3 === void 0 ? void 0 : (_users$userIdB3$name = _users$userIdB3.name) === null || _users$userIdB3$name === void 0 ? void 0 : _users$userIdB3$name.toLowerCase()) || '';\n                        return nameA.localeCompare(nameB);\n                      }).map(([userId]) => {\n                        var _users$userId2;\n                        const isOwnShift = userId === highlightedUser;\n                        const isSelected = selectedShiftToSwap && selectedShiftToSwap.userId === userId && selectedShiftToSwap.day === day && selectedShiftToSwap.shift === shift;\n                        const loggedUser = JSON.parse(localStorage.getItem('user'));\n                        const isShiftOfferedToMe = shiftOfferParams && userId === shiftOfferParams.fromUser && day === shiftOfferParams.day && shift === shiftOfferParams.shift && shiftOfferParams.offeredTo === (loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.id);\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: `employee-button \n                                                                                    ${isOwnShift ? 'highlighted-own-shift' : ''} \n                                                                                    ${isSelected ? 'highlighted-swap' : ''} \n                                                                                    ${isShiftOfferedToMe ? 'offered-to-me' : ''}`,\n                          onClick: () => {\n                            if (isOwnShift) {\n                              if (isSelected) {\n                                setSelectedShiftToSwap(null);\n                              } else {\n                                setSelectedShiftToSwap({\n                                  userId,\n                                  shift,\n                                  day\n                                });\n                              }\n                            }\n                          },\n                          children: ((_users$userId2 = users[userId]) === null || _users$userId2 === void 0 ? void 0 : _users$userId2.name) || 'Unknown'\n                        }, userId, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1122,\n                          columnNumber: 81\n                        }, this);\n                      })\n                    }, day, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1097,\n                      columnNumber: 65\n                    }, this);\n                  })]\n                }, shift, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1088,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1086,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1072,\n              columnNumber: 41\n            }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"employees-list\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Employees\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1157,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: employeesWithAvailability.map(([userId, user]) => {\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    onClick: () => handleEmployeeClick(userId),\n                    className: `${highlightedUser === userId ? 'selected' : ''}`,\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"employee-details\",\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"employee-name\",\n                        children: user.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1167,\n                        columnNumber: 69\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1166,\n                      columnNumber: 65\n                    }, this)\n                  }, userId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1161,\n                    columnNumber: 61\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1158,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1156,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1070,\n            columnNumber: 37\n          }, this), selectedShiftToSwap && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"swap-request-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Offer Shift to Another Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1179,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"You are offering your \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: selectedShiftToSwap.shift\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 71\n              }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: selectedShiftToSwap.day\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 125\n              }, this), \" to another employee.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1180,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-form\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\"Choose employee to offer the shift to:\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: offerToUserId,\n                  onChange: e => setOfferToUserId(e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"No one specific\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1188,\n                    columnNumber: 57\n                  }, this), Object.entries(users).filter(([id, user]) => {\n                    if (id === selectedShiftToSwap.userId) return false;\n\n                    // בדיקה אם שובץ למשמרת כלשהי באותו יום\n                    const isAssignedThatDay = Object.values((availability === null || availability === void 0 ? void 0 : availability[id]) || {}).some(shiftData => {\n                      var _shiftData$selectedSh;\n                      return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$selectedSh = shiftData[selectedShiftToSwap.day]) === null || _shiftData$selectedSh === void 0 ? void 0 : _shiftData$selectedSh.status) === 'selected';\n                    });\n                    if (isAssignedThatDay) return false;\n\n                    // אם המשמרת היא Morning או Noon – לבדוק אם עבד Night ביום הקודם\n                    if (['Morning', 'Noon'].includes(selectedShiftToSwap.shift)) {\n                      var _availability$id4, _availability$id4$Nig, _availability$id4$Nig2;\n                      const currentDayIndex = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(selectedShiftToSwap.day);\n                      const previousDay = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][currentDayIndex - 1];\n                      if (previousDay && (availability === null || availability === void 0 ? void 0 : (_availability$id4 = availability[id]) === null || _availability$id4 === void 0 ? void 0 : (_availability$id4$Nig = _availability$id4.Night) === null || _availability$id4$Nig === void 0 ? void 0 : (_availability$id4$Nig2 = _availability$id4$Nig[previousDay]) === null || _availability$id4$Nig2 === void 0 ? void 0 : _availability$id4$Nig2.status) === 'selected') {\n                        return false;\n                      }\n                    }\n\n                    // אם המשמרת היא Night – לבדוק אם עבד Morning או Noon ביום שאחרי\n                    if (selectedShiftToSwap.shift === 'Night') {\n                      var _availability$id5, _availability$id5$Mor, _availability$id5$Mor2, _availability$id6, _availability$id6$Noo, _availability$id6$Noo2;\n                      const currentDayIndex = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(selectedShiftToSwap.day);\n                      const nextDay = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][currentDayIndex + 1];\n                      if (nextDay && ((availability === null || availability === void 0 ? void 0 : (_availability$id5 = availability[id]) === null || _availability$id5 === void 0 ? void 0 : (_availability$id5$Mor = _availability$id5.Morning) === null || _availability$id5$Mor === void 0 ? void 0 : (_availability$id5$Mor2 = _availability$id5$Mor[nextDay]) === null || _availability$id5$Mor2 === void 0 ? void 0 : _availability$id5$Mor2.status) === 'selected' || (availability === null || availability === void 0 ? void 0 : (_availability$id6 = availability[id]) === null || _availability$id6 === void 0 ? void 0 : (_availability$id6$Noo = _availability$id6.Noon) === null || _availability$id6$Noo === void 0 ? void 0 : (_availability$id6$Noo2 = _availability$id6$Noo[nextDay]) === null || _availability$id6$Noo2 === void 0 ? void 0 : _availability$id6$Noo2.status) === 'selected')) {\n                        return false;\n                      }\n                    }\n                    return true;\n                  }).sort(([, a], [, b]) => (a.name || '').localeCompare(b.name || '')).map(([id, user]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: id,\n                    children: user.name\n                  }, id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1232,\n                    columnNumber: 65\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1187,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1185,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"submit-swap-button\",\n                onClick: handleOfferShift,\n                children: \"Offer Shift\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1242,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1184,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1178,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-schedule-message\",\n          children: \"No published schedule is available for this week.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1251,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 723,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"YEMOBwMYjZj4plZgv+H0TgTw7aU=\", false, function () {\n  return [useLocation];\n});\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","FaChevronLeft","FaChevronRight","updateAvailabilityStatus","getAllAvailabilities","getNecessaryEmployees","saveNecessaryEmployees","saveWeeklyShiftTargets","getWeeklyShiftTargets","fetchPublishStatus","savePublishStatus","saveEditStatus","fetchEditStatus","getUsers","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","handleOtherShiftsOfDayWhenDeselectAShift","Navbar","sendNotification","useLocation","FaCalendarCheck","FaEdit","toast","ToastContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","ScheduleScreen","_s","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","location","queryParams","URLSearchParams","search","initialWeekOffset","parseInt","get","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","highlightedUser","setHighlightedUser","selectedUserNotes","setSelectedUserNotes","shiftCounts","setShiftCounts","necessaryEmployees","setNecessaryEmployees","weeklyShiftTargets","setWeeklyShiftTargets","totalNecessaryEmployees","setTotalNecessaryEmployees","totalAssignedShifts","setTotalAssignedShifts","totalWeeklyTargets","setTotalWeeklyTargets","isPublished","setIsPublished","isAdmin","setIsAdmin","isEditAllowed","setIsEditAllowed","mostCriticalShifts","setMostCriticalShifts","isConfirmModalOpen","setIsConfirmModalOpen","isConfirmingPublish","setIsConfirmingPublish","isConfirmingEdit","setIsConfirmingEdit","isWarningVisible","setIsWarningVisible","isViewingAsEmployee","setIsViewingAsEmployee","selectedShiftToSwap","setSelectedShiftToSwap","offerToUserId","setOfferToUserId","shiftOfferParams","setShiftOfferParams","offerShift","offerDay","fromUser","offeredTo","shift","day","loggedUser","JSON","parse","localStorage","getItem","user","role","id","isScheduleFullyStaffed","fetchAvailabilityAndUsers","_loggedUser$company","companyId","company","weekKey","availabilityData","usersData","necessaryEmployeesData","weeklyTargetsData","Promise","all","calculateTotalNecessaryEmployees","updatedWeeklyTargets","Object","values","forEach","console","warn","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","handleWeeklyShiftTargetChange","userId","value","parsedValue","Math","min","updatedTargets","total","reduce","sum","target","cleanedTargets","fromEntries","entries","filter","key","handleWeekChange","direction","prevOffset","getStatusClass","status","_necessaryEmployees$d","selectedEmployeesCount","userData","_userData$shift","availabilityInfo","maxNecessaryEmployees","currentShiftCount","maxShiftsAllowed","handleEmployeeClick","_availabilityData$use","userNotes","notes","keys","updateShiftCounts","counts","totalShifts","shifts","userShiftCount","dayShifts","saveNecessaryEmployeesToDB","handleStatusUpdate","currentStatus","_necessaryEmployees$d2","_userData$shift2","newStatus","updatedAvailability","otherShift","employeesWithAvailability","some","sort","userIdA","userIdB","_users$userIdA","_users$userIdA$name","_users$userIdB","_users$userIdB$name","nameA","name","toLowerCase","nameB","localeCompare","handleNecessaryEmployeesChange","updatedNecessaryEmployees","_userData$shift3","saveToDB","dayData","shiftCount","calculateTotalAssignedShifts","count","togglePublishStatus","alert","employeeList","u","startDate","weekRange","formattedStart","toISOString","slice","notificationLink","employeeId","fetchPublishStatusFromDB","_status$status","requiredCount","selectedCount","_userData$shift4","isPublishButtonDisabled","hasWeeklyNotes","userAvailability","trim","toggleEditStatus","fetchEditStatusFromDB","_status$isEditAllowed","calculateShiftCriticality","_necessaryEmployees$d3","necessary","selected","_userData$shift5","_userData$shift5$day","defaults","_userData$shift6","_userData$shift6$day","_userData$shift7","_userData$shift7$day","isAvailable","pow","findMostCriticalShifts","highestCriticality","Infinity","criticalShifts","_necessaryEmployees$d4","criticality","_userData$shift8","_userData$shift8$day","push","openConfirmModal","actionType","closeConfirmModal","getUserShiftTable","days","map","row","_availability$userId","_availability$userId$","shiftData","handleOfferShift","link","recipients","_availability$id","_availability$id$Nigh","_availability$id$Nigh2","_availability$id2","_availability$id2$Mor","_availability$id2$Mor2","_availability$id3","_availability$id3$Noo","_availability$id3$Noo2","isAssignedThatDay","_shiftData$day","currentIndex","indexOf","prev","next","includes","Night","Morning","Noon","recipientId","_users$fromUser","success","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","style","marginRight","index","_necessaryEmployees$d5","_necessaryEmployees$d6","_userData$shift9","isFullyStaffed","isMostCritical","criticalShift","type","onChange","e","_userData$shift10","_users$userIdA2","_users$userIdB2","_userData$shift11","_users$userId","statusClass","backgroundColor","color","pointerEvents","cursor","disabled","isTargetMet","hasNotes","textColor","max","stopPropagation","Evening","selectedEmployees","_userData$shift12","_users$userIdA3","_users$userIdA3$name","_users$userIdB3","_users$userIdB3$name","_users$userId2","isOwnShift","isSelected","isShiftOfferedToMe","_shiftData$selectedSh","_availability$id4","_availability$id4$Nig","_availability$id4$Nig2","currentDayIndex","previousDay","_availability$id5","_availability$id5$Mor","_availability$id5$Mor2","_availability$id6","_availability$id6$Noo","_availability$id6$Noo2","nextDay","a","b","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa';\nimport { updateAvailabilityStatus, getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets, fetchPublishStatus, savePublishStatus, saveEditStatus, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nimport { sendNotification } from '../services/notificationService';\nimport { useLocation } from 'react-router-dom';\n\nimport { FaCalendarCheck, FaEdit } from 'react-icons/fa';\n\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const initialWeekOffset = parseInt(queryParams.get('weekOffset'), 10) || 0;\n    const [weekOffset, setWeekOffset] = useState(initialWeekOffset);\n\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n    const [highlightedUser, setHighlightedUser] = useState(null);\n    const [selectedUserNotes, setSelectedUserNotes] = useState('');\n    const [shiftCounts, setShiftCounts] = useState({});\n    const [necessaryEmployees, setNecessaryEmployees] = useState({});\n    const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n    const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n    const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n    const [totalWeeklyTargets, setTotalWeeklyTargets] = useState(0);\n    const [isPublished, setIsPublished] = useState(false);\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [isEditAllowed, setIsEditAllowed] = useState(false);\n    const [mostCriticalShifts, setMostCriticalShifts] = useState([]);\n    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n    const [isConfirmingPublish, setIsConfirmingPublish] = useState(false);\n    const [isConfirmingEdit, setIsConfirmingEdit] = useState(false);\n\n    const [isWarningVisible, setIsWarningVisible] = useState(false);\n    const [isViewingAsEmployee, setIsViewingAsEmployee] = useState(false);\n\n    const [selectedShiftToSwap, setSelectedShiftToSwap] = useState(null);\n\n    const [offerToUserId, setOfferToUserId] = useState('');\n\n    const [shiftOfferParams, setShiftOfferParams] = useState(null);\n\n    useEffect(() => {\n        const offerShift = queryParams.get('offerShift');\n        const offerDay = queryParams.get('offerDay');\n        const fromUser = queryParams.get('fromUser');\n        const offeredTo = queryParams.get('offeredTo');\n\n        if (offerShift && offerDay && fromUser && offeredTo) {\n            setShiftOfferParams({ shift: offerShift, day: offerDay, fromUser, offeredTo });\n        }\n    }, [location.search]);\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        setIsAdmin(loggedUser?.user.role === 'admin');\n        setHighlightedUser(loggedUser?.user.id);\n\n        const offeredTo = queryParams.get('offeredTo');\n        if (offeredTo && offeredTo === loggedUser?.user.id) {\n            setHighlightedUser(offeredTo);\n        }\n    }, []);\n    \n    useEffect(() => {\n        if (isPublished && !isScheduleFullyStaffed()) {\n            setIsWarningVisible(true);\n        } else {\n            setIsWarningVisible(false);\n        }\n    }, [availability, necessaryEmployees, isPublished]);\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת כל הנתונים הדרושים\n                const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers(),\n                    getNecessaryEmployees(companyId, weekKey),\n                    getWeeklyShiftTargets(companyId, weekKey), // קריאה לנתוני weeklyShiftTargets\n                ]);\n\n                // עדכון ה-states בהתאם לנתונים שהתקבלו מהשרת\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n                setNecessaryEmployees(necessaryEmployeesData || {});\n                calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n\n                // הגדרת ערכי ברירת מחדל ל-weeklyShiftTargets\n                const updatedWeeklyTargets = { ...weeklyTargetsData };\n                Object.values(usersData).forEach(user => {\n                    // בדיקה אם user.id קיים\n                    if (!user?.id) {\n                        console.warn(\"User without ID found:\", user);\n                        return; // דלג על משתמשים ללא ID\n                    }\n\n                    if (!updatedWeeklyTargets[user.id]) {\n                        updatedWeeklyTargets[user.id] = 0; // ערך ברירת מחדל\n                    }\n                });\n\n                setWeeklyShiftTargets(updatedWeeklyTargets);\n\n                // חישוב תאריכים לשבוע הנוכחי\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n                });\n                setWeekDates(dates);\n\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n\n    const handleWeeklyShiftTargetChange = async (userId, value) => {\n        // הבטחת הערך המקסימלי ל-6\n        const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n\n        // בדיקה אם היעד החדש קטן ממספר המשמרות הנוכחי\n        if (parsedValue < shiftCounts[userId]) {\n            console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n            return; // עצירת השינוי\n        }\n\n        // עדכון היעדים השבועיים\n        const updatedTargets = { ...weeklyShiftTargets, [userId]: parsedValue };\n        setWeeklyShiftTargets(updatedTargets);\n\n        // עדכון הסכום הכולל של היעדים השבועיים\n        const total = Object.values(updatedTargets).reduce((sum, target) => sum + (target || 0), 0);\n        setTotalWeeklyTargets(total);\n\n        // סינון המידע לפני שמירתו ל-DB\n        const cleanedTargets = Object.fromEntries(\n            Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees') // סינון המפתח הלא רצוי\n        );\n\n        // שמירת הערך ל-DB\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n        } catch (error) {\n            console.error('Failed to save weekly shift targets:', error);\n        }\n    };\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status, userId, shift, day) => {\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        // אם מספר העובדים הנבחרים שווה או גדול מהנדרש למשמרת\n        if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n        }\n\n        // בדיקת מספר המשמרות שכבר נבחרו עבור העובד מול היעד השבועי\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        // אם העובד הגיע למכסת המשמרות השבועיות שהוגדרו לו\n        if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled'; // הדגשה אם העובד נבחר\n        }\n\n        // **הוספת הדגשה תמידית למשתמש שנבחר**\n        if (highlightedUser === userId) {\n            return status === 'disabled' ? 'status-disabled highlighted-user' : `highlighted-user ${status}`;\n        }\n\n        // שאר הלוגיקה הקיימת\n        if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled'; // הכפתורים יהיו חסומים אם היעד השבועי הושג\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const handleEmployeeClick = async (userId) => {\n        if (highlightedUser === userId) {\n            setHighlightedUser(null);\n            setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n            return;\n        }\n\n        // איפוס ההערות לפני שליפת ההערות החדשות\n        setSelectedUserNotes('');\n\n        setHighlightedUser(userId);\n\n        if (currentCompany && userId) {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n\n                const userNotes = availabilityData?.[userId]?.notes || 'No notes available.';\n                setSelectedUserNotes(userNotes);\n            } catch (err) {\n                console.error('Failed to fetch notes:', err);\n                setSelectedUserNotes('Error fetching notes.');\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (Object.keys(availability).length > 0) {\n            updateShiftCounts();\n        }\n    }, [availability]);\n\n    const updateShiftCounts = () => {\n        const counts = {};\n        let totalShifts = 0; // משתנה לספירת המשמרות הכוללות שהוקצו\n\n        Object.entries(availability).forEach(([userId, shifts]) => {\n            const userShiftCount = Object.values(shifts).reduce(\n                (sum, dayShifts) =>\n                    sum +\n                    Object.values(dayShifts).filter((shift) => shift.status === 'selected').length,\n                0\n            );\n            counts[userId] = userShiftCount;\n            totalShifts += userShiftCount; // הוספה למספר הכולל\n        });\n\n        setShiftCounts(counts);\n        setTotalAssignedShifts(totalShifts); // עדכון state של סך כל המשמרות\n    };\n\n    useEffect(() => {\n        const saveNecessaryEmployeesToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שמירת necessaryEmployees ל-DB\n                if (Object.keys(necessaryEmployees).length > 0) {\n                    await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n                }\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n\n        // נוודא שאנו שומרים רק אם מדובר בעדכון אמיתי ולא מעבר שבוע\n        if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n            saveNecessaryEmployeesToDB();\n        }\n    }, [necessaryEmployees, currentCompany]);\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        // בדיקת מספר העובדים הנבחרים למשמרת הנוכחית מול העובדים הנדרשים\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        // אם מספר העובדים הנבחרים שווה או גדול מהנדרש, למנוע בחירה נוספת\n        if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n            return;\n        }\n\n        // בדיקת מספר המשמרות שכבר נבחרו עבור העובד מול היעד השבועי\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        // אם העובד הגיע למספר המשמרות המקסימלי, למנוע בחירה נוספת\n        if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n            return;\n        }\n\n        // המשך עדכון סטטוס\n        if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            // Update the current shift's status to 'selected' or 'default'\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                // Disable other shifts on the same day\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                // Handle unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                // Undo selection and revert unique rules\n                await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n                // Revert unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            // Update state with the modified availability\n            setAvailability(updatedAvailability);\n\n            // עדכון ה-counts והכפתורים\n            updateShiftCounts();\n\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    const employeesWithAvailability = Object.entries(users)\n        .filter(([userId]) =>\n            availability[userId] && Object.values(availability[userId]).some((shifts) =>\n                Object.values(shifts).some((shift) => shift.status === 'selected' || shift.status === 'default')\n            )\n        )\n        .sort(([userIdA], [userIdB]) => {\n            const nameA = users[userIdA]?.name?.toLowerCase() || '';\n            const nameB = users[userIdB]?.name?.toLowerCase() || '';\n            return nameA.localeCompare(nameB); // מיון אלפביתי לפי שם\n        });\n\n    const handleNecessaryEmployeesChange = (day, shift, value) => {\n        const updatedNecessaryEmployees = { ...necessaryEmployees };\n\n        if (!updatedNecessaryEmployees[day]) {\n            updatedNecessaryEmployees[day] = {};\n        }\n\n        const parsedValue = parseInt(value, 10) || 0;\n\n        // בדיקת מספר העובדים שכבר נבחרו למשמרת\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        // אם הערך החדש קטן ממספר העובדים שנבחרו, למנוע שינוי\n        if (parsedValue < selectedEmployeesCount) {\n            return; // עצירת השינוי\n        }\n\n        // עדכון הערך החדש אם הוא חוקי\n        updatedNecessaryEmployees[day][shift] = parsedValue;\n\n        setNecessaryEmployees(updatedNecessaryEmployees);\n        calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n\n        // שמירה ל-DB כאשר הערך משתנה\n        const saveToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n        saveToDB();\n    };\n\n    const calculateTotalNecessaryEmployees = (necessaryEmployeesData) => {\n        let total = 0;\n        Object.values(necessaryEmployeesData).forEach((dayData) => {\n            Object.values(dayData).forEach((shiftCount) => {\n                total += shiftCount || 0;\n            });\n        });\n        setTotalNecessaryEmployees(total);\n    };\n\n    const calculateTotalAssignedShifts = (shiftCounts) => {\n        const total = Object.values(shiftCounts).reduce((sum, count) => sum + count, 0);\n        setTotalAssignedShifts(total);\n    };\n\n    useEffect(() => {\n        const total = Object.values(weeklyShiftTargets).reduce((sum, target) => sum + (target || 0), 0);\n        setTotalWeeklyTargets(total);\n    }, [weeklyShiftTargets]);\n\n    const togglePublishStatus = async () => {\n        if (!isPublished && !isScheduleFullyStaffed()) {\n            alert('Cannot publish schedule: not all shifts are fully staffed.');\n            return;\n        }\n\n        try {\n            const newStatus = !isPublished;\n            const weekKey = calculateWeekKey(weekOffset);\n\n            // עדכון הסטטוס ב-DB\n            await savePublishStatus(currentCompany, weekKey, newStatus);\n\n            // שליחת התראות אם מפרסמים (ולא אם מבטלים פרסום)\n            // בתוך togglePublishStatus:\n            if (newStatus) {\n                const employeeList = Object.entries(users).filter(([_, u]) => u.role === 'employee');\n                const startDate = new Date();\n                startDate.setDate(startDate.getDate() + weekOffset * 7 - startDate.getDay());\n\n                const weekRange = calculateWeekRange(weekOffset);\n                const formattedStart = startDate.toISOString().slice(0, 10); // YYYY-MM-DD\n                const notificationLink = `/schedule?weekOffset=${weekOffset}`;\n\n                for (const [employeeId] of employeeList) {\n                    await sendNotification(\n                        currentCompany,\n                        employeeId,\n                        `Weekly schedule for ${weekRange} has been published.`,\n                        notificationLink\n                    );\n                }\n            }\n\n\n\n            // עדכון ה-UI\n            setIsPublished(newStatus);\n        } catch (error) {\n            console.error('Failed to toggle publish status:', error);\n        }\n    };\n\n\n    useEffect(() => {\n        const fetchPublishStatusFromDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const status = await fetchPublishStatus(currentCompany, weekKey);\n\n                // השתמש בערך שבתוך המפתח 'status' ולא באובייקט כולו\n                setIsPublished(status?.status ?? false); // True or False\n            } catch (error) {\n                console.error('Failed to fetch publish status:', error);\n            }\n        };\n\n        if (currentCompany) {\n            fetchPublishStatusFromDB();\n        }\n    }, [currentCompany, weekOffset]);\n\n    const isScheduleFullyStaffed = () => {\n        for (const day of Object.keys(necessaryEmployees || {})) {\n            for (const shift of Object.keys(necessaryEmployees[day] || {})) {\n                const requiredCount = necessaryEmployees[day][shift] || 0;\n                const selectedCount = Object.entries(availability).filter(([_, userData]) => {\n                    const availabilityInfo = userData?.[shift]?.[day];\n                    return availabilityInfo?.status === 'selected';\n                }).length;\n\n                if (selectedCount !== requiredCount) {\n                    return false; // לפחות משמרת אחת אינה מלאה\n                }\n            }\n        }\n        return true; // כל המשמרות מלאות\n    };\n\n    const isPublishButtonDisabled = !isScheduleFullyStaffed() && !isPublished;\n\n    const hasWeeklyNotes = (userId) => {\n        const userAvailability = availability[userId];\n        return userAvailability && userAvailability.notes && userAvailability.notes.trim() !== '';\n    };\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        setIsAdmin(loggedUser?.user.role === 'admin');\n\n        const offeredTo = queryParams.get('offeredTo');\n        if (offeredTo && offeredTo === loggedUser?.user.id) {\n            setHighlightedUser(offeredTo);\n        } else {\n            setHighlightedUser(loggedUser?.user.id);\n        }\n    }, []);\n    \n\n\n    const toggleEditStatus = async () => {\n        try {\n            const newStatus = !isEditAllowed;\n            const weekKey = calculateWeekKey(weekOffset);\n\n            // שמירת הסטטוס לשרת\n            await saveEditStatus(currentCompany, weekKey, newStatus);\n\n            // עדכון ה-UI\n            setIsEditAllowed(newStatus);\n        } catch (error) {\n            console.error('Failed to toggle edit status:', error);\n        }\n    };\n\n    useEffect(() => {\n        const fetchEditStatusFromDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const status = await fetchEditStatus(currentCompany, weekKey);\n\n                // עדכון המצב\n                setIsEditAllowed(status?.isEditAllowed ?? false); // ברירת מחדל ל-false אם אין מידע\n            } catch (error) {\n                console.error('Failed to fetch edit status:', error);\n            }\n        };\n\n        if (currentCompany) {\n            fetchEditStatusFromDB();\n        }\n    }, [currentCompany, weekOffset]);\n\n    const calculateShiftCriticality = (day, shift) => {\n        const necessary = necessaryEmployees?.[day]?.[shift] || 0;\n        const selected = Object.values(availability).filter(userData =>\n            userData?.[shift]?.[day]?.status === 'selected'\n        ).length;\n\n        const defaults = Object.entries(availability)\n            .filter(([_, userData]) => {\n                const status = userData?.[shift]?.[day]?.status;\n                return userData?.[shift]?.[day]?.isAvailable && status !== 'selected' && status !== 'disabled';\n            })\n            .length;\n\n        if (necessary === selected) return 0; // משמרת מלאה אינה קריטית\n\n        return (necessary - selected) / Math.pow((defaults + 1), 2);\n    };\n\n    const findMostCriticalShifts = () => {\n        let highestCriticality = -Infinity;\n        let criticalShifts = [];\n\n        Object.keys(necessaryEmployees || {}).forEach(day => {\n            Object.keys(necessaryEmployees[day] || {}).forEach(shift => {\n                const criticality = calculateShiftCriticality(day, shift);\n                const necessary = necessaryEmployees?.[day]?.[shift] || 0;\n                const selected = Object.values(availability).filter(userData =>\n                    userData?.[shift]?.[day]?.status === 'selected'\n                ).length;\n\n                if (necessary === selected) return; // אם המשמרת מלאה, אין צורך להוסיף אותה\n\n                if (criticality > highestCriticality) {\n                    highestCriticality = criticality;\n                    criticalShifts = [{ day, shift }];\n                } else if (criticality === highestCriticality && criticality > 0) {\n                    criticalShifts.push({ day, shift });\n                }\n            });\n        });\n\n        return criticalShifts;\n    };\n\n    // עדכון הנתון בכל שינוי\n    useEffect(() => {\n        setMostCriticalShifts(findMostCriticalShifts());\n    }, [necessaryEmployees, availability]);\n\n    const openConfirmModal = (actionType) => {\n        if (actionType === 'publish') {\n            setIsConfirmingPublish(true);\n            setIsConfirmingEdit(false);\n        } else if (actionType === 'edit') {\n            setIsConfirmingEdit(true);\n            setIsConfirmingPublish(false);\n        }\n        setIsConfirmModalOpen(true);\n    };\n\n    const closeConfirmModal = () => {\n        setIsConfirmModalOpen(false);\n    };\n\n    const getUserShiftTable = (userId) => {\n        if (!availability[userId]) return [];\n\n        const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        return shifts.map((shift) => {\n            const row = { shift: shift[0] + (shift === 'Night' ? 't' : '') }; // קיצור לשם המשמרת\n            days.forEach((day) => {\n                const shiftData = availability[userId]?.[shift]?.[day];\n                if (shiftData?.status === 'selected') {\n                    row[day] = '✅'; // שובץ\n                } else if (shiftData?.isAvailable) {\n                    row[day] = '🟠'; // רק זמינות (חלול)\n                } else {\n                    row[day] = ''; // לא הגיש זמינות\n                }\n            });\n            return row;\n        });\n    };\n\n    const handleOfferShift = async () => {\n        const weekKey = calculateWeekKey(weekOffset);\n        const shift = selectedShiftToSwap.shift;\n        const day = selectedShiftToSwap.day;\n        const fromUser = selectedShiftToSwap.userId;\n\n        const weekRange = calculateWeekRange(weekOffset);\n        const link = `/schedule?weekOffset=${weekOffset}`;\n\n        let recipients = [];\n\n        if (offerToUserId) {\n            // נבחר עובד ספציפי\n            recipients.push(offerToUserId);\n        } else {\n            // \"No one specific\" - שלח לכל מי שנשאר בתפריט אחרי הסינונים\n            recipients = Object.entries(users)\n                .filter(([id, user]) => {\n                    if (id === fromUser) return false;\n\n                    const isAssignedThatDay = Object.values(availability?.[id] || {}).some(\n                        shiftData => shiftData?.[day]?.status === 'selected'\n                    );\n                    if (isAssignedThatDay) return false;\n\n                    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                    const currentIndex = days.indexOf(day);\n                    const prev = days[currentIndex - 1];\n                    const next = days[currentIndex + 1];\n\n                    if (['Morning', 'Noon'].includes(shift) && prev && availability?.[id]?.Night?.[prev]?.status === 'selected')\n                        return false;\n\n                    if (shift === 'Night' && next &&\n                        (availability?.[id]?.Morning?.[next]?.status === 'selected' ||\n                            availability?.[id]?.Noon?.[next]?.status === 'selected'))\n                        return false;\n\n                    return true;\n                })\n                .map(([id]) => id);\n        }\n\n        for (const recipientId of recipients) {\n            await sendNotification(\n                currentCompany,\n                recipientId,\n                `You are offered to take ${shift} shift on ${day} (Week: ${weekRange}) from ${users[fromUser]?.name || 'a colleague'}.`,\n                link\n            );\n        }\n\n        toast.success('Shift offer sent successfully!');\n        setSelectedShiftToSwap(null);\n        setOfferToUserId('');\n    };\n\n\n    return (\n        <div>\n            <Navbar />\n            <ToastContainer />\n\n            {isConfirmModalOpen && (\n                <div className=\"modal-overlay\">\n                    <div className=\"modal-content\">\n                        <h2>\n                            {isConfirmingPublish\n                                ? isPublished ? 'Confirm Schedule Unpublishing' : 'Confirm Schedule Publication'\n                                : isConfirmingEdit\n                                    ? isEditAllowed ? 'Confirm Disabling Editing' : 'Confirm Enabling Editing'\n                                    : ''}\n                        </h2>\n                        <p>\n                            {isConfirmingPublish\n                                ? isPublished ? 'Are you sure you want to unpublish this schedule?' : 'Are you sure you want to publish this schedule?'\n                                : isConfirmingEdit\n                                    ? isEditAllowed ? 'Are you sure you want to disable weekly availability submissions?' : 'Are you sure you want to enable weekly availability submissions?'\n                                    : ''}\n                        </p>\n                        <div className=\"modal-buttons\">\n                            <button className=\"confirm-button\" onClick={() => {\n                                if (isConfirmingPublish) {\n                                    togglePublishStatus();\n                                } else if (isConfirmingEdit) {\n                                    toggleEditStatus();\n                                }\n                                closeConfirmModal();\n                            }}>\n                                Confirm\n                            </button>\n                            <button className=\"cancel-button\" onClick={closeConfirmModal}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n\n\n            <div className=\"navbar-placeholder\"></div> {/* רווח לניווט */}\n\n            <div className=\"schedule-container\">\n                <h1>Weekly Schedule</h1>\n                {isAdmin && (\n                    <div className=\"view-toggle-container\">\n                        <button\n                            className=\"view-toggle-button\"\n                            onClick={() => setIsViewingAsEmployee(prev => !prev)}\n                        >\n                            {isViewingAsEmployee ? <FaEdit style={{ marginRight: '6px' }} /> : <FaCalendarCheck style={{ marginRight: '6px' }} />}\n                            {isViewingAsEmployee ? 'Back to Draft View' : 'View Final Schedule'}\n                        </button>\n                    </div>\n\n                )}\n\n\n                {isLoading ? (\n                    <p>Loading schedule...</p>\n                ) : error ? (\n                    <p className=\"error\">{error}</p>\n                ) : (\n                    <>\n                        {!isAdmin && (\n                            <div className=\"week-navigation centered-navigation\">\n                                <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                    Previous Week\n                                </button>\n                                <h2 className=\"week-range\">{calculateWeekRange(weekOffset)}</h2>\n                                <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                    Next Week\n                                </button>\n                            </div>\n                        )}\n\n\n\n                        {/* הצגת התוכן רק ל-Admin */}\n                        {(isAdmin && !isViewingAsEmployee) ? (\n                            <div className=\"schedule-content\">\n                                <table className=\"schedule-table\">\n                                    <thead>\n                                        <tr>\n                                            <th>Shift</th>\n                                            {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                                (day, index) => (\n                                                    <th key={day}>\n                                                        {day} <br />\n                                                        <span className=\"date\">{weekDates[index]}</span>\n                                                    </th>\n                                                )\n                                            )}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                            <tr key={shift}>\n                                                <td>{shift}</td>\n                                                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                    const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                        return availabilityInfo?.status === 'selected';\n                                                    }).length;\n\n                                                    const isFullyStaffed = selectedEmployeesCount === (necessaryEmployees?.[day]?.[shift] || 0);\n                                                    const criticality = calculateShiftCriticality(day, shift);\n                                                    const isMostCritical = mostCriticalShifts.some(criticalShift =>\n                                                        criticalShift.day === day && criticalShift.shift === shift\n                                                    );\n\n                                                    return (\n                                                        <td\n                                                            key={day}\n                                                            className={`schedule-cell \n                                                                ${isFullyStaffed ? 'fully-staffed' : ''} \n                                                                ${mostCriticalShifts.some(criticalShift =>\n                                                                criticalShift.day === day && criticalShift.shift === shift\n                                                            ) ? 'most-critical' : ''}`}\n                                                        >\n\n                                                            {/* Input field for necessary employees */}\n                                                            <input\n                                                                type=\"number\"\n                                                                min=\"0\"\n                                                                className=\"necessary-employees-input\"\n                                                                value={necessaryEmployees?.[day]?.[shift] || 0}\n                                                                onChange={(e) => handleNecessaryEmployeesChange(day, shift, e.target.value)}\n                                                            />\n\n                                                            {/* Indicator for selected employees */}\n                                                            <div className=\"selected-employees-indicator\">\n                                                                {selectedEmployeesCount} Selected\n                                                            </div>\n\n                                                            {Object.entries(availability)\n                                                                .filter(([userId, userData]) => {\n                                                                    const availabilityInfo = userData?.[shift]?.[day];\n                                                                    return availabilityInfo?.isAvailable; // רק עובדים זמינים\n                                                                })\n                                                                .sort(([userIdA], [userIdB]) => {\n                                                                    const nameA = users[userIdA]?.name || '';\n                                                                    const nameB = users[userIdB]?.name || '';\n                                                                    return nameA.localeCompare(nameB); // מיון אלפביתי לפי שם\n                                                                })\n                                                                .map(([userId, userData]) => {\n                                                                    const availabilityInfo = userData?.[shift]?.[day];\n                                                                    const statusClass = getStatusClass(availabilityInfo.status, userId);\n\n                                                                    return (\n                                                                        <div\n                                                                            key={userId}\n                                                                            className={`availability-entry ${statusClass}`}\n                                                                            onClick={() =>\n                                                                                handleStatusUpdate(\n                                                                                    userId,\n                                                                                    shift,\n                                                                                    day,\n                                                                                    availabilityInfo.status\n                                                                                )\n                                                                            }\n                                                                            style={{\n                                                                                backgroundColor:\n                                                                                    availabilityInfo.status === 'selected'\n                                                                                        ? '#2ecc71'\n                                                                                        : availabilityInfo.status === 'disabled'\n                                                                                            ? '#e74c3c'\n                                                                                            : '#ffff',\n                                                                                color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                                pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                                cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                            }}\n                                                                        >\n                                                                            {users[userId]?.name || 'Unknown'}\n                                                                        </div>\n                                                                    );\n                                                                })}\n                                                        </td>\n                                                    );\n                                                })}\n                                            </tr>\n                                        ))}\n\n                                    </tbody>\n                                </table>\n\n                                <div className=\"employees-list\">\n                                    <h3>Employees</h3>\n\n                                    <div className=\"week-navigation\">\n                                        <button className=\"week-nav-button\" onClick={() => handleWeekChange(-1)}>\n                                            <FaChevronLeft />\n                                        </button>\n                                        <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                                        <button className=\"week-nav-button\" onClick={() => handleWeekChange(1)}>\n                                            <FaChevronRight />\n                                        </button>\n                                    </div>\n\n                                    <div className=\"buttons-container\">\n                                        {isWarningVisible && (\n                                            <div className=\"warning-banner\">\n                                                ⚠️ Warning: One or more shifts are no longer fully staffed. Please review the schedule.\n                                            </div>\n                                        )}\n\n                                        <button\n                                            className={`general-button ${isPublished ? 'green' : 'red'}`}\n                                            onClick={() => openConfirmModal('publish')}\n                                            disabled={isPublishButtonDisabled}\n                                        >\n                                            {isPublished ? 'Unpublish Schedule' : 'Publish Schedule'}\n                                            {isWarningVisible && <span className=\"publish-warning-icon\">🔴</span>}\n                                        </button>\n\n\n                                        <button\n                                            className={`general-button ${isEditAllowed ? 'green' : 'red'}`}\n                                            onClick={() => openConfirmModal('edit')}\n                                        >\n                                            {isEditAllowed ? 'Disable Editing' : 'Enable Editing'}\n                                        </button>\n\n                                    </div>\n\n\n                                    <div className=\"total-info-container\">\n                                        <h3>Weekly Overview</h3>\n                                        <hr />\n                                        <p>Weekly Staff: <span>{totalNecessaryEmployees}</span></p>\n                                        <hr />\n                                        <p>Weekly Shift Targets: <span>{totalWeeklyTargets}</span></p>\n                                        <hr />\n                                        <p>Assigned Shifts: <span>{totalAssignedShifts}</span></p>\n                                        <hr />\n                                    </div>\n\n\n                                    <ul>\n                                        {employeesWithAvailability.map(([userId, user]) => {\n                                            const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId]; // בדיקה אם היעד הושג\n                                            const hasNotes = hasWeeklyNotes(userId); // בדיקה אם יש הערות לעובד זה\n                                            const backgroundColor = hasNotes ? 'yellow' : '#2980b9'; // צהוב אם יש הערות, כחול אם אין\n                                            const textColor = hasNotes ? 'black' : 'white'; // טקסט שחור אם צהוב, לבן אם כחול\n\n                                            return (\n                                                <li\n                                                    key={userId}\n                                                    onClick={() => handleEmployeeClick(userId)}\n                                                    className={`${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`}\n                                                    style={{\n                                                        backgroundColor: isTargetMet ? '#d4edda' : 'inherit', // צבע רקע ירוק בהיר אם היעד הושג\n                                                    }}\n                                                >\n                                                    <div className=\"employee-details\">\n\n                                                        {/* אינדיקטור הערות */}\n                                                        <span\n                                                            className=\"notes-indicator\"\n                                                            style={{\n                                                                backgroundColor: backgroundColor,\n                                                                color: textColor, // צבע הטקסט לפי צבע הרקע\n                                                            }}\n                                                        >\n                                                            <span className=\"indicator-text\">i</span> {/* האות i */}\n                                                        </span>\n\n                                                        <span className=\"employee-name\">\n                                                            {user.name}\n                                                        </span>\n\n                                                        {/* שדה קלט עבור Weekly Shift Target */}\n                                                        <div className=\"weekly-shift-target\">\n                                                            <label>\n                                                                {shiftCounts[userId] || 0} shifts out of:\n                                                                <input\n                                                                    type=\"number\"\n                                                                    min=\"0\"\n                                                                    max=\"6\" // הגבלה ברמת ה-UI\n                                                                    value={weeklyShiftTargets[userId] || 0}\n                                                                    onClick={(e) => e.stopPropagation()} // עצירת האירוע\n                                                                    onChange={(e) => handleWeeklyShiftTargetChange(userId, e.target.value)}\n                                                                    className=\"weekly-shift-input\"\n                                                                />\n                                                            </label>\n                                                        </div>\n\n                                                        {highlightedUser === userId && (\n                                                            <>\n                                                                {selectedUserNotes && selectedUserNotes !== 'No notes available.' && (\n                                                                    <div className=\"employee-notes\">\n                                                                        <h4>Notes:</h4>\n                                                                        <p>{selectedUserNotes}</p>\n                                                                    </div>\n                                                                )}\n\n                                                                <div className=\"employee-table\">\n                                                                    <div className=\"mini-schedule-legend compact\">\n                                                                        <span className=\"legend-symbol\">✅</span> Assigned &nbsp;&nbsp;\n                                                                        <span className=\"legend-symbol\">🟠</span> Submitted\n                                                                    </div>\n\n\n                                                                    <table className=\"mini-schedule-table\">\n                                                                        <thead>\n                                                                            <tr>\n                                                                                <th>Shift</th>\n                                                                                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                                                                                    <th key={day}>{day}</th>\n                                                                                ))}\n                                                                            </tr>\n                                                                        </thead>\n                                                                        <tbody>\n                                                                            {getUserShiftTable(userId).map((row) => (\n                                                                                <tr key={row.shift}>\n                                                                                    <td>\n                                                                                        {{\n                                                                                            Morning: 'M',\n                                                                                            Noon: 'N',\n                                                                                            Evening: 'E',\n                                                                                            Night: 'Nt'\n                                                                                        }[row.shift] || row.shift}\n                                                                                    </td>\n                                                                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => (\n                                                                                        <td key={day}>{row[day]}</td>\n                                                                                    ))}\n                                                                                </tr>\n                                                                            ))}\n                                                                        </tbody>\n                                                                    </table>\n                                                                </div>\n\n                                                            </>\n                                                        )}\n\n\n\n                                                    </div>\n                                                </li>\n                                            );\n                                        })}\n                                    </ul>\n                                </div>\n                            </div>\n                        ) : (\n                            isPublished ? (\n                                <div>\n                                    <div className=\"schedule-content\">\n                                        {/* הטבלה הראשית */}\n                                        <table className=\"schedule-table\">\n                                            <thead>\n                                                <tr>\n                                                    <th>Shift</th>\n                                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                                        (day, index) => (\n                                                            <th key={day}>\n                                                                {day} <br />\n                                                                <span className=\"date\">{weekDates[index]}</span>\n                                                            </th>\n                                                        )\n                                                    )}\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                                    <tr key={shift}>\n                                                        <td>{shift}</td>\n                                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                            const selectedEmployees = Object.entries(availability).filter(([userId, userData]) => {\n                                                                const availabilityInfo = userData?.[shift]?.[day];\n                                                                return availabilityInfo?.status === 'selected';\n                                                            });\n\n                                                            return (\n                                                                <td key={day} className=\"schedule-cell\">\n                                                                    {selectedEmployees\n                                                                        .sort(([userIdA], [userIdB]) => {\n                                                                            const nameA = users[userIdA]?.name?.toLowerCase() || '';\n                                                                            const nameB = users[userIdB]?.name?.toLowerCase() || '';\n                                                                            return nameA.localeCompare(nameB);\n                                                                        })\n                                                                        .map(([userId]) => {\n                                                                            const isOwnShift = userId === highlightedUser;\n                                                                            const isSelected = selectedShiftToSwap &&\n                                                                                selectedShiftToSwap.userId === userId &&\n                                                                                selectedShiftToSwap.day === day &&\n                                                                                selectedShiftToSwap.shift === shift;\n\n                                                                            const loggedUser = JSON.parse(localStorage.getItem('user'));\n\n                                                                            const isShiftOfferedToMe =\n                                                                                shiftOfferParams &&\n                                                                                userId === shiftOfferParams.fromUser &&\n                                                                                day === shiftOfferParams.day &&\n                                                                                shift === shiftOfferParams.shift &&\n                                                                                shiftOfferParams.offeredTo === loggedUser?.user.id;\n                                                                                \n\n                                                                            return (\n                                                                                <div\n                                                                                    key={userId}\n                                                                                    className={`employee-button \n                                                                                    ${isOwnShift ? 'highlighted-own-shift' : ''} \n                                                                                    ${isSelected ? 'highlighted-swap' : ''} \n                                                                                    ${isShiftOfferedToMe ? 'offered-to-me' : ''}`}\n                                                                                    onClick={() => {\n                                                                                        if (isOwnShift) {\n                                                                                            if (isSelected) {\n                                                                                                setSelectedShiftToSwap(null);\n                                                                                            } else {\n                                                                                                setSelectedShiftToSwap({ userId, shift, day });\n                                                                                            }\n                                                                                        }\n                                                                                    }}\n                                                                                >\n                                                                                    {users[userId]?.name || 'Unknown'}\n                                                                                </div>\n                                                                            );\n                                                                        })\n                                                                    }\n                                                                </td>\n                                                            );\n                                                        })}\n                                                    </tr>\n                                                ))}\n                                            </tbody>\n                                        </table>\n\n\n\n\n                                        {/* כאן תתווסף רשימת העובדים בתצוגת הסידור הגמור למנהל */}\n                                        {isAdmin && (\n                                            <div className=\"employees-list\">\n                                                <h3>Employees</h3>\n                                                <ul>\n                                                    {employeesWithAvailability.map(([userId, user]) => {\n                                                        return (\n                                                            <li\n                                                                key={userId}\n                                                                onClick={() => handleEmployeeClick(userId)}\n                                                                className={`${highlightedUser === userId ? 'selected' : ''}`}\n                                                            >\n                                                                <div className=\"employee-details\">\n                                                                    <span className=\"employee-name\">{user.name}</span>\n                                                                </div>\n                                                            </li>\n                                                        );\n                                                    })}\n                                                </ul>\n                                            </div>\n                                        )}\n\n                                    </div>\n                                    {selectedShiftToSwap && (\n                                        <div className=\"swap-request-container\">\n                                            <h3>Offer Shift to Another Employee</h3>\n                                            <p>\n                                                You are offering your <strong>{selectedShiftToSwap.shift}</strong> shift on <strong>{selectedShiftToSwap.day}</strong> to another employee.\n\n                                            </p>\n                                            <div className=\"swap-form\">\n                                                <label>\n                                                    Choose employee to offer the shift to:\n                                                    <select value={offerToUserId} onChange={(e) => setOfferToUserId(e.target.value)}>\n                                                        <option value=\"\">No one specific</option>\n                                                        {Object.entries(users)\n                                                            .filter(([id, user]) => {\n                                                                if (id === selectedShiftToSwap.userId) return false;\n\n                                                                // בדיקה אם שובץ למשמרת כלשהי באותו יום\n                                                                const isAssignedThatDay = Object.values(availability?.[id] || {}).some(\n                                                                    shiftData => shiftData?.[selectedShiftToSwap.day]?.status === 'selected'\n                                                                );\n\n                                                                if (isAssignedThatDay) return false;\n\n                                                                // אם המשמרת היא Morning או Noon – לבדוק אם עבד Night ביום הקודם\n                                                                if (['Morning', 'Noon'].includes(selectedShiftToSwap.shift)) {\n                                                                    const currentDayIndex = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n                                                                        .indexOf(selectedShiftToSwap.day);\n                                                                    const previousDay = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][currentDayIndex - 1];\n\n                                                                    if (previousDay && availability?.[id]?.Night?.[previousDay]?.status === 'selected') {\n                                                                        return false;\n                                                                    }\n                                                                }\n\n                                                                // אם המשמרת היא Night – לבדוק אם עבד Morning או Noon ביום שאחרי\n                                                                if (selectedShiftToSwap.shift === 'Night') {\n                                                                    const currentDayIndex = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n                                                                        .indexOf(selectedShiftToSwap.day);\n                                                                    const nextDay = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][currentDayIndex + 1];\n\n                                                                    if (\n                                                                        nextDay &&\n                                                                        (\n                                                                            availability?.[id]?.Morning?.[nextDay]?.status === 'selected' ||\n                                                                            availability?.[id]?.Noon?.[nextDay]?.status === 'selected'\n                                                                        )\n                                                                    ) {\n                                                                        return false;\n                                                                    }\n                                                                }\n\n                                                                return true;\n                                                            })\n                                                            .sort(([, a], [, b]) => (a.name || '').localeCompare(b.name || ''))\n                                                            .map(([id, user]) => (\n                                                                <option key={id} value={id}>\n                                                                    {user.name}\n                                                                </option>\n                                                            ))}\n\n\n\n                                                    </select>\n                                                </label>\n\n                                                <button className=\"submit-swap-button\" onClick={handleOfferShift}>\n                                                    Offer Shift\n                                                </button>\n\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            ) : (\n                                <p className=\"no-schedule-message\">\n                                    No published schedule is available for this week.\n                                </p>\n                            )\n\n                        )}\n                    </>\n                )}\n            </div>\n\n        </div>\n    );\n}\n\nexport default ScheduleScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}