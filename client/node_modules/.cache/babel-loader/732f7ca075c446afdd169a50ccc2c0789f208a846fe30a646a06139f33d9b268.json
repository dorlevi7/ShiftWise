{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\nimport { saveAvailability, getAvailability, saveNecessaryEmployees, getNecessaryEmployees, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { getWeekDateObjects, calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport Select from 'react-select'; // ודא שזה מופיע בתחילת הקובץ\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AvailabilityScreen = () => {\n  _s();\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [availability, setAvailability] = useState(null);\n  const [notes, setNotes] = useState('');\n  const [currentWeek, setCurrentWeek] = useState(1);\n  const [userData, setUserData] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const [sortConfig, setSortConfig] = useState({\n    key: 'name',\n    direction: 'asc'\n  });\n  const [isEditAllowed, setIsEditAllowed] = useState(true);\n  const navigate = useNavigate();\n  const [weekDays, setWeekDays] = useState([]);\n  useEffect(() => {\n    const fetchEditStatusForWeek = async () => {\n      if (!userData) return;\n      const companyId = userData.company.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      try {\n        var _status$isEditAllowed;\n        const status = await fetchEditStatus(companyId, weekKey);\n        setIsEditAllowed((_status$isEditAllowed = status === null || status === void 0 ? void 0 : status.isEditAllowed) !== null && _status$isEditAllowed !== void 0 ? _status$isEditAllowed : false);\n      } catch (error) {\n        console.error('Failed to fetch edit status:', error);\n        setIsEditAllowed(false);\n      }\n    };\n    fetchEditStatusForWeek();\n  }, [userData, currentWeek]);\n\n  // On component mount, retrieve the logged-in user from localStorage.\n  // If no user is found, redirect to the login page.\n  // If the user is an admin, fetch all employees associated with the same company.\n  // Otherwise, set the selected employee ID to the current user's ID.\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      if (loggedUser.user.role === 'admin') {\n        const fetchEmployees = async () => {\n          try {\n            const usersData = await getUsers();\n            const companyId = loggedUser.company.id;\n            if (companyId) {\n              const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n                id,\n                ...user\n              })).filter(user => {\n                var _user$companyIds;\n                return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(company => company.companyId === companyId);\n              });\n              setEmployees(filteredEmployees);\n            }\n          } catch (error) {\n            console.error('Error fetching employees:', error);\n          }\n        };\n        fetchEmployees();\n      } else {\n        setUserData(loggedUser);\n        if (loggedUser.user.role === 'admin') {\n          // ... קוד לאדמין\n        } else {\n          setSelectedEmployeeId(loggedUser.user.id);\n\n          // ✅ הוספה כאן:\n          const fetchCurrentUserData = async () => {\n            try {\n              const usersData = await getUsers();\n              const userFromDB = usersData[loggedUser.user.id];\n              if (userFromDB) {\n                setEmployees([{\n                  id: loggedUser.user.id,\n                  ...userFromDB\n                }]);\n              }\n            } catch (error) {\n              console.error(\"Error fetching current user data:\", error);\n            }\n          };\n          fetchCurrentUserData();\n        }\n      }\n    }\n  }, [navigate]);\n\n  // Whenever the current week, selected employee, or user data changes,\n  // fetch the availability data for the selected employee for the relevant week.\n  // Initialize the availability state and notes based on the fetched data.\n  useEffect(() => {\n    const fetchAvailability = async () => {\n      if (!selectedEmployeeId || !userData) return;\n      const companyId = userData.company.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      try {\n        const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n        setAvailability(initializeAvailability(fetchedAvailability || {}));\n        setNotes((fetchedAvailability === null || fetchedAvailability === void 0 ? void 0 : fetchedAvailability.notes) || '');\n      } catch (error) {\n        console.error('Error fetching availability:', error);\n        alert('Failed to fetch availability. Please try again.');\n      }\n    };\n    fetchAvailability();\n  }, [currentWeek, selectedEmployeeId, userData]);\n\n  // Update the current week number whenever the week offset changes.\n  // Week numbers are 1-based, so we add 1 to the offset.\n  useEffect(() => {\n    const newWeek = weekOffset + 1;\n    setCurrentWeek(newWeek);\n    setWeekDays(getWeekDateObjects(newWeek));\n  }, [weekOffset]);\n\n  // Initialize the availability structure for all shifts and days of the week.\n  // If existing availability data is provided, use it;\n  // otherwise, default to isAvailable: false and status: 'default'.\n  const initializeAvailability = existingAvailability => {\n    return shifts.reduce((acc, shift) => {\n      acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n        var _existingAvailability, _existingAvailability2, _existingAvailability3, _existingAvailability4;\n        dayAcc[day] = {\n          isAvailable: ((_existingAvailability = existingAvailability[shift]) === null || _existingAvailability === void 0 ? void 0 : (_existingAvailability2 = _existingAvailability[day]) === null || _existingAvailability2 === void 0 ? void 0 : _existingAvailability2.isAvailable) || false,\n          status: ((_existingAvailability3 = existingAvailability[shift]) === null || _existingAvailability3 === void 0 ? void 0 : (_existingAvailability4 = _existingAvailability3[day]) === null || _existingAvailability4 === void 0 ? void 0 : _existingAvailability4.status) || 'default'\n        };\n        return dayAcc;\n      }, {});\n      return acc;\n    }, {});\n  };\n\n  // Toggle the availability status for a specific shift and day.\n  const handleAvailabilityChange = (shift, day) => {\n    setAvailability(prev => ({\n      ...prev,\n      [shift]: {\n        ...prev[shift],\n        [day]: {\n          ...prev[shift][day],\n          isAvailable: !prev[shift][day].isAvailable\n        }\n      }\n    }));\n  };\n\n  // Toggle all shifts for a specific day column.\n  // If all are selected, unselect them; otherwise, select all.\n  const handleDayColumnClick = day => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = shifts.every(shift => {\n        var _updatedAvailability$, _updatedAvailability$2;\n        return (_updatedAvailability$ = updatedAvailability[shift]) === null || _updatedAvailability$ === void 0 ? void 0 : (_updatedAvailability$2 = _updatedAvailability$[day]) === null || _updatedAvailability$2 === void 0 ? void 0 : _updatedAvailability$2.isAvailable;\n      });\n      shifts.forEach(shift => {\n        updatedAvailability[shift][day].isAvailable = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n\n  // Toggle all days for a specific shift row.\n  // If all are selected, unselect them; otherwise, select all.\n  const handleShiftRowClick = shift => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = daysOfWeek.every(day => {\n        var _updatedAvailability$3, _updatedAvailability$4;\n        return (_updatedAvailability$3 = updatedAvailability[shift]) === null || _updatedAvailability$3 === void 0 ? void 0 : (_updatedAvailability$4 = _updatedAvailability$3[day]) === null || _updatedAvailability$4 === void 0 ? void 0 : _updatedAvailability$4.isAvailable;\n      });\n      daysOfWeek.forEach(day => {\n        updatedAvailability[shift][day].isAvailable = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n\n  // Toggle all checkboxes in the entire table.\n  // If everything is selected, unselect all; otherwise, select all.\n  const handleSelectAll = () => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = shifts.every(shift => daysOfWeek.every(day => updatedAvailability[shift][day].isAvailable));\n      shifts.forEach(shift => {\n        daysOfWeek.forEach(day => {\n          updatedAvailability[shift][day].isAvailable = !allSelected;\n        });\n      });\n      return updatedAvailability;\n    });\n  };\n\n  // Handle submission of availability data for the selected employee.\n  // 1. Show error if no employee is selected.\n  // 2. Check if editing is allowed for the current week.\n  // 3. Save the availability data along with any notes.\n  // 4. If no necessaryEmployees data exists for the week, initialize it with default (0) values for each shift per day.\n  // 5. Save necessaryEmployees data only if it was just initialized.\n  const handleSubmit = async () => {\n    if (!selectedEmployeeId) {\n      toast.error('Please select an employee to save availability.');\n      return;\n    }\n    const companyId = userData.company.id;\n    const weekKey = calculateWeekKey(currentWeek);\n    try {\n      // בדיקת סטטוס עריכה עבור השבוע\n      const editStatus = await fetchEditStatus(companyId, weekKey);\n      if (!(editStatus !== null && editStatus !== void 0 && editStatus.isEditAllowed)) {\n        toast.error('Editing availability is currently locked for this week.');\n        return;\n      }\n\n      // שמירת זמינות של המשתמש\n      const dataToSave = {\n        ...availability,\n        notes\n      };\n      await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n\n      // בדיקה אם יש כבר נתונים של necessaryEmployees ב-DB\n      let necessaryEmployees = await getNecessaryEmployees(companyId, weekKey);\n\n      // אם אין נתונים ב-DB, לאתחל אותם\n      if (!necessaryEmployees || Object.keys(necessaryEmployees).length === 0) {\n        necessaryEmployees = daysOfWeek.reduce((acc, day) => {\n          acc[day] = {\n            Morning: 0,\n            Noon: 0,\n            Evening: 0,\n            Night: 0\n          };\n          return acc;\n        }, {});\n\n        // שמירה ל-DB רק במקרה של אתחול\n        await saveNecessaryEmployees(companyId, weekKey, necessaryEmployees);\n      }\n      toast.success('Availability and notes saved successfully!');\n    } catch (error) {\n      console.error('Error saving availability or necessary employees:', error);\n      toast.error('Failed to save data. Please try again.');\n    }\n  };\n\n  // Adjust the week offset based on the given direction.\n  // Positive value moves to a future week, negative to a past week.\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Sort the employees list based on the selected key and direction (ascending or descending).\n  // Uses the current sortConfig to determine sort behavior.\n  const sortedEmployees = [...employees].sort((a, b) => {\n    if (a[sortConfig.key] < b[sortConfig.key]) {\n      return sortConfig.direction === 'asc' ? -1 : 1;\n    }\n    if (a[sortConfig.key] > b[sortConfig.key]) {\n      return sortConfig.direction === 'asc' ? 1 : -1;\n    }\n    return 0;\n  });\n\n  // Update the sorting configuration when a column header is clicked.\n  // If the same key is clicked again, toggle between ascending and descending.\n  const handleSort = key => {\n    setSortConfig(prev => ({\n      key,\n      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  // Render the availability screen UI:\n  // - Show the Navbar and a placeholder to prevent layout shift.\n  // - If the user is an admin, show a dropdown to select an employee.\n  // - If an employee is selected, display:\n  //   1. Week navigation controls (previous/next).\n  //   2. A table for selecting availability per shift and day.\n  //   3. A notes textarea for weekly notes.\n  //   4. A submit button to save availability and notes.\n  // - Display toast notifications using <ToastContainer />.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"availability-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weekly Availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this), userData.user.role === 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"employee-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employeeDropdown\",\n            children: \"Select Employee:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            className: \"employee-dropdown\",\n            classNamePrefix: \"react-select\",\n            options: sortedEmployees.map(e => ({\n              value: e.id,\n              label: e.name\n            })),\n            onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n            placeholder: \"Select an employee\",\n            menuPlacement: \"bottom\",\n            value: sortedEmployees.map(e => ({\n              value: e.id,\n              label: e.name\n            })).find(o => o.value === selectedEmployeeId) || null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 25\n        }, this), selectedEmployeeId && (() => {\n          const selected = employees.find(emp => emp.id === selectedEmployeeId);\n          return /*#__PURE__*/_jsxDEV(\"img\", {\n            src: (selected === null || selected === void 0 ? void 0 : selected.photoData) || '/images/Profile.jpeg',\n            alt: `${(selected === null || selected === void 0 ? void 0 : selected.name) || 'Employee'}'s profile`,\n            className: \"employee-photo-preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 33\n          }, this);\n        })()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }, this), userData.user.role !== 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"employee-selector\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-photo-wrapper\",\n          children: (() => {\n            const currentUser = employees.find(emp => emp.id === selectedEmployeeId);\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.photoData) || '/images/Profile.jpeg',\n              alt: `${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || 'Your'} profile`,\n              className: \"employee-photo-preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 37\n            }, this);\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 21\n      }, this), selectedEmployeeId && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"navigation-button\",\n            onClick: () => handleWeekChange(-1),\n            children: \"Previous Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"week-range\",\n            children: calculateWeekRange(currentWeek)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"navigation-button\",\n            onClick: () => handleWeekChange(1),\n            children: \"Next Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"availability-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                onClick: handleSelectAll,\n                className: \"clickable\",\n                children: \"Select All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 37\n              }, this), weekDays.map(({\n                name,\n                date\n              }) => /*#__PURE__*/_jsxDEV(\"th\", {\n                onClick: () => handleDayColumnClick(name),\n                className: \"clickable\",\n                children: [name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    fontSize: '0.85em',\n                    color: '#555'\n                  },\n                  children: date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 45\n                }, this)]\n              }, name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 41\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: shifts.map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => handleShiftRowClick(shift),\n                className: \"clickable\",\n                children: shift\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 41\n              }, this), weekDays.map(({\n                name\n              }) => {\n                var _availability$shift, _availability$shift$n;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: (availability === null || availability === void 0 ? void 0 : (_availability$shift = availability[shift]) === null || _availability$shift === void 0 ? void 0 : (_availability$shift$n = _availability$shift[name]) === null || _availability$shift$n === void 0 ? void 0 : _availability$shift$n.isAvailable) || false,\n                    onChange: () => handleAvailabilityChange(shift, name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 411,\n                    columnNumber: 49\n                  }, this)\n                }, name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 45\n                }, this);\n              })]\n            }, shift, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"notes-textarea\",\n          placeholder: \"Write weekly notes here...\",\n          value: notes,\n          onChange: e => setNotes(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center',\n            color: isEditAllowed ? 'green' : 'red',\n            fontWeight: 'bold'\n          },\n          children: isEditAllowed ? 'Availability editing is currently open.' : 'Availability editing is currently locked.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 9\n  }, this);\n};\n_s(AvailabilityScreen, \"4TT+DVQ4xYm3vWARbVINry04gdA=\", false, function () {\n  return [useNavigate];\n});\n_c = AvailabilityScreen;\nexport default AvailabilityScreen;\nvar _c;\n$RefreshReg$(_c, \"AvailabilityScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Navbar","toast","ToastContainer","saveAvailability","getAvailability","saveNecessaryEmployees","getNecessaryEmployees","fetchEditStatus","getUsers","getWeekDateObjects","calculateWeekKey","calculateWeekRange","Select","jsxDEV","_jsxDEV","Fragment","_Fragment","AvailabilityScreen","_s","daysOfWeek","shifts","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","availability","setAvailability","notes","setNotes","currentWeek","setCurrentWeek","userData","setUserData","weekOffset","setWeekOffset","sortConfig","setSortConfig","key","direction","isEditAllowed","setIsEditAllowed","navigate","weekDays","setWeekDays","fetchEditStatusForWeek","companyId","company","id","weekKey","_status$isEditAllowed","status","error","console","loggedUser","JSON","parse","localStorage","getItem","user","role","fetchEmployees","usersData","filteredEmployees","Object","entries","map","filter","_user$companyIds","companyIds","some","fetchCurrentUserData","userFromDB","fetchAvailability","fetchedAvailability","initializeAvailability","alert","newWeek","existingAvailability","reduce","acc","shift","dayAcc","day","_existingAvailability","_existingAvailability2","_existingAvailability3","_existingAvailability4","isAvailable","handleAvailabilityChange","prev","handleDayColumnClick","updatedAvailability","stringify","allSelected","every","_updatedAvailability$","_updatedAvailability$2","forEach","handleShiftRowClick","_updatedAvailability$3","_updatedAvailability$4","handleSelectAll","handleSubmit","editStatus","dataToSave","necessaryEmployees","keys","length","Morning","Noon","Evening","Night","success","handleWeekChange","prevOffset","children","fileName","_jsxFileName","lineNumber","columnNumber","sortedEmployees","sort","a","b","handleSort","className","htmlFor","classNamePrefix","options","e","value","label","name","onChange","option","placeholder","menuPlacement","find","o","selected","emp","src","photoData","alt","currentUser","onClick","date","style","fontSize","color","_availability$shift","_availability$shift$n","type","checked","target","textAlign","fontWeight","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\nimport { saveAvailability, getAvailability, saveNecessaryEmployees, getNecessaryEmployees, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { getWeekDateObjects, calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\nimport Select from 'react-select'; // ודא שזה מופיע בתחילת הקובץ\n\nconst AvailabilityScreen = () => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n\n    const [employees, setEmployees] = useState([]);\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [availability, setAvailability] = useState(null);\n    const [notes, setNotes] = useState('');\n    const [currentWeek, setCurrentWeek] = useState(1);\n    const [userData, setUserData] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n    const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });\n    const [isEditAllowed, setIsEditAllowed] = useState(true);\n\n    const navigate = useNavigate();\n\n    const [weekDays, setWeekDays] = useState([]);\n\n    useEffect(() => {\n        const fetchEditStatusForWeek = async () => {\n            if (!userData) return;\n\n            const companyId = userData.company.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            try {\n                const status = await fetchEditStatus(companyId, weekKey);\n                setIsEditAllowed(status?.isEditAllowed ?? false);\n            } catch (error) {\n                console.error('Failed to fetch edit status:', error);\n                setIsEditAllowed(false);\n            }\n        };\n\n        fetchEditStatusForWeek();\n    }, [userData, currentWeek]);\n\n\n    // On component mount, retrieve the logged-in user from localStorage.\n    // If no user is found, redirect to the login page.\n    // If the user is an admin, fetch all employees associated with the same company.\n    // Otherwise, set the selected employee ID to the current user's ID.\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n\n            if (loggedUser.user.role === 'admin') {\n                const fetchEmployees = async () => {\n                    try {\n                        const usersData = await getUsers();\n                        const companyId = loggedUser.company.id;\n\n                        if (companyId) {\n                            const filteredEmployees = Object.entries(usersData)\n                                .map(([id, user]) => ({ id, ...user }))\n                                .filter((user) =>\n                                    user.companyIds?.some((company) => company.companyId === companyId)\n                                );\n\n                            setEmployees(filteredEmployees);\n                        }\n                    } catch (error) {\n                        console.error('Error fetching employees:', error);\n                    }\n                };\n\n                fetchEmployees();\n            } else {\n                setUserData(loggedUser);\n\n                if (loggedUser.user.role === 'admin') {\n                    // ... קוד לאדמין\n                } else {\n                    setSelectedEmployeeId(loggedUser.user.id);\n\n                    // ✅ הוספה כאן:\n                    const fetchCurrentUserData = async () => {\n                        try {\n                            const usersData = await getUsers();\n                            const userFromDB = usersData[loggedUser.user.id];\n                            if (userFromDB) {\n                                setEmployees([{ id: loggedUser.user.id, ...userFromDB }]);\n                            }\n                        } catch (error) {\n                            console.error(\"Error fetching current user data:\", error);\n                        }\n                    };\n\n                    fetchCurrentUserData();\n                }\n            }\n\n        }\n    }, [navigate]);\n\n    // Whenever the current week, selected employee, or user data changes,\n    // fetch the availability data for the selected employee for the relevant week.\n    // Initialize the availability state and notes based on the fetched data.\n    useEffect(() => {\n        const fetchAvailability = async () => {\n            if (!selectedEmployeeId || !userData) return;\n\n            const companyId = userData.company.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            try {\n                const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n                setAvailability(initializeAvailability(fetchedAvailability || {}));\n                setNotes(fetchedAvailability?.notes || '');\n            } catch (error) {\n                console.error('Error fetching availability:', error);\n                alert('Failed to fetch availability. Please try again.');\n            }\n        };\n\n        fetchAvailability();\n    }, [currentWeek, selectedEmployeeId, userData]);\n\n    // Update the current week number whenever the week offset changes.\n    // Week numbers are 1-based, so we add 1 to the offset.\n    useEffect(() => {\n        const newWeek = weekOffset + 1;\n        setCurrentWeek(newWeek);\n        setWeekDays(getWeekDateObjects(newWeek));\n    }, [weekOffset]);\n\n\n    // Initialize the availability structure for all shifts and days of the week.\n    // If existing availability data is provided, use it;\n    // otherwise, default to isAvailable: false and status: 'default'.\n    const initializeAvailability = (existingAvailability) => {\n        return shifts.reduce((acc, shift) => {\n            acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n                dayAcc[day] = {\n                    isAvailable: existingAvailability[shift]?.[day]?.isAvailable || false,\n                    status: existingAvailability[shift]?.[day]?.status || 'default'\n                };\n                return dayAcc;\n            }, {});\n            return acc;\n        }, {});\n    };\n\n    // Toggle the availability status for a specific shift and day.\n    const handleAvailabilityChange = (shift, day) => {\n        setAvailability((prev) => ({\n            ...prev,\n            [shift]: {\n                ...prev[shift],\n                [day]: {\n                    ...prev[shift][day],\n                    isAvailable: !prev[shift][day].isAvailable,\n                },\n            },\n        }));\n    };\n\n    // Toggle all shifts for a specific day column.\n    // If all are selected, unselect them; otherwise, select all.\n    const handleDayColumnClick = (day) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = shifts.every((shift) => updatedAvailability[shift]?.[day]?.isAvailable);\n\n            shifts.forEach((shift) => {\n                updatedAvailability[shift][day].isAvailable = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    // Toggle all days for a specific shift row.\n    // If all are selected, unselect them; otherwise, select all.\n    const handleShiftRowClick = (shift) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = daysOfWeek.every((day) => updatedAvailability[shift]?.[day]?.isAvailable);\n\n            daysOfWeek.forEach((day) => {\n                updatedAvailability[shift][day].isAvailable = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    // Toggle all checkboxes in the entire table.\n    // If everything is selected, unselect all; otherwise, select all.\n    const handleSelectAll = () => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = shifts.every((shift) =>\n                daysOfWeek.every((day) => updatedAvailability[shift][day].isAvailable)\n            );\n\n            shifts.forEach((shift) => {\n                daysOfWeek.forEach((day) => {\n                    updatedAvailability[shift][day].isAvailable = !allSelected;\n                });\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    // Handle submission of availability data for the selected employee.\n    // 1. Show error if no employee is selected.\n    // 2. Check if editing is allowed for the current week.\n    // 3. Save the availability data along with any notes.\n    // 4. If no necessaryEmployees data exists for the week, initialize it with default (0) values for each shift per day.\n    // 5. Save necessaryEmployees data only if it was just initialized.\n    const handleSubmit = async () => {\n        if (!selectedEmployeeId) {\n            toast.error('Please select an employee to save availability.');\n            return;\n        }\n\n        const companyId = userData.company.id;\n        const weekKey = calculateWeekKey(currentWeek);\n\n        try {\n            // בדיקת סטטוס עריכה עבור השבוע\n            const editStatus = await fetchEditStatus(companyId, weekKey);\n            if (!editStatus?.isEditAllowed) {\n                toast.error('Editing availability is currently locked for this week.');\n                return;\n            }\n\n            // שמירת זמינות של המשתמש\n            const dataToSave = {\n                ...availability,\n                notes,\n            };\n            await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n\n            // בדיקה אם יש כבר נתונים של necessaryEmployees ב-DB\n            let necessaryEmployees = await getNecessaryEmployees(companyId, weekKey);\n\n            // אם אין נתונים ב-DB, לאתחל אותם\n            if (!necessaryEmployees || Object.keys(necessaryEmployees).length === 0) {\n                necessaryEmployees = daysOfWeek.reduce((acc, day) => {\n                    acc[day] = {\n                        Morning: 0,\n                        Noon: 0,\n                        Evening: 0,\n                        Night: 0,\n                    };\n                    return acc;\n                }, {});\n\n                // שמירה ל-DB רק במקרה של אתחול\n                await saveNecessaryEmployees(companyId, weekKey, necessaryEmployees);\n            }\n\n            toast.success('Availability and notes saved successfully!');\n        } catch (error) {\n            console.error('Error saving availability or necessary employees:', error);\n            toast.error('Failed to save data. Please try again.');\n        }\n    };\n\n    // Adjust the week offset based on the given direction.\n    // Positive value moves to a future week, negative to a past week.\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    if (!userData) {\n        return <p>Loading...</p>;\n    }\n\n    // Sort the employees list based on the selected key and direction (ascending or descending).\n    // Uses the current sortConfig to determine sort behavior.\n    const sortedEmployees = [...employees].sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n            return sortConfig.direction === 'asc' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n            return sortConfig.direction === 'asc' ? 1 : -1;\n        }\n        return 0;\n    });\n\n    // Update the sorting configuration when a column header is clicked.\n    // If the same key is clicked again, toggle between ascending and descending.\n    const handleSort = (key) => {\n        setSortConfig((prev) => ({\n            key,\n            direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',\n        }));\n    };\n\n    // Render the availability screen UI:\n    // - Show the Navbar and a placeholder to prevent layout shift.\n    // - If the user is an admin, show a dropdown to select an employee.\n    // - If an employee is selected, display:\n    //   1. Week navigation controls (previous/next).\n    //   2. A table for selecting availability per shift and day.\n    //   3. A notes textarea for weekly notes.\n    //   4. A submit button to save availability and notes.\n    // - Display toast notifications using <ToastContainer />.\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div>\n\n            <div className=\"availability-container\">\n                <h1>Weekly Availability</h1>\n                {userData.user.role === 'admin' && (\n                    <div className=\"employee-selector\">\n                        {/* Select dropdown */}\n                        <div className=\"dropdown-container\">\n                            <label htmlFor=\"employeeDropdown\">Select Employee:</label>\n                            <Select\n                                className=\"employee-dropdown\"\n                                classNamePrefix=\"react-select\"\n                                options={sortedEmployees.map((e) => ({ value: e.id, label: e.name }))}\n                                onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                placeholder=\"Select an employee\"\n                                menuPlacement=\"bottom\"\n                                value={\n                                    sortedEmployees\n                                        .map((e) => ({ value: e.id, label: e.name }))\n                                        .find((o) => o.value === selectedEmployeeId) || null\n                                }\n                            />\n                        </div>\n\n                        {/* Employee photo */}\n                        {selectedEmployeeId && (() => {\n                            const selected = employees.find(emp => emp.id === selectedEmployeeId);\n                            return (\n                                <img\n                                    src={selected?.photoData || '/images/Profile.jpeg'}\n                                    alt={`${selected?.name || 'Employee'}'s profile`}\n                                    className=\"employee-photo-preview\"\n                                />\n                            );\n                        })()}\n\n                    </div>\n                )}\n\n                {userData.user.role !== 'admin' && (\n                    <div className=\"employee-selector\">\n                        <div className=\"employee-photo-wrapper\">\n                            {(() => {\n                                const currentUser = employees.find(emp => emp.id === selectedEmployeeId);\n                                return (\n                                    <img\n                                        src={currentUser?.photoData || '/images/Profile.jpeg'}\n                                        alt={`${currentUser?.name || 'Your'} profile`}\n                                        className=\"employee-photo-preview\"\n                                    />\n                                );\n                            })()}\n                        </div>\n                    </div>\n                )}\n\n                {selectedEmployeeId && (\n                    <>\n                        <div className=\"week-navigation\">\n                            <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                Previous Week\n                            </button>\n                            <h2 className=\"week-range\">{calculateWeekRange(currentWeek)}</h2>\n                            <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                Next Week\n                            </button>\n                        </div>\n                        <table className=\"availability-table\">\n                            <thead>\n                                <tr>\n                                    <th onClick={handleSelectAll} className=\"clickable\">Select All</th>\n                                    {weekDays.map(({ name, date }) => (\n                                        <th key={name} onClick={() => handleDayColumnClick(name)} className=\"clickable\">\n                                            {name}\n                                            <br />\n                                            <span style={{ fontSize: '0.85em', color: '#555' }}>{date}</span>\n                                        </th>\n                                    ))}\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {shifts.map((shift) => (\n                                    <tr key={shift}>\n                                        <td onClick={() => handleShiftRowClick(shift)} className=\"clickable\">\n                                            {shift}\n                                        </td>\n                                        {weekDays.map(({ name }) => (\n                                            <td key={name}>\n                                                <input\n                                                    type=\"checkbox\"\n                                                    checked={availability?.[shift]?.[name]?.isAvailable || false}\n                                                    onChange={() => handleAvailabilityChange(shift, name)}\n                                                />\n                                            </td>\n                                        ))}\n                                    </tr>\n                                ))}\n                            </tbody>\n\n                        </table>\n                        <textarea\n                            className=\"notes-textarea\"\n                            placeholder=\"Write weekly notes here...\"\n                            value={notes}\n                            onChange={(e) => setNotes(e.target.value)}\n                        ></textarea>\n                        <p style={{ textAlign: 'center', color: isEditAllowed ? 'green' : 'red', fontWeight: 'bold' }}>\n                            {isEditAllowed ? 'Availability editing is currently open.' : 'Availability editing is currently locked.'}\n                        </p>\n\n                        <button className=\"submit-button\" onClick={handleSubmit}>\n                            Submit\n                        </button>\n                    </>\n                )}\n            </div>\n\n            <ToastContainer />\n        </div>\n    );\n};\n\nexport default AvailabilityScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}