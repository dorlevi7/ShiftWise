{"ast":null,"code":"// utils/utils.js\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nexport const calculateWeekKey = weekOffset => {\n  const today = new Date();\n  const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n  const formatDate = date => `${date.getFullYear()}_${String(date.getMonth() + 1).padStart(2, '0')}_${String(date.getDate()).padStart(2, '0')}`;\n  return `week_${formatDate(firstDayOfWeek)}`;\n};\nexport const calculateWeekRange = weekOffset => {\n  const today = new Date();\n  const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n  const lastDayOfWeek = new Date(firstDayOfWeek);\n  lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);\n  const formatDate = date => {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  };\n  return `${formatDate(firstDayOfWeek)} - ${formatDate(lastDayOfWeek)}`;\n};\nexport const selectMorningOrNoonShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n  const previousDay = calculatePreviousDay(day);\n  if (day === 'Sunday') {\n    var _updatedAvailability$, _updatedAvailability$2;\n    // אם היום הוא יום ראשון, נטפל בשבת של השבוע הקודם\n    const previousWeekKey = calculateWeekKey(weekOffset - 1);\n    if ((_updatedAvailability$ = updatedAvailability[userId]) !== null && _updatedAvailability$ !== void 0 && (_updatedAvailability$2 = _updatedAvailability$['Night']) !== null && _updatedAvailability$2 !== void 0 && _updatedAvailability$2['Saturday']) {\n      await updateAvailabilityStatus(currentCompany, previousWeekKey, userId, 'Night', 'Saturday', 'disabled');\n    }\n  } else {\n    var _updatedAvailability$3, _updatedAvailability$4;\n    if ((_updatedAvailability$3 = updatedAvailability[userId]) !== null && _updatedAvailability$3 !== void 0 && (_updatedAvailability$4 = _updatedAvailability$3['Night']) !== null && _updatedAvailability$4 !== void 0 && _updatedAvailability$4[previousDay]) {\n      updatedAvailability[userId]['Night'][previousDay].status = 'disabled';\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'disabled');\n    }\n  }\n};\nexport const selectNightShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n  const nextDay = calculateNextDay(day);\n  if (day === 'Saturday') {\n    var _updatedAvailability$5, _updatedAvailability$6, _updatedAvailability$7, _updatedAvailability$8;\n    const nextWeekKey = calculateWeekKey(weekOffset + 1);\n    if ((_updatedAvailability$5 = updatedAvailability[userId]) !== null && _updatedAvailability$5 !== void 0 && (_updatedAvailability$6 = _updatedAvailability$5['Morning']) !== null && _updatedAvailability$6 !== void 0 && _updatedAvailability$6['Sunday']) {\n      await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Morning', 'Sunday', 'disabled');\n    }\n    if ((_updatedAvailability$7 = updatedAvailability[userId]) !== null && _updatedAvailability$7 !== void 0 && (_updatedAvailability$8 = _updatedAvailability$7['Noon']) !== null && _updatedAvailability$8 !== void 0 && _updatedAvailability$8['Sunday']) {\n      await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Noon', 'Sunday', 'disabled');\n    }\n  } else {\n    var _updatedAvailability$9, _updatedAvailability$10, _updatedAvailability$11, _updatedAvailability$12;\n    if ((_updatedAvailability$9 = updatedAvailability[userId]) !== null && _updatedAvailability$9 !== void 0 && (_updatedAvailability$10 = _updatedAvailability$9['Morning']) !== null && _updatedAvailability$10 !== void 0 && _updatedAvailability$10[nextDay]) {\n      updatedAvailability[userId]['Morning'][nextDay].status = 'disabled';\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'disabled');\n    }\n    if ((_updatedAvailability$11 = updatedAvailability[userId]) !== null && _updatedAvailability$11 !== void 0 && (_updatedAvailability$12 = _updatedAvailability$11['Noon']) !== null && _updatedAvailability$12 !== void 0 && _updatedAvailability$12[nextDay]) {\n      updatedAvailability[userId]['Noon'][nextDay].status = 'disabled';\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'disabled');\n    }\n  }\n};\nexport const deselectMorningOrNoonShift = async (userId, day, updatedAvailability, weekKey, currentCompany) => {\n  var _updatedAvailability$16, _updatedAvailability$17, _updatedAvailability$18;\n  const previousDay = calculatePreviousDay(day);\n  const hasOtherSelectedShifts = ['Morning', 'Noon', 'Evening'].some(s => {\n    var _updatedAvailability$13, _updatedAvailability$14, _updatedAvailability$15;\n    return ((_updatedAvailability$13 = updatedAvailability[userId]) === null || _updatedAvailability$13 === void 0 ? void 0 : (_updatedAvailability$14 = _updatedAvailability$13[s]) === null || _updatedAvailability$14 === void 0 ? void 0 : (_updatedAvailability$15 = _updatedAvailability$14[previousDay]) === null || _updatedAvailability$15 === void 0 ? void 0 : _updatedAvailability$15.status) === 'selected';\n  });\n  if (((_updatedAvailability$16 = updatedAvailability[userId]) === null || _updatedAvailability$16 === void 0 ? void 0 : (_updatedAvailability$17 = _updatedAvailability$16['Night']) === null || _updatedAvailability$17 === void 0 ? void 0 : (_updatedAvailability$18 = _updatedAvailability$17[previousDay]) === null || _updatedAvailability$18 === void 0 ? void 0 : _updatedAvailability$18.status) === 'disabled' && !hasOtherSelectedShifts) {\n    updatedAvailability[userId]['Night'][previousDay].status = 'default';\n    await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'default');\n  }\n};\nexport const deselectNightShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n  const nextDay = calculateNextDay(day);\n  if (day === 'Saturday') {\n    const nextWeekKey = calculateWeekKey(weekOffset + 1);\n    const hasSelectedShiftsOnSunday = ['Morning', 'Noon', 'Evening', 'Night'].some(s => {\n      var _updatedAvailability$19, _updatedAvailability$20, _updatedAvailability$21;\n      return ((_updatedAvailability$19 = updatedAvailability[userId]) === null || _updatedAvailability$19 === void 0 ? void 0 : (_updatedAvailability$20 = _updatedAvailability$19[s]) === null || _updatedAvailability$20 === void 0 ? void 0 : (_updatedAvailability$21 = _updatedAvailability$20['Sunday']) === null || _updatedAvailability$21 === void 0 ? void 0 : _updatedAvailability$21.status) === 'selected';\n    });\n    if (!hasSelectedShiftsOnSunday) {\n      var _updatedAvailability$22, _updatedAvailability$23, _updatedAvailability$24, _updatedAvailability$25;\n      if ((_updatedAvailability$22 = updatedAvailability[userId]) !== null && _updatedAvailability$22 !== void 0 && (_updatedAvailability$23 = _updatedAvailability$22['Morning']) !== null && _updatedAvailability$23 !== void 0 && _updatedAvailability$23['Sunday']) {\n        await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Morning', 'Sunday', 'default');\n      }\n      if ((_updatedAvailability$24 = updatedAvailability[userId]) !== null && _updatedAvailability$24 !== void 0 && (_updatedAvailability$25 = _updatedAvailability$24['Noon']) !== null && _updatedAvailability$25 !== void 0 && _updatedAvailability$25['Sunday']) {\n        await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Noon', 'Sunday', 'default');\n      }\n    }\n  } else {\n    const hasSelectedShiftsOnNextDay = ['Morning', 'Noon', 'Evening', 'Night'].some(s => {\n      var _updatedAvailability$26, _updatedAvailability$27, _updatedAvailability$28;\n      return ((_updatedAvailability$26 = updatedAvailability[userId]) === null || _updatedAvailability$26 === void 0 ? void 0 : (_updatedAvailability$27 = _updatedAvailability$26[s]) === null || _updatedAvailability$27 === void 0 ? void 0 : (_updatedAvailability$28 = _updatedAvailability$27[nextDay]) === null || _updatedAvailability$28 === void 0 ? void 0 : _updatedAvailability$28.status) === 'selected';\n    });\n    if (!hasSelectedShiftsOnNextDay) {\n      var _updatedAvailability$29, _updatedAvailability$30, _updatedAvailability$31, _updatedAvailability$32, _updatedAvailability$33, _updatedAvailability$34;\n      if (((_updatedAvailability$29 = updatedAvailability[userId]) === null || _updatedAvailability$29 === void 0 ? void 0 : (_updatedAvailability$30 = _updatedAvailability$29['Morning']) === null || _updatedAvailability$30 === void 0 ? void 0 : (_updatedAvailability$31 = _updatedAvailability$30[nextDay]) === null || _updatedAvailability$31 === void 0 ? void 0 : _updatedAvailability$31.status) === 'disabled') {\n        updatedAvailability[userId]['Morning'][nextDay].status = 'default';\n        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'default');\n      }\n      if (((_updatedAvailability$32 = updatedAvailability[userId]) === null || _updatedAvailability$32 === void 0 ? void 0 : (_updatedAvailability$33 = _updatedAvailability$32['Noon']) === null || _updatedAvailability$33 === void 0 ? void 0 : (_updatedAvailability$34 = _updatedAvailability$33[nextDay]) === null || _updatedAvailability$34 === void 0 ? void 0 : _updatedAvailability$34.status) === 'disabled') {\n        updatedAvailability[userId]['Noon'][nextDay].status = 'default';\n        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'default');\n      }\n    }\n  }\n};\n\n// Helper functions to calculate previous and next days\nexport const calculatePreviousDay = currentDay => {\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const currentIndex = daysOfWeek.indexOf(currentDay);\n  return currentIndex > 0 ? daysOfWeek[currentIndex - 1] : daysOfWeek[6];\n};\nexport const calculateNextDay = currentDay => {\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const currentIndex = daysOfWeek.indexOf(currentDay);\n  return currentIndex < 6 ? daysOfWeek[currentIndex + 1] : daysOfWeek[0];\n};\nexport const handleOtherShiftsOfDayWhenDeselectAShift = async (userId, day, shift, updatedAvailability, weekKey, currentCompany) => {\n  for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n    if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n      if (otherShift === 'Morning' || otherShift === 'Noon') {\n        var _updatedAvailability$35, _updatedAvailability$36, _updatedAvailability$37;\n        // בדיקה אם משמרת הלילה של היום הקודם לא נבחרה\n        const previousDay = calculatePreviousDay(day);\n        if (((_updatedAvailability$35 = updatedAvailability[userId]) === null || _updatedAvailability$35 === void 0 ? void 0 : (_updatedAvailability$36 = _updatedAvailability$35['Night']) === null || _updatedAvailability$36 === void 0 ? void 0 : (_updatedAvailability$37 = _updatedAvailability$36[previousDay]) === null || _updatedAvailability$37 === void 0 ? void 0 : _updatedAvailability$37.status) !== 'selected') {\n          updatedAvailability[userId][otherShift][day].status = 'default';\n          await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n        }\n      } else if (otherShift === 'Night') {\n        var _updatedAvailability$38, _updatedAvailability$39, _updatedAvailability$40, _updatedAvailability$41, _updatedAvailability$42, _updatedAvailability$43;\n        // בדיקה אם אין משמרות בוקר או צהריים נבחרות ביום הבא\n        const nextDay = calculateNextDay(day);\n        if (!(((_updatedAvailability$38 = updatedAvailability[userId]) === null || _updatedAvailability$38 === void 0 ? void 0 : (_updatedAvailability$39 = _updatedAvailability$38['Morning']) === null || _updatedAvailability$39 === void 0 ? void 0 : (_updatedAvailability$40 = _updatedAvailability$39[nextDay]) === null || _updatedAvailability$40 === void 0 ? void 0 : _updatedAvailability$40.status) === 'selected' || ((_updatedAvailability$41 = updatedAvailability[userId]) === null || _updatedAvailability$41 === void 0 ? void 0 : (_updatedAvailability$42 = _updatedAvailability$41['Noon']) === null || _updatedAvailability$42 === void 0 ? void 0 : (_updatedAvailability$43 = _updatedAvailability$42[nextDay]) === null || _updatedAvailability$43 === void 0 ? void 0 : _updatedAvailability$43.status) === 'selected')) {\n          updatedAvailability[userId][otherShift][day].status = 'default';\n          await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n        }\n      } else {\n        // עדכון ברירת מחדל למשמרות אחרות\n        updatedAvailability[userId][otherShift][day].status = 'default';\n        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n      }\n    }\n  }\n};\nexport const getWeekDates = weekOffset => {\n  const today = new Date();\n  const startOfWeek = new Date(today);\n  startOfWeek.setDate(today.getDate() - today.getDay() + weekOffset * 7);\n  return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => {\n    const currentDate = new Date(startOfWeek);\n    currentDate.setDate(startOfWeek.getDate() + index);\n    const formattedDate = `${String(currentDate.getDate()).padStart(2, '0')}/${String(currentDate.getMonth() + 1).padStart(2, '0')}/${currentDate.getFullYear()}`;\n    return `${day} ${formattedDate}`;\n  });\n};\nexport const getWeekDateObjects = (weekOffset = 0) => {\n  const today = new Date();\n  const sunday = new Date();\n  sunday.setDate(today.getDate() - today.getDay() + weekOffset * 7); // תחילת השבוע לפי offset\n\n  return Array.from({\n    length: 7\n  }, (_, i) => {\n    const date = new Date(sunday);\n    date.setDate(sunday.getDate() + i);\n    const name = date.toLocaleDateString('en-US', {\n      weekday: 'long'\n    }); // Sunday, Monday...\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    const formatted = `${day}/${month}/${year}`;\n    return {\n      name,\n      date: formatted\n    };\n  });\n};","map":{"version":3,"names":["updateAvailabilityStatus","calculateWeekKey","weekOffset","today","Date","firstDayOfWeek","setDate","getDate","getDay","formatDate","date","getFullYear","String","getMonth","padStart","calculateWeekRange","lastDayOfWeek","day","month","year","selectMorningOrNoonShift","userId","updatedAvailability","weekKey","currentCompany","previousDay","calculatePreviousDay","_updatedAvailability$","_updatedAvailability$2","previousWeekKey","_updatedAvailability$3","_updatedAvailability$4","status","selectNightShift","nextDay","calculateNextDay","_updatedAvailability$5","_updatedAvailability$6","_updatedAvailability$7","_updatedAvailability$8","nextWeekKey","_updatedAvailability$9","_updatedAvailability$10","_updatedAvailability$11","_updatedAvailability$12","deselectMorningOrNoonShift","_updatedAvailability$16","_updatedAvailability$17","_updatedAvailability$18","hasOtherSelectedShifts","some","s","_updatedAvailability$13","_updatedAvailability$14","_updatedAvailability$15","deselectNightShift","hasSelectedShiftsOnSunday","_updatedAvailability$19","_updatedAvailability$20","_updatedAvailability$21","_updatedAvailability$22","_updatedAvailability$23","_updatedAvailability$24","_updatedAvailability$25","hasSelectedShiftsOnNextDay","_updatedAvailability$26","_updatedAvailability$27","_updatedAvailability$28","_updatedAvailability$29","_updatedAvailability$30","_updatedAvailability$31","_updatedAvailability$32","_updatedAvailability$33","_updatedAvailability$34","currentDay","daysOfWeek","currentIndex","indexOf","handleOtherShiftsOfDayWhenDeselectAShift","shift","otherShift","_updatedAvailability$35","_updatedAvailability$36","_updatedAvailability$37","_updatedAvailability$38","_updatedAvailability$39","_updatedAvailability$40","_updatedAvailability$41","_updatedAvailability$42","_updatedAvailability$43","getWeekDates","startOfWeek","map","index","currentDate","formattedDate","getWeekDateObjects","sunday","Array","from","length","_","i","name","toLocaleDateString","weekday","formatted"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/utils/utils.js"],"sourcesContent":["// utils/utils.js\nimport { updateAvailabilityStatus } from '../services/availabilityService';\n\nexport const calculateWeekKey = (weekOffset) => {\n    const today = new Date();\n    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n    const formatDate = (date) =>\n        `${date.getFullYear()}_${String(date.getMonth() + 1).padStart(2, '0')}_${String(date.getDate()).padStart(2, '0')}`;\n    return `week_${formatDate(firstDayOfWeek)}`;\n};\n\nexport const calculateWeekRange = (weekOffset) => {\n    const today = new Date();\n    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n    const lastDayOfWeek = new Date(firstDayOfWeek);\n    lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);\n\n    const formatDate = (date) => {\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        return `${day}/${month}/${year}`;\n    };\n\n    return `${formatDate(firstDayOfWeek)} - ${formatDate(lastDayOfWeek)}`;\n};\n\nexport const selectMorningOrNoonShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n    const previousDay = calculatePreviousDay(day);\n\n    if (day === 'Sunday') {\n        // אם היום הוא יום ראשון, נטפל בשבת של השבוע הקודם\n        const previousWeekKey = calculateWeekKey(weekOffset - 1);\n        if (updatedAvailability[userId]?.['Night']?.['Saturday']) {\n            await updateAvailabilityStatus(currentCompany, previousWeekKey, userId, 'Night', 'Saturday', 'disabled');\n        }\n    } else {\n        if (updatedAvailability[userId]?.['Night']?.[previousDay]) {\n            updatedAvailability[userId]['Night'][previousDay].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'disabled');\n        }\n    }\n};\n\n\nexport const selectNightShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n    const nextDay = calculateNextDay(day);\n\n    if (day === 'Saturday') {\n        const nextWeekKey = calculateWeekKey(weekOffset + 1);\n        if (updatedAvailability[userId]?.['Morning']?.['Sunday']) {\n            await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Morning', 'Sunday', 'disabled');\n        }\n        if (updatedAvailability[userId]?.['Noon']?.['Sunday']) {\n            await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Noon', 'Sunday', 'disabled');\n        }\n    } else {\n        if (updatedAvailability[userId]?.['Morning']?.[nextDay]) {\n            updatedAvailability[userId]['Morning'][nextDay].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'disabled');\n        }\n        if (updatedAvailability[userId]?.['Noon']?.[nextDay]) {\n            updatedAvailability[userId]['Noon'][nextDay].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'disabled');\n        }\n    }\n};\n\nexport const deselectMorningOrNoonShift = async (userId, day, updatedAvailability, weekKey, currentCompany) => {\n    const previousDay = calculatePreviousDay(day);\n\n    const hasOtherSelectedShifts = ['Morning', 'Noon', 'Evening'].some(\n        (s) => updatedAvailability[userId]?.[s]?.[previousDay]?.status === 'selected'\n    );\n\n    if (\n        updatedAvailability[userId]?.['Night']?.[previousDay]?.status === 'disabled' &&\n        !hasOtherSelectedShifts\n    ) {\n        updatedAvailability[userId]['Night'][previousDay].status = 'default';\n        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'default');\n    }\n};\n\nexport const deselectNightShift = async (userId, day, updatedAvailability, weekKey, weekOffset, currentCompany) => {\n    const nextDay = calculateNextDay(day);\n\n    if (day === 'Saturday') {\n        const nextWeekKey = calculateWeekKey(weekOffset + 1);\n\n        const hasSelectedShiftsOnSunday = ['Morning', 'Noon', 'Evening', 'Night'].some(\n            (s) => updatedAvailability[userId]?.[s]?.['Sunday']?.status === 'selected'\n        );\n\n        if (!hasSelectedShiftsOnSunday) {\n            if (updatedAvailability[userId]?.['Morning']?.['Sunday']) {\n                await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Morning', 'Sunday', 'default');\n            }\n            if (updatedAvailability[userId]?.['Noon']?.['Sunday']) {\n                await updateAvailabilityStatus(currentCompany, nextWeekKey, userId, 'Noon', 'Sunday', 'default');\n            }\n        }\n    } else {\n        const hasSelectedShiftsOnNextDay = ['Morning', 'Noon', 'Evening', 'Night'].some(\n            (s) => updatedAvailability[userId]?.[s]?.[nextDay]?.status === 'selected'\n        );\n\n        if (!hasSelectedShiftsOnNextDay) {\n            if (updatedAvailability[userId]?.['Morning']?.[nextDay]?.status === 'disabled') {\n                updatedAvailability[userId]['Morning'][nextDay].status = 'default';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'default');\n            }\n            if (updatedAvailability[userId]?.['Noon']?.[nextDay]?.status === 'disabled') {\n                updatedAvailability[userId]['Noon'][nextDay].status = 'default';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'default');\n            }\n        }\n    }\n};\n\n// Helper functions to calculate previous and next days\nexport const calculatePreviousDay = (currentDay) => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentIndex = daysOfWeek.indexOf(currentDay);\n    return currentIndex > 0 ? daysOfWeek[currentIndex - 1] : daysOfWeek[6];\n};\n\nexport const calculateNextDay = (currentDay) => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentIndex = daysOfWeek.indexOf(currentDay);\n    return currentIndex < 6 ? daysOfWeek[currentIndex + 1] : daysOfWeek[0];\n};\n\nexport const handleOtherShiftsOfDayWhenDeselectAShift = async (userId, day, shift, updatedAvailability, weekKey, currentCompany) => {\n    for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n        if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n            if (otherShift === 'Morning' || otherShift === 'Noon') {\n                // בדיקה אם משמרת הלילה של היום הקודם לא נבחרה\n                const previousDay = calculatePreviousDay(day);\n                if (\n                    updatedAvailability[userId]?.['Night']?.[previousDay]?.status !== 'selected'\n                ) {\n                    updatedAvailability[userId][otherShift][day].status = 'default';\n                    await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                }\n            } else if (otherShift === 'Night') {\n                // בדיקה אם אין משמרות בוקר או צהריים נבחרות ביום הבא\n                const nextDay = calculateNextDay(day);\n                if (\n                    !(\n                        updatedAvailability[userId]?.['Morning']?.[nextDay]?.status === 'selected' ||\n                        updatedAvailability[userId]?.['Noon']?.[nextDay]?.status === 'selected'\n                    )\n                ) {\n                    updatedAvailability[userId][otherShift][day].status = 'default';\n                    await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                }\n            } else {\n                // עדכון ברירת מחדל למשמרות אחרות\n                updatedAvailability[userId][otherShift][day].status = 'default';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n            }\n        }\n    }\n};\n\nexport const getWeekDates = (weekOffset) => {\n    const today = new Date();\n    const startOfWeek = new Date(today);\n    startOfWeek.setDate(today.getDate() - today.getDay() + (weekOffset * 7));\n\n    return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => {\n        const currentDate = new Date(startOfWeek);\n        currentDate.setDate(startOfWeek.getDate() + index);\n        const formattedDate = `${String(currentDate.getDate()).padStart(2, '0')}/${String(currentDate.getMonth() + 1).padStart(2, '0')}/${currentDate.getFullYear()}`;\n        return `${day} ${formattedDate}`;\n    });\n};\n\n\nexport const getWeekDateObjects = (weekOffset = 0) => {\n    const today = new Date();\n    const sunday = new Date();\n    sunday.setDate(today.getDate() - today.getDay() + weekOffset * 7); // תחילת השבוע לפי offset\n\n    return Array.from({ length: 7 }, (_, i) => {\n        const date = new Date(sunday);\n        date.setDate(sunday.getDate() + i);\n\n        const name = date.toLocaleDateString('en-US', { weekday: 'long' }); // Sunday, Monday...\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        const formatted = `${day}/${month}/${year}`;\n\n        return { name, date: formatted };\n    });\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}