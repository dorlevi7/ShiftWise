{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/EmployeesScreen.js\",\n  _s = $RefreshSig$();\n// React core and hooks for state, effect, and memoization\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Modal from 'react-modal';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { ThreeDots } from 'react-loader-spinner';\nimport Navbar from '../components/Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport EditProfileModal from './Modals/EditProfileModal';\nimport EmployeeCard from '../components/EmployeeCard';\nimport SendNotificationModal from './Modals/SendNotificationModal';\nimport AddEmployeeModal from './Modals/AddEmployeeModal';\nimport ConfirmDeleteModal from './Modals/ConfirmDeleteModal';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/EmployeesScreen.css';\nimport '../styles/Navbar.css';\nimport { updateUser } from '../services/userService';\nimport { sendNotification } from '../services/notificationService';\nimport { fileToBase64 } from '../utils/fileUtils';\nimport { filterEmployees } from '../utils/employeeUtils';\nimport { updateUserInLocalStorage } from '../utils/userUtils';\nimport { fetchEmployees, handleLoadEmployeesFromJSON, handleDeleteConfirmed, handleAddEmployee, handleDeleteAllEmployees } from '../utils/employeeHandlers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nfunction EmployeesScreen() {\n  _s();\n  const [employees, setEmployees] = useState([]);\n  const [newEmployee, setNewEmployee] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    role: 'employee',\n    password: '',\n    photoFile: null\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [loggedUser, setLoggedUser] = useState(null);\n  const [isAddEmployeeModalOpen, setIsAddEmployeeModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isConfirmDeleteModalOpen, setIsConfirmDeleteModalOpen] = useState(false);\n  const [editEmployee, setEditEmployee] = useState(null);\n  const [employeeToDelete, setEmployeeToDelete] = useState(null);\n  const [openCards, setOpenCards] = useState({});\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterRole, setFilterRole] = useState('all');\n  const [isNotificationModalOpen, setIsNotificationModalOpen] = useState(false);\n  const [selectedNotificationRecipients, setSelectedNotificationRecipients] = useState([]);\n  const [notificationMessage, setNotificationMessage] = useState('');\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    console.log(\"🔐 Logged user from localStorage:\", loggedUser);\n    setLoggedUser(loggedUser);\n  }, []);\n  useEffect(() => {\n    if (loggedUser) {\n      var _loggedUser$company;\n      const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n      if (companyId) {\n        fetchEmployees(companyId, setEmployees, setError, setIsLoading);\n      }\n    }\n  }, [loggedUser]);\n  const openConfirmDeleteModal = employee => {\n    setEmployeeToDelete(employee);\n    setIsConfirmDeleteModalOpen(true);\n  };\n  const closeConfirmDeleteModal = () => {\n    setIsConfirmDeleteModalOpen(false);\n    setEmployeeToDelete(null);\n  };\n  const handleDeleteConfirmedWrapper = useCallback(() => {\n    handleDeleteConfirmed(employeeToDelete, loggedUser, employees, setEmployees, closeConfirmDeleteModal);\n  }, [employeeToDelete, loggedUser, employees, setEmployees]);\n  const handleChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewEmployee(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  }, []);\n  const handleAddEmployeeWrapper = async e => {\n    e.preventDefault();\n    setIsProcessing(true);\n    await handleAddEmployee(e, newEmployee, loggedUser, employees, setEmployees, setNewEmployee, setIsAddEmployeeModalOpen);\n    setIsProcessing(false);\n  };\n  const toggleCard = useCallback(id => {\n    setOpenCards(prev => ({\n      ...prev,\n      [id]: !prev[id]\n    }));\n  }, []);\n  const handleEditClick = useCallback(employee => {\n    setEditEmployee(employee);\n    setIsEditModalOpen(true);\n  }, []);\n  const handleDeleteAllEmployeesWrapper = useCallback(async () => {\n    await handleDeleteAllEmployees(loggedUser, employees, setEmployees, setIsProcessing);\n  }, [loggedUser, employees, setEmployees, setIsProcessing]);\n  const filteredEmployees = filterEmployees(employees, searchQuery, filterRole);\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"employees-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employees-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employees-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Employees\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/images/ShiftWise_Owl_Employees.png\",\n              alt: \"Logo\",\n              className: \"header-logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Search by name or email...\",\n              value: searchQuery,\n              onChange: e => setSearchQuery(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: filterRole,\n              onChange: e => setFilterRole(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"all\",\n                children: \"All Roles\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"employee\",\n                children: \"Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"admin\",\n                children: \"Admin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employees-cards\",\n            children: [...filteredEmployees].sort((a, b) => a.name.localeCompare(b.name, 'he', {\n              sensitivity: 'base'\n            })).map(employee => /*#__PURE__*/_jsxDEV(EmployeeCard, {\n              employee: employee,\n              isOpen: openCards[employee.id],\n              onToggle: toggleCard,\n              onEdit: handleEditClick,\n              onDelete: openConfirmDeleteModal,\n              loggedUser: loggedUser\n            }, employee.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this), isProcessing && /*#__PURE__*/_jsxDEV(ThreeDots, {\n            height: \"50\",\n            width: \"50\",\n            radius: \"9\",\n            color: \"#3498db\",\n            ariaLabel: \"processing\",\n            wrapperStyle: {\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: '20px'\n            },\n            visible: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-form-button\",\n              onClick: () => setIsAddEmployeeModalOpen(true),\n              children: \"Add New Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-form-button\",\n              onClick: () => setIsNotificationModalOpen(true),\n              children: \"Send Notification\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-form-button\",\n              onClick: () => handleLoadEmployeesFromJSON(loggedUser, setEmployees, setIsProcessing),\n              children: \"Add Employees from JSON\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-form-button delete-all\",\n              onClick: handleDeleteAllEmployeesWrapper,\n              children: \"Delete All Non-Admin Employees\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SendNotificationModal, {\n            isOpen: isNotificationModalOpen,\n            onClose: () => setIsNotificationModalOpen(false),\n            employees: employees,\n            selectedRecipients: selectedNotificationRecipients,\n            setSelectedRecipients: setSelectedNotificationRecipients,\n            message: notificationMessage,\n            setMessage: setNotificationMessage,\n            onSubmit: async e => {\n              e.preventDefault();\n              try {\n                var _loggedUser$company2;\n                const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company2 = loggedUser.company) === null || _loggedUser$company2 === void 0 ? void 0 : _loggedUser$company2.id;\n                const link = '/schedule';\n                for (const userId of selectedNotificationRecipients) {\n                  await sendNotification(companyId, userId, notificationMessage.trim(), link);\n                }\n                toast.success('Notifications sent!');\n                setIsNotificationModalOpen(false);\n                setSelectedNotificationRecipients([]);\n                setNotificationMessage('');\n              } catch (error) {\n                toast.error('Failed to send notifications.');\n                console.error(error);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ConfirmDeleteModal, {\n            isOpen: isConfirmDeleteModalOpen,\n            employeeName: employeeToDelete === null || employeeToDelete === void 0 ? void 0 : employeeToDelete.name,\n            onConfirm: handleDeleteConfirmedWrapper,\n            onCancel: closeConfirmDeleteModal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AddEmployeeModal, {\n            isOpen: isAddEmployeeModalOpen,\n            onClose: () => setIsAddEmployeeModalOpen(false),\n            newEmployee: newEmployee,\n            setNewEmployee: setNewEmployee,\n            handleAddEmployee: handleAddEmployeeWrapper,\n            isProcessing: isProcessing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this), isEditModalOpen && editEmployee && /*#__PURE__*/_jsxDEV(EditProfileModal, {\n            isOpen: isEditModalOpen,\n            onClose: () => setIsEditModalOpen(false),\n            profileUser: editEmployee,\n            setProfileUser: setEditEmployee,\n            onSubmit: async e => {\n              e.preventDefault();\n              try {\n                if (editEmployee && editEmployee.id) {\n                  var _loggedUser$user;\n                  let updatedPhotoData = editEmployee.photoData || '';\n                  if (editEmployee.photoFile) {\n                    updatedPhotoData = await fileToBase64(editEmployee.photoFile);\n                  }\n                  const updatedEmployee = await updateUser(editEmployee.id, {\n                    name: editEmployee.name,\n                    email: editEmployee.email,\n                    phone: editEmployee.phone,\n                    role: editEmployee.role,\n                    photoData: updatedPhotoData\n                  });\n                  setEmployees(prevEmployees => prevEmployees.map(employee => employee.id === updatedEmployee.id ? updatedEmployee : employee));\n                  if ((loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$user = loggedUser.user) === null || _loggedUser$user === void 0 ? void 0 : _loggedUser$user.id) === updatedEmployee.id) {\n                    updateUserInLocalStorage(loggedUser, updatedEmployee);\n                  }\n                  toast.success('Employee updated successfully!');\n                  setIsEditModalOpen(false);\n                }\n              } catch (err) {\n                toast.error('Failed to update employee. Please try again.');\n                console.error(err);\n              }\n            },\n            title: \"Edit Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n}\n_s(EmployeesScreen, \"ukwrBoWqfUEaTjmP9kSRpovGnvo=\");\n_c = EmployeesScreen;\nexport default EmployeesScreen;\nvar _c;\n$RefreshReg$(_c, \"EmployeesScreen\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Modal","toast","ToastContainer","ThreeDots","Navbar","Loader","BackgroundWrapper","EditProfileModal","EmployeeCard","SendNotificationModal","AddEmployeeModal","ConfirmDeleteModal","updateUser","sendNotification","fileToBase64","filterEmployees","updateUserInLocalStorage","fetchEmployees","handleLoadEmployeesFromJSON","handleDeleteConfirmed","handleAddEmployee","handleDeleteAllEmployees","jsxDEV","_jsxDEV","setAppElement","EmployeesScreen","_s","employees","setEmployees","newEmployee","setNewEmployee","name","email","phone","role","password","photoFile","isLoading","setIsLoading","isProcessing","setIsProcessing","error","setError","loggedUser","setLoggedUser","isAddEmployeeModalOpen","setIsAddEmployeeModalOpen","isEditModalOpen","setIsEditModalOpen","isConfirmDeleteModalOpen","setIsConfirmDeleteModalOpen","editEmployee","setEditEmployee","employeeToDelete","setEmployeeToDelete","openCards","setOpenCards","searchQuery","setSearchQuery","filterRole","setFilterRole","isNotificationModalOpen","setIsNotificationModalOpen","selectedNotificationRecipients","setSelectedNotificationRecipients","notificationMessage","setNotificationMessage","JSON","parse","localStorage","getItem","console","log","_loggedUser$company","companyId","company","id","openConfirmDeleteModal","employee","closeConfirmDeleteModal","handleDeleteConfirmedWrapper","handleChange","e","value","target","prev","handleAddEmployeeWrapper","preventDefault","toggleCard","handleEditClick","handleDeleteAllEmployeesWrapper","filteredEmployees","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","type","placeholder","onChange","sort","a","b","localeCompare","sensitivity","map","isOpen","onToggle","onEdit","onDelete","height","width","radius","color","ariaLabel","wrapperStyle","display","justifyContent","marginTop","visible","onClick","onClose","selectedRecipients","setSelectedRecipients","message","setMessage","onSubmit","_loggedUser$company2","link","userId","trim","success","employeeName","onConfirm","onCancel","profileUser","setProfileUser","_loggedUser$user","updatedPhotoData","photoData","updatedEmployee","prevEmployees","user","err","title","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/EmployeesScreen.js"],"sourcesContent":["// React core and hooks for state, effect, and memoization\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport Modal from 'react-modal';\n\nimport { toast, ToastContainer } from 'react-toastify';\n\nimport { ThreeDots } from 'react-loader-spinner';\n\nimport Navbar from '../components/Navbar';\n\nimport Loader from './Common/Loader';\n\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\n\nimport EditProfileModal from './Modals/EditProfileModal';\n\nimport EmployeeCard from '../components/EmployeeCard';\n\nimport SendNotificationModal from './Modals/SendNotificationModal';\n\nimport AddEmployeeModal from './Modals/AddEmployeeModal';\n\nimport ConfirmDeleteModal from './Modals/ConfirmDeleteModal';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport '../styles/EmployeesScreen.css';\nimport '../styles/Navbar.css';\n\nimport { updateUser } from '../services/userService';\n\nimport { sendNotification } from '../services/notificationService';\n\nimport { fileToBase64 } from '../utils/fileUtils';\n\nimport { filterEmployees } from '../utils/employeeUtils';\n\nimport { updateUserInLocalStorage } from '../utils/userUtils';\nimport { fetchEmployees, handleLoadEmployeesFromJSON, handleDeleteConfirmed, handleAddEmployee, handleDeleteAllEmployees } from '../utils/employeeHandlers';\n\nModal.setAppElement('#root');\n\nfunction EmployeesScreen() {\n\n    const [employees, setEmployees] = useState([]);\n    const [newEmployee, setNewEmployee] = useState({\n        name: '', email: '', phone: '', role: 'employee', password: '', photoFile: null\n    });\n    const [isLoading, setIsLoading] = useState(true);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [error, setError] = useState('');\n    const [loggedUser, setLoggedUser] = useState(null);\n    const [isAddEmployeeModalOpen, setIsAddEmployeeModalOpen] = useState(false);\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n    const [isConfirmDeleteModalOpen, setIsConfirmDeleteModalOpen] = useState(false);\n    const [editEmployee, setEditEmployee] = useState(null);\n    const [employeeToDelete, setEmployeeToDelete] = useState(null);\n    const [openCards, setOpenCards] = useState({});\n    const [searchQuery, setSearchQuery] = useState('');\n    const [filterRole, setFilterRole] = useState('all');\n    const [isNotificationModalOpen, setIsNotificationModalOpen] = useState(false);\n    const [selectedNotificationRecipients, setSelectedNotificationRecipients] = useState([]);\n    const [notificationMessage, setNotificationMessage] = useState('');\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        console.log(\"🔐 Logged user from localStorage:\", loggedUser);\n        setLoggedUser(loggedUser);\n    }, []);\n\n    useEffect(() => {\n        if (loggedUser) {\n            const companyId = loggedUser?.company?.id;\n            if (companyId) {\n                fetchEmployees(companyId, setEmployees, setError, setIsLoading);\n            }\n        }\n    }, [loggedUser]);\n\n    const openConfirmDeleteModal = (employee) => {\n        setEmployeeToDelete(employee);\n        setIsConfirmDeleteModalOpen(true);\n    };\n\n    const closeConfirmDeleteModal = () => {\n        setIsConfirmDeleteModalOpen(false);\n        setEmployeeToDelete(null);\n    };\n\n    const handleDeleteConfirmedWrapper = useCallback(() => {\n        handleDeleteConfirmed(employeeToDelete, loggedUser, employees, setEmployees, closeConfirmDeleteModal);\n    }, [employeeToDelete, loggedUser, employees, setEmployees]);\n\n    const handleChange = useCallback((e) => {\n        const { name, value } = e.target;\n        setNewEmployee((prev) => ({ ...prev, [name]: value }));\n    }, []);\n\n    const handleAddEmployeeWrapper = async (e) => {\n        e.preventDefault();\n        setIsProcessing(true);\n\n        await handleAddEmployee(\n            e,\n            newEmployee,\n            loggedUser,\n            employees,\n            setEmployees,\n            setNewEmployee,\n            setIsAddEmployeeModalOpen\n        );\n\n        setIsProcessing(false);\n    };\n\n    const toggleCard = useCallback((id) => {\n        setOpenCards((prev) => ({\n            ...prev,\n            [id]: !prev[id],\n        }));\n    }, []);\n\n    const handleEditClick = useCallback((employee) => {\n        setEditEmployee(employee);\n        setIsEditModalOpen(true);\n    }, []);\n\n    const handleDeleteAllEmployeesWrapper = useCallback(async () => {\n        await handleDeleteAllEmployees(loggedUser, employees, setEmployees, setIsProcessing);\n    }, [loggedUser, employees, setEmployees, setIsProcessing]);\n\n    const filteredEmployees = filterEmployees(employees, searchQuery, filterRole);\n\n    return (\n        <BackgroundWrapper >\n\n            <div>\n                <Navbar />\n                <div className=\"navbar-placeholder\"></div>\n                <div className=\"employees-wrapper\">\n\n                    <div className=\"employees-container\">\n\n                        <div className=\"employees-header\">\n                            <h1>Employees</h1>\n                            <img src=\"/images/ShiftWise_Owl_Employees.png\" alt=\"Logo\" className=\"header-logo\" />\n                        </div>\n\n                        <div className=\"search-container\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Search by name or email...\"\n                                value={searchQuery}\n                                onChange={(e) => setSearchQuery(e.target.value)}\n                            />\n                            <select value={filterRole} onChange={(e) => setFilterRole(e.target.value)}>\n                                <option value=\"all\">All Roles</option>\n                                <option value=\"employee\">Employee</option>\n                                <option value=\"admin\">Admin</option>\n                            </select>\n                        </div>\n\n                        {isLoading ? (\n                            <Loader />\n                        ) : error ? (\n                            <p className=\"error\">{error}</p>\n                        ) : (\n                            <div className=\"employees-cards\">\n                                {[...filteredEmployees]\n                                    .sort((a, b) => a.name.localeCompare(b.name, 'he', { sensitivity: 'base' }))\n                                    .map((employee) => (\n                                        <EmployeeCard\n                                            key={employee.id}\n                                            employee={employee}\n                                            isOpen={openCards[employee.id]}\n                                            onToggle={toggleCard}\n                                            onEdit={handleEditClick}\n                                            onDelete={openConfirmDeleteModal}\n                                            loggedUser={loggedUser}\n                                        />\n                                    ))}\n                            </div>\n                        )}\n\n                        {isProcessing && (\n                            <ThreeDots\n                                height=\"50\"\n                                width=\"50\"\n                                radius=\"9\"\n                                color=\"#3498db\"\n                                ariaLabel=\"processing\"\n                                wrapperStyle={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}\n                                visible={true}\n                            />\n                        )}\n\n                        <div className=\"button-group\">\n                            <button\n                                className=\"toggle-form-button\"\n                                onClick={() => setIsAddEmployeeModalOpen(true)}\n                            >\n                                Add New Employee\n                            </button>\n                            <button\n                                className=\"toggle-form-button\"\n                                onClick={() => setIsNotificationModalOpen(true)}\n                            >\n                                Send Notification\n                            </button>\n\n                            <button className=\"toggle-form-button\" onClick={() => handleLoadEmployeesFromJSON(loggedUser, setEmployees, setIsProcessing)}>\n                                Add Employees from JSON\n                            </button>\n\n                            <button\n                                className=\"toggle-form-button delete-all\"\n                                onClick={handleDeleteAllEmployeesWrapper}\n                            >\n                                Delete All Non-Admin Employees\n                            </button>\n                        </div>\n\n                        <SendNotificationModal\n                            isOpen={isNotificationModalOpen}\n                            onClose={() => setIsNotificationModalOpen(false)}\n                            employees={employees}\n                            selectedRecipients={selectedNotificationRecipients}\n                            setSelectedRecipients={setSelectedNotificationRecipients}\n                            message={notificationMessage}\n                            setMessage={setNotificationMessage}\n                            onSubmit={async (e) => {\n                                e.preventDefault();\n                                try {\n                                    const companyId = loggedUser?.company?.id;\n                                    const link = '/schedule';\n\n                                    for (const userId of selectedNotificationRecipients) {\n                                        await sendNotification(companyId, userId, notificationMessage.trim(), link);\n                                    }\n\n                                    toast.success('Notifications sent!');\n                                    setIsNotificationModalOpen(false);\n                                    setSelectedNotificationRecipients([]);\n                                    setNotificationMessage('');\n                                } catch (error) {\n                                    toast.error('Failed to send notifications.');\n                                    console.error(error);\n                                }\n                            }}\n                        />\n\n                        <ConfirmDeleteModal\n                            isOpen={isConfirmDeleteModalOpen}\n                            employeeName={employeeToDelete?.name}\n                            onConfirm={handleDeleteConfirmedWrapper}\n                            onCancel={closeConfirmDeleteModal}\n                        />\n\n                        <AddEmployeeModal\n                            isOpen={isAddEmployeeModalOpen}\n                            onClose={() => setIsAddEmployeeModalOpen(false)}\n                            newEmployee={newEmployee}\n                            setNewEmployee={setNewEmployee}\n                            handleAddEmployee={handleAddEmployeeWrapper}\n                            isProcessing={isProcessing}\n                        />\n\n                        {isEditModalOpen && editEmployee && (\n                            <EditProfileModal\n                                isOpen={isEditModalOpen}\n                                onClose={() => setIsEditModalOpen(false)}\n                                profileUser={editEmployee}\n                                setProfileUser={setEditEmployee}\n                                onSubmit={async (e) => {\n                                    e.preventDefault();\n                                    try {\n                                        if (editEmployee && editEmployee.id) {\n                                            let updatedPhotoData = editEmployee.photoData || '';\n                                            if (editEmployee.photoFile) {\n                                                updatedPhotoData = await fileToBase64(editEmployee.photoFile);\n                                            }\n\n                                            const updatedEmployee = await updateUser(editEmployee.id, {\n                                                name: editEmployee.name,\n                                                email: editEmployee.email,\n                                                phone: editEmployee.phone,\n                                                role: editEmployee.role,\n                                                photoData: updatedPhotoData,\n                                            });\n\n                                            setEmployees((prevEmployees) =>\n                                                prevEmployees.map((employee) =>\n                                                    employee.id === updatedEmployee.id ? updatedEmployee : employee\n                                                )\n                                            );\n\n                                            if (loggedUser?.user?.id === updatedEmployee.id) {\n                                                updateUserInLocalStorage(loggedUser, updatedEmployee);\n                                            }\n\n                                            toast.success('Employee updated successfully!');\n                                            setIsEditModalOpen(false);\n                                        }\n                                    } catch (err) {\n                                        toast.error('Failed to update employee. Please try again.');\n                                        console.error(err);\n                                    }\n                                }}\n                                title=\"Edit Employee\"\n                            />\n                        )}\n                    </div>\n                </div>\n                <ToastContainer />\n            </div>\n        </BackgroundWrapper >\n    );\n}\n\nexport default EmployeesScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}