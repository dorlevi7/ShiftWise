{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js\",\n  _s = $RefreshSig$();\n// React hooks for managing state and side effects\nimport React, { useState, useEffect } from 'react';\n// Hook for navigation between routes\nimport { useNavigate } from 'react-router-dom';\n\n// Toast notifications for user feedback\nimport { toast, ToastContainer } from 'react-toastify';\n// Dropdown component for selecting users\nimport Select from 'react-select';\n// Styles for toast notifications\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Navigation bar component\nimport Navbar from './Navbar';\n// Background layout wrapper\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\n// CSS styles specific to the statistics screen\nimport '../styles/StatisticsScreen.css';\n\n// Service function to fetch users\nimport { getUsers } from '../services/userService';\n// Service function to fetch weekly shift statistics\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utility functions for week calculations\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\n// Chart components from Recharts library\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatisticsScreen = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [mode, setMode] = useState('single'); // 'single' or 'compare'\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [secondEmployeeId, setSecondEmployeeId] = useState(null);\n  const [stats, setStats] = useState(null);\n  const [secondStats, setSecondStats] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const [weeksRange, setWeeksRange] = useState(1);\n  const navigate = useNavigate();\n  const [allStats, setAllStats] = useState([]);\n  const [sortKey, setSortKey] = useState('name');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [showCharts, setShowCharts] = useState(false);\n\n  // Scroll to top when the component mounts\n  useEffect(() => {\n    window.scrollTo({\n      top: 0\n    });\n  }, []);\n\n  // Load logged user and fetch employees from the same company\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n\n      // Fetch all users and filter by current company\n      const fetchEmployees = async () => {\n        try {\n          const usersData = await getUsers();\n          const companyId = loggedUser.company.id;\n          const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n            id,\n            ...user\n          })).filter(user => {\n            var _user$companyIds;\n            return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(c => c.companyId === companyId);\n          });\n          setEmployees(filteredEmployees);\n        } catch (error) {\n          console.error('Error fetching employees:', error);\n        }\n      };\n      fetchEmployees();\n    }\n  }, [navigate]);\n\n  // Fetch and calculate weekly statistics for employees (based on selected mode)\n  useEffect(() => {\n    const fetchStats = async (employeeId, setter) => {\n      try {\n        const companyId = userData.company.id;\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = now.getMonth() + 1;\n        let totalNight = 0;\n        let totalShabbat = 0;\n        let totalRegular = 0;\n\n        // Aggregate stats over the selected weeks\n        for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n          const weekKey = calculateWeekKey(offset);\n          const data = await getWeeklyStats(companyId, year, month, weekKey, employeeId);\n          if (data) {\n            totalNight += data.nightShifts || 0;\n            totalShabbat += data.shabbatShifts || 0;\n            totalRegular += data.regularShifts || 0;\n          }\n        }\n        const totalAllShifts = totalNight + totalShabbat + totalRegular;\n\n        // Set the aggregated and average statistics\n        setter({\n          nightShifts: totalNight,\n          shabbatShifts: totalShabbat,\n          regularShifts: totalRegular,\n          avgNight: totalNight / weeksRange,\n          avgShabbat: totalShabbat / weeksRange,\n          avgRegular: totalRegular / weeksRange,\n          totalAll: totalAllShifts,\n          avgAll: totalAllShifts / weeksRange\n        });\n      } catch (error) {\n        console.error('Error fetching stats:', error);\n        toast.error('Failed to fetch statistics');\n      }\n    };\n    if (!userData) return;\n\n    // Fetch stats for a single employee\n    if (mode === 'single' && selectedEmployeeId) {\n      fetchStats(selectedEmployeeId, setStats);\n      // Fetch stats for comparison between two employees\n    } else if (mode === 'compare' && selectedEmployeeId && secondEmployeeId) {\n      fetchStats(selectedEmployeeId, setStats);\n      fetchStats(secondEmployeeId, setSecondStats);\n      // Fetch stats for all employees to display in a table\n    } else if (mode === 'table' && employees.length > 0) {\n      const fetchAllStats = async () => {\n        try {\n          const companyId = userData.company.id;\n          const now = new Date();\n          const year = now.getFullYear();\n          const month = now.getMonth() + 1;\n          const results = await Promise.all(employees.map(async employee => {\n            let totalNight = 0;\n            let totalShabbat = 0;\n            let totalRegular = 0;\n\n            // Aggregate stats per employee over the selected weeks\n            for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n              const weekKey = calculateWeekKey(offset);\n              const data = await getWeeklyStats(companyId, year, month, weekKey, employee.id);\n              if (data) {\n                totalNight += data.nightShifts || 0;\n                totalShabbat += data.shabbatShifts || 0;\n                totalRegular += data.regularShifts || 0;\n              }\n            }\n            const totalAll = totalNight + totalShabbat + totalRegular;\n\n            // Return the aggregated stats object\n            return {\n              id: employee.id,\n              name: employee.name,\n              night: totalNight,\n              shabbat: totalShabbat,\n              regular: totalRegular,\n              total: totalAll,\n              avgNight: totalAll === 0 ? '0%' : `${(totalNight / totalAll * 100).toFixed(1)}%`,\n              avgShabbat: totalAll === 0 ? '0%' : `${(totalShabbat / totalAll * 100).toFixed(1)}%`,\n              avgRegular: totalAll === 0 ? '0%' : `${(totalRegular / totalAll * 100).toFixed(1)}%`,\n              avgTotal: (totalAll / weeksRange).toFixed(2)\n            };\n          }));\n          setAllStats(results);\n        } catch (error) {\n          console.error('Error fetching all employees stats:', error);\n          toast.error('Failed to fetch all statistics');\n        }\n      };\n      fetchAllStats();\n    }\n  }, [userData, selectedEmployeeId, secondEmployeeId, weekOffset, weeksRange, mode, employees]);\n\n  // Get the name of an employee by ID\n  const getEmployeeNameById = id => {\n    const employee = employees.find(e => e.id === id);\n    return employee ? employee.name : 'Employee';\n  };\n\n  // Update week offset for navigation\n  const handleWeekChange = direction => {\n    setWeekOffset(prev => prev + direction);\n  };\n\n  // Sort employees alphabetically by name (Hebrew locale)\n  const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n  const sortedStats = [...allStats].sort((a, b) => {\n    const valA = a[sortKey];\n    const valB = b[sortKey];\n    const parseValue = val => {\n      if (typeof val === 'string' && val.includes('%')) {\n        return parseFloat(val.replace('%', ''));\n      }\n      return isNaN(val) ? String(val) : val;\n    };\n    const parsedA = parseValue(valA);\n    const parsedB = parseValue(valB);\n    if (typeof parsedA === 'number' && typeof parsedB === 'number') {\n      return sortDirection === 'asc' ? parsedA - parsedB : parsedB - parsedA;\n    } else {\n      return sortDirection === 'asc' ? String(parsedA).localeCompare(parsedB, 'he') : String(parsedB).localeCompare(parsedA, 'he');\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"statistics-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"statistics-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"statistics-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Statistics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/images/ShiftWise_Owl_Statistics.png\",\n              alt: \"ShiftWise Owl\",\n              className: \"statistics-logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"week-navigation centered-navigation\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(-1),\n              children: \"Previous Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"week-range\",\n              children: weeksRange === 1 ? `Week: ${calculateWeekRange(weekOffset)}` : `Weeks: ${calculateWeekRange(weekOffset - weeksRange + 1)} To ${calculateWeekRange(weekOffset)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(1),\n              children: \"Next Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weeks-range-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"weeksRange\",\n              children: \"Number of weeks to include:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              id: \"weeksRange\",\n              min: \"1\",\n              value: weeksRange,\n              onChange: e => {\n                const value = parseInt(e.target.value);\n                if (!isNaN(value) && value > 0) {\n                  setWeeksRange(value);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"single\",\n                checked: mode === 'single',\n                onChange: () => setMode('single')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 33\n              }, this), \" Single\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"compare\",\n                checked: mode === 'compare',\n                onChange: () => setMode('compare')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 33\n              }, this), \" Compare\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"table\",\n                checked: mode === 'table',\n                onChange: () => setMode('table')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 33\n              }, this), \" Table\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-box\",\n            children: mode === 'compare' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comparison-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"employee-comparison-box\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"employee-selector\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Select First Employee:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Select, {\n                      className: \"employee-dropdown\",\n                      classNamePrefix: \"react-select\",\n                      options: sortedEmployees.map(e => ({\n                        value: e.id,\n                        label: e.name\n                      })),\n                      onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                      value: sortedEmployees.map(e => ({\n                        value: e.id,\n                        label: e.name\n                      })).find(o => o.value === selectedEmployeeId) || null,\n                      placeholder: \"Choose employee\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 309,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 45\n                  }, this), stats && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"statistics-summary\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Night Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 320,\n                        columnNumber: 56\n                      }, this), \" \", stats.nightShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 320,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Shabbat Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 321,\n                        columnNumber: 56\n                      }, this), \" \", stats.shabbatShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 321,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Regular Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 322,\n                        columnNumber: 56\n                      }, this), \" \", stats.regularShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 322,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total All Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 323,\n                        columnNumber: 56\n                      }, this), \" \", stats.totalAll]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 324,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Average per Week:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 325,\n                        columnNumber: 56\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 325,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Night: \", stats.avgNight.toFixed(2), \" (\", (stats.nightShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 326,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Shabbat: \", stats.avgShabbat.toFixed(2), \" (\", (stats.shabbatShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 327,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Regular: \", stats.avgRegular.toFixed(2), \" (\", (stats.regularShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 328,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"All Shifts: \", stats.avgAll.toFixed(2)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 329,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"vertical-divider\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"employee-comparison-box\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"employee-selector\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Select Second Employee:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 338,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Select, {\n                      className: \"employee-dropdown\",\n                      classNamePrefix: \"react-select\",\n                      options: sortedEmployees.map(e => ({\n                        value: e.id,\n                        label: e.name\n                      })),\n                      onChange: option => setSecondEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                      value: sortedEmployees.map(e => ({\n                        value: e.id,\n                        label: e.name\n                      })).find(o => o.value === secondEmployeeId) || null,\n                      placeholder: \"Choose employee\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 339,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 45\n                  }, this), secondStats && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"statistics-summary\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Night Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 350,\n                        columnNumber: 56\n                      }, this), \" \", secondStats.nightShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 350,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Shabbat Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 351,\n                        columnNumber: 56\n                      }, this), \" \", secondStats.shabbatShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 351,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Regular Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 352,\n                        columnNumber: 56\n                      }, this), \" \", secondStats.regularShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 352,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total All Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 353,\n                        columnNumber: 56\n                      }, this), \" \", secondStats.totalAll]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 353,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 354,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Average per Week:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 355,\n                        columnNumber: 56\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 355,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Night: \", secondStats.avgNight.toFixed(2), \" (\", (secondStats.nightShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 356,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Shabbat: \", secondStats.avgShabbat.toFixed(2), \" (\", (secondStats.shabbatShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 357,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Regular: \", secondStats.avgRegular.toFixed(2), \" (\", (secondStats.regularShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 358,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"All Shifts: \", secondStats.avgAll.toFixed(2)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 359,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 37\n              }, this), stats && secondStats && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chart-toggle-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"show-chart-button\",\n                  onClick: () => setShowCharts(!showCharts),\n                  children: showCharts ? 'Hide Chart' : 'Show Chart'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 45\n                }, this), showCharts && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"statistics-comparison-chart\",\n                  children: /*#__PURE__*/_jsxDEV(BarChart, {\n                    width: 500,\n                    height: 300,\n                    data: [{\n                      name: 'Night',\n                      [getEmployeeNameById(selectedEmployeeId)]: stats.nightShifts,\n                      [getEmployeeNameById(secondEmployeeId)]: secondStats.nightShifts\n                    }, {\n                      name: 'Shabbat',\n                      [getEmployeeNameById(selectedEmployeeId)]: stats.shabbatShifts,\n                      [getEmployeeNameById(secondEmployeeId)]: secondStats.shabbatShifts\n                    }, {\n                      name: 'Regular',\n                      [getEmployeeNameById(selectedEmployeeId)]: stats.regularShifts,\n                      [getEmployeeNameById(secondEmployeeId)]: secondStats.regularShifts\n                    }],\n                    children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                      dataKey: \"name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 392,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                      allowDecimals: false\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 393,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 394,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 395,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                      dataKey: getEmployeeNameById(secondEmployeeId),\n                      fill: \"#e67e22\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                      dataKey: getEmployeeNameById(selectedEmployeeId),\n                      fill: \"#3498db\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 397,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 33\n            }, this) : mode === 'table' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table-container\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"statistics-table\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [{\n                      key: 'name',\n                      label: 'Name'\n                    }, {\n                      key: 'night',\n                      label: 'Night'\n                    }, {\n                      key: 'shabbat',\n                      label: 'Shabbat'\n                    }, {\n                      key: 'regular',\n                      label: 'Regular'\n                    }, {\n                      key: 'total',\n                      label: 'Total'\n                    }, {\n                      key: 'avgNight',\n                      label: 'Avg Night'\n                    }, {\n                      key: 'avgShabbat',\n                      label: 'Avg Shabbat'\n                    }, {\n                      key: 'avgRegular',\n                      label: 'Avg Regular'\n                    }, {\n                      key: 'avgTotal',\n                      label: 'Avg Total'\n                    }].map(({\n                      key,\n                      label\n                    }) => /*#__PURE__*/_jsxDEV(\"th\", {\n                      onClick: () => {\n                        if (sortKey === key) {\n                          setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc');\n                        } else {\n                          setSortKey(key);\n                          setSortDirection('desc');\n                        }\n                      },\n                      style: {\n                        cursor: 'pointer'\n                      },\n                      children: [label, \" \", sortKey === key && (sortDirection === 'asc' ? '🔼' : '🔽')]\n                    }, key, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 422,\n                      columnNumber: 53\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: sortedStats.map(stat => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 443,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.night\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 444,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.shabbat\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 445,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.regular\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 446,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.total\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 447,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.avgNight\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 448,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.avgShabbat\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 449,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.avgRegular\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 450,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.avgTotal\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 451,\n                      columnNumber: 53\n                    }, this)]\n                  }, stat.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 442,\n                    columnNumber: 49\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-container\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employee-comparison-box\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"employee-selector\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Select Employee:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 461,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    className: \"employee-dropdown\",\n                    classNamePrefix: \"react-select\",\n                    options: sortedEmployees.map(e => ({\n                      value: e.id,\n                      label: e.name\n                    })),\n                    onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                    value: sortedEmployees.map(e => ({\n                      value: e.id,\n                      label: e.name\n                    })).find(o => o.value === selectedEmployeeId) || null,\n                    placeholder: \"Choose employee\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 462,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 41\n                }, this), stats && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"statistics-summary-wrapper\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"statistics-summary\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Night Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 474,\n                        columnNumber: 56\n                      }, this), \" \", stats.nightShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 474,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Shabbat Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 475,\n                        columnNumber: 56\n                      }, this), \" \", stats.shabbatShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 475,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total Regular Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 476,\n                        columnNumber: 56\n                      }, this), \" \", stats.regularShifts]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 476,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Total All Shifts:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 477,\n                        columnNumber: 56\n                      }, this), \" \", stats.totalAll]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 477,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 478,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Average per Week:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 479,\n                        columnNumber: 56\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 479,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Night: \", stats.avgNight.toFixed(2), \" (\", (stats.nightShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 480,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Shabbat: \", stats.avgShabbat.toFixed(2), \" (\", (stats.shabbatShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 481,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"Regular: \", stats.avgRegular.toFixed(2), \" (\", (stats.regularShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 482,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [\"All Shifts: \", stats.avgAll.toFixed(2)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 483,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 473,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chart-toggle-container\",\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"show-chart-button\",\n                      onClick: () => setShowCharts(!showCharts),\n                      children: showCharts ? 'Hide Chart' : 'Show Chart'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 487,\n                      columnNumber: 53\n                    }, this), showCharts && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"statistics-chart\",\n                      children: /*#__PURE__*/_jsxDEV(BarChart, {\n                        width: 400,\n                        height: 300,\n                        data: [{\n                          name: 'Night',\n                          value: stats.nightShifts\n                        }, {\n                          name: 'Shabbat',\n                          value: stats.shabbatShifts\n                        }, {\n                          name: 'Regular',\n                          value: stats.regularShifts\n                        }],\n                        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                          dataKey: \"name\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 501,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                          allowDecimals: false\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 502,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 503,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 504,\n                          columnNumber: 65\n                        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                          dataKey: \"value\",\n                          fill: \"#2980b9\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 505,\n                          columnNumber: 65\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 496,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 495,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 486,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this);\n};\n_s(StatisticsScreen, \"ICHoNBLhzONStS//Sk7hrMcD9jQ=\", false, function () {\n  return [useNavigate];\n});\n_c = StatisticsScreen;\nexport default StatisticsScreen;\nvar _c;\n$RefreshReg$(_c, \"StatisticsScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","toast","ToastContainer","Select","Navbar","BackgroundWrapper","getUsers","getWeeklyStats","calculateWeekKey","calculateWeekRange","BarChart","Bar","XAxis","YAxis","Tooltip","Legend","jsxDEV","_jsxDEV","StatisticsScreen","_s","userData","setUserData","employees","setEmployees","mode","setMode","selectedEmployeeId","setSelectedEmployeeId","secondEmployeeId","setSecondEmployeeId","stats","setStats","secondStats","setSecondStats","weekOffset","setWeekOffset","weeksRange","setWeeksRange","navigate","allStats","setAllStats","sortKey","setSortKey","sortDirection","setSortDirection","showCharts","setShowCharts","window","scrollTo","top","loggedUser","JSON","parse","localStorage","getItem","fetchEmployees","usersData","companyId","company","id","filteredEmployees","Object","entries","map","user","filter","_user$companyIds","companyIds","some","c","error","console","fetchStats","employeeId","setter","now","Date","year","getFullYear","month","getMonth","totalNight","totalShabbat","totalRegular","offset","weekKey","data","nightShifts","shabbatShifts","regularShifts","totalAllShifts","avgNight","avgShabbat","avgRegular","totalAll","avgAll","length","fetchAllStats","results","Promise","all","employee","name","night","shabbat","regular","total","toFixed","avgTotal","getEmployeeNameById","find","e","handleWeekChange","direction","prev","sortedEmployees","sort","a","b","localeCompare","sortedStats","valA","valB","parseValue","val","includes","parseFloat","replace","isNaN","String","parsedA","parsedB","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","onClick","htmlFor","type","min","value","onChange","parseInt","target","checked","classNamePrefix","options","label","option","o","placeholder","width","height","dataKey","allowDecimals","fill","key","style","cursor","stat","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js"],"sourcesContent":["// React hooks for managing state and side effects\nimport React, { useState, useEffect } from 'react';\n// Hook for navigation between routes\nimport { useNavigate } from 'react-router-dom';\n\n// Toast notifications for user feedback\nimport { toast, ToastContainer } from 'react-toastify';\n// Dropdown component for selecting users\nimport Select from 'react-select';\n// Styles for toast notifications\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Navigation bar component\nimport Navbar from './Navbar';\n// Background layout wrapper\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\n// CSS styles specific to the statistics screen\nimport '../styles/StatisticsScreen.css';\n\n// Service function to fetch users\nimport { getUsers } from '../services/userService';\n// Service function to fetch weekly shift statistics\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utility functions for week calculations\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\n// Chart components from Recharts library\nimport {\n    BarChart, Bar, XAxis, YAxis, Tooltip, Legend\n} from 'recharts';\n\nconst StatisticsScreen = () => {\n    const [userData, setUserData] = useState(null);\n    const [employees, setEmployees] = useState([]);\n    const [mode, setMode] = useState('single'); // 'single' or 'compare'\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [secondEmployeeId, setSecondEmployeeId] = useState(null);\n    const [stats, setStats] = useState(null);\n    const [secondStats, setSecondStats] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n    const [weeksRange, setWeeksRange] = useState(1);\n    const navigate = useNavigate();\n    const [allStats, setAllStats] = useState([]);\n    const [sortKey, setSortKey] = useState('name');\n    const [sortDirection, setSortDirection] = useState('asc');\n    const [showCharts, setShowCharts] = useState(false);\n\n    // Scroll to top when the component mounts\n    useEffect(() => {\n        window.scrollTo({ top: 0 });\n    }, []);\n\n    // Load logged user and fetch employees from the same company\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n\n            // Fetch all users and filter by current company\n            const fetchEmployees = async () => {\n\n                try {\n                    const usersData = await getUsers();\n                    const companyId = loggedUser.company.id;\n                    const filteredEmployees = Object.entries(usersData)\n                        .map(([id, user]) => ({ id, ...user }))\n                        .filter((user) => user.companyIds?.some((c) => c.companyId === companyId));\n                    setEmployees(filteredEmployees);\n                } catch (error) {\n                    console.error('Error fetching employees:', error);\n                }\n            };\n            fetchEmployees();\n        }\n    }, [navigate]);\n\n    // Fetch and calculate weekly statistics for employees (based on selected mode)\n    useEffect(() => {\n        const fetchStats = async (employeeId, setter) => {\n            try {\n                const companyId = userData.company.id;\n                const now = new Date();\n                const year = now.getFullYear();\n                const month = now.getMonth() + 1;\n\n                let totalNight = 0;\n                let totalShabbat = 0;\n                let totalRegular = 0;\n\n                // Aggregate stats over the selected weeks\n                for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n                    const weekKey = calculateWeekKey(offset);\n                    const data = await getWeeklyStats(companyId, year, month, weekKey, employeeId);\n\n                    if (data) {\n                        totalNight += data.nightShifts || 0;\n                        totalShabbat += data.shabbatShifts || 0;\n                        totalRegular += data.regularShifts || 0;\n                    }\n                }\n\n                const totalAllShifts = totalNight + totalShabbat + totalRegular;\n\n                // Set the aggregated and average statistics\n                setter({\n                    nightShifts: totalNight,\n                    shabbatShifts: totalShabbat,\n                    regularShifts: totalRegular,\n                    avgNight: totalNight / weeksRange,\n                    avgShabbat: totalShabbat / weeksRange,\n                    avgRegular: totalRegular / weeksRange,\n                    totalAll: totalAllShifts,\n                    avgAll: totalAllShifts / weeksRange\n                });\n            } catch (error) {\n                console.error('Error fetching stats:', error);\n                toast.error('Failed to fetch statistics');\n            }\n        };\n\n        if (!userData) return;\n\n        // Fetch stats for a single employee\n        if (mode === 'single' && selectedEmployeeId) {\n            fetchStats(selectedEmployeeId, setStats);\n            // Fetch stats for comparison between two employees\n        } else if (mode === 'compare' && selectedEmployeeId && secondEmployeeId) {\n            fetchStats(selectedEmployeeId, setStats);\n            fetchStats(secondEmployeeId, setSecondStats);\n            // Fetch stats for all employees to display in a table\n        } else if (mode === 'table' && employees.length > 0) {\n            const fetchAllStats = async () => {\n                try {\n                    const companyId = userData.company.id;\n                    const now = new Date();\n                    const year = now.getFullYear();\n                    const month = now.getMonth() + 1;\n\n                    const results = await Promise.all(\n                        employees.map(async (employee) => {\n                            let totalNight = 0;\n                            let totalShabbat = 0;\n                            let totalRegular = 0;\n\n                            // Aggregate stats per employee over the selected weeks\n                            for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n                                const weekKey = calculateWeekKey(offset);\n                                const data = await getWeeklyStats(companyId, year, month, weekKey, employee.id);\n\n                                if (data) {\n                                    totalNight += data.nightShifts || 0;\n                                    totalShabbat += data.shabbatShifts || 0;\n                                    totalRegular += data.regularShifts || 0;\n                                }\n                            }\n\n                            const totalAll = totalNight + totalShabbat + totalRegular;\n\n                            // Return the aggregated stats object\n                            return {\n                                id: employee.id,\n                                name: employee.name,\n                                night: totalNight,\n                                shabbat: totalShabbat,\n                                regular: totalRegular,\n                                total: totalAll,\n                                avgNight: totalAll === 0 ? '0%' : `${((totalNight / totalAll) * 100).toFixed(1)}%`,\n                                avgShabbat: totalAll === 0 ? '0%' : `${((totalShabbat / totalAll) * 100).toFixed(1)}%`,\n                                avgRegular: totalAll === 0 ? '0%' : `${((totalRegular / totalAll) * 100).toFixed(1)}%`,\n                                avgTotal: (totalAll / weeksRange).toFixed(2)\n                            };\n                        })\n                    );\n\n                    setAllStats(results);\n                } catch (error) {\n                    console.error('Error fetching all employees stats:', error);\n                    toast.error('Failed to fetch all statistics');\n                }\n            };\n\n            fetchAllStats();\n        }\n    }, [userData, selectedEmployeeId, secondEmployeeId, weekOffset, weeksRange, mode, employees]);\n\n    // Get the name of an employee by ID\n    const getEmployeeNameById = (id) => {\n        const employee = employees.find(e => e.id === id);\n        return employee ? employee.name : 'Employee';\n    };\n\n    // Update week offset for navigation\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prev) => prev + direction);\n    };\n\n    // Sort employees alphabetically by name (Hebrew locale)\n    const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n\n    const sortedStats = [...allStats].sort((a, b) => {\n        const valA = a[sortKey];\n        const valB = b[sortKey];\n\n        const parseValue = (val) => {\n            if (typeof val === 'string' && val.includes('%')) {\n                return parseFloat(val.replace('%', ''));\n            }\n            return isNaN(val) ? String(val) : val;\n        };\n\n        const parsedA = parseValue(valA);\n        const parsedB = parseValue(valB);\n\n        if (typeof parsedA === 'number' && typeof parsedB === 'number') {\n            return sortDirection === 'asc' ? parsedA - parsedB : parsedB - parsedA;\n        } else {\n            return sortDirection === 'asc'\n                ? String(parsedA).localeCompare(parsedB, 'he')\n                : String(parsedB).localeCompare(parsedA, 'he');\n        }\n    });\n\n    return (\n        <BackgroundWrapper>\n            <div>\n                <Navbar />\n                <div className=\"navbar-placeholder\"></div>\n\n                <div className=\"statistics-wrapper\">\n\n                    <div className=\"statistics-container\">\n\n                        <div className=\"statistics-header\">\n                            <h1>Statistics</h1>\n                            <img\n                                src=\"/images/ShiftWise_Owl_Statistics.png\"\n                                alt=\"ShiftWise Owl\"\n                                className=\"statistics-logo\"\n                            />\n                        </div>\n\n                        <div className=\"week-navigation centered-navigation\">\n                            <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                Previous Week\n                            </button>\n                            <h2 className=\"week-range\">\n                                {weeksRange === 1\n                                    ? `Week: ${calculateWeekRange(weekOffset)}`\n                                    : `Weeks: ${calculateWeekRange(weekOffset - weeksRange + 1)} To ${calculateWeekRange(weekOffset)}`}\n                            </h2>\n                            <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                Next Week\n                            </button>\n                        </div>\n\n                        <div className=\"weeks-range-selector\">\n                            <label htmlFor=\"weeksRange\">Number of weeks to include:</label>\n                            <input\n                                type=\"number\"\n                                id=\"weeksRange\"\n                                min=\"1\"\n                                value={weeksRange}\n                                onChange={(e) => {\n                                    const value = parseInt(e.target.value);\n                                    if (!isNaN(value) && value > 0) {\n                                        setWeeksRange(value);\n                                    }\n                                }}\n                            />\n                        </div>\n\n                        <div className=\"mode-toggle\">\n                            <label>\n                                <input\n                                    type=\"radio\"\n                                    value=\"single\"\n                                    checked={mode === 'single'}\n                                    onChange={() => setMode('single')}\n                                /> Single\n                            </label>\n                            <label>\n                                <input\n                                    type=\"radio\"\n                                    value=\"compare\"\n                                    checked={mode === 'compare'}\n                                    onChange={() => setMode('compare')}\n                                /> Compare\n                            </label>\n                            <label>\n                                <input\n                                    type=\"radio\"\n                                    value=\"table\"\n                                    checked={mode === 'table'}\n                                    onChange={() => setMode('table')}\n                                /> Table\n                            </label>\n                        </div>\n\n                        <div className=\"stats-box\">\n                            {mode === 'compare' ? (\n                                <div>\n                                    <div className=\"comparison-container\">\n                                        <div className=\"employee-comparison-box\">\n                                            <div className=\"employee-selector\">\n                                                <label>Select First Employee:</label>\n                                                <Select\n                                                    className=\"employee-dropdown\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                                    onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                                    value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                                                    placeholder=\"Choose employee\"\n                                                />\n                                            </div>\n                                            {stats && (\n                                                <div className=\"statistics-summary\">\n                                                    <p><strong>Total Night Shifts:</strong> {stats.nightShifts}</p>\n                                                    <p><strong>Total Shabbat Shifts:</strong> {stats.shabbatShifts}</p>\n                                                    <p><strong>Total Regular Shifts:</strong> {stats.regularShifts}</p>\n                                                    <p><strong>Total All Shifts:</strong> {stats.totalAll}</p>\n                                                    <hr />\n                                                    <p><strong>Average per Week:</strong></p>\n                                                    <p>Night: {stats.avgNight.toFixed(2)} ({((stats.nightShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>Shabbat: {stats.avgShabbat.toFixed(2)} ({((stats.shabbatShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>Regular: {stats.avgRegular.toFixed(2)} ({((stats.regularShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>All Shifts: {stats.avgAll.toFixed(2)}</p>\n                                                </div>\n                                            )}\n                                        </div>\n\n                                        <div className=\"vertical-divider\"></div>\n\n                                        <div className=\"employee-comparison-box\">\n                                            <div className=\"employee-selector\">\n                                                <label>Select Second Employee:</label>\n                                                <Select\n                                                    className=\"employee-dropdown\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                                    onChange={(option) => setSecondEmployeeId(option?.value || '')}\n                                                    value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === secondEmployeeId) || null}\n                                                    placeholder=\"Choose employee\"\n                                                />\n                                            </div>\n                                            {secondStats && (\n                                                <div className=\"statistics-summary\">\n                                                    <p><strong>Total Night Shifts:</strong> {secondStats.nightShifts}</p>\n                                                    <p><strong>Total Shabbat Shifts:</strong> {secondStats.shabbatShifts}</p>\n                                                    <p><strong>Total Regular Shifts:</strong> {secondStats.regularShifts}</p>\n                                                    <p><strong>Total All Shifts:</strong> {secondStats.totalAll}</p>\n                                                    <hr />\n                                                    <p><strong>Average per Week:</strong></p>\n                                                    <p>Night: {secondStats.avgNight.toFixed(2)} ({((secondStats.nightShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>Shabbat: {secondStats.avgShabbat.toFixed(2)} ({((secondStats.shabbatShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>Regular: {secondStats.avgRegular.toFixed(2)} ({((secondStats.regularShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>All Shifts: {secondStats.avgAll.toFixed(2)}</p>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                    {stats && secondStats && (\n                                        <div className=\"chart-toggle-container\">\n                                            <button\n                                                className=\"show-chart-button\"\n                                                onClick={() => setShowCharts(!showCharts)}\n                                            >\n                                                {showCharts ? 'Hide Chart' : 'Show Chart'}\n                                            </button>\n\n                                            {showCharts && (\n                                                <div className=\"statistics-comparison-chart\">\n                                                    <BarChart width={500} height={300} data={[\n                                                        {\n                                                            name: 'Night',\n                                                            [getEmployeeNameById(selectedEmployeeId)]: stats.nightShifts,\n                                                            [getEmployeeNameById(secondEmployeeId)]: secondStats.nightShifts\n                                                        },\n                                                        {\n                                                            name: 'Shabbat',\n                                                            [getEmployeeNameById(selectedEmployeeId)]: stats.shabbatShifts,\n                                                            [getEmployeeNameById(secondEmployeeId)]: secondStats.shabbatShifts\n                                                        },\n                                                        {\n                                                            name: 'Regular',\n                                                            [getEmployeeNameById(selectedEmployeeId)]: stats.regularShifts,\n                                                            [getEmployeeNameById(secondEmployeeId)]: secondStats.regularShifts\n                                                        }\n                                                    ]}>\n                                                        <XAxis dataKey=\"name\" />\n                                                        <YAxis allowDecimals={false} />\n                                                        <Tooltip />\n                                                        <Legend />\n                                                        <Bar dataKey={getEmployeeNameById(secondEmployeeId)} fill=\"#e67e22\" />\n                                                        <Bar dataKey={getEmployeeNameById(selectedEmployeeId)} fill=\"#3498db\" />\n                                                    </BarChart>\n                                                </div>\n                                            )}\n                                        </div>\n                                    )}\n\n                                </div>\n\n                            ) : mode === 'table' ? (\n                                <div className=\"table-container\">\n                                    <table className=\"statistics-table\">\n                                        <thead>\n                                            <tr>\n                                                {[\n                                                    { key: 'name', label: 'Name' },\n                                                    { key: 'night', label: 'Night' },\n                                                    { key: 'shabbat', label: 'Shabbat' },\n                                                    { key: 'regular', label: 'Regular' },\n                                                    { key: 'total', label: 'Total' },\n                                                    { key: 'avgNight', label: 'Avg Night' },\n                                                    { key: 'avgShabbat', label: 'Avg Shabbat' },\n                                                    { key: 'avgRegular', label: 'Avg Regular' },\n                                                    { key: 'avgTotal', label: 'Avg Total' },\n                                                ].map(({ key, label }) => (\n                                                    <th\n                                                        key={key}\n                                                        onClick={() => {\n                                                            if (sortKey === key) {\n                                                                setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc');\n                                                            } else {\n                                                                setSortKey(key);\n                                                                setSortDirection('desc');\n                                                            }\n                                                        }}\n                                                        style={{ cursor: 'pointer' }}\n                                                    >\n                                                        {label} {sortKey === key && (sortDirection === 'asc' ? '🔼' : '🔽')}\n                                                    </th>\n                                                ))}\n                                            </tr>\n                                        </thead>\n\n                                        <tbody>\n                                            {sortedStats.map((stat) => (\n                                                <tr key={stat.id}>\n                                                    <td>{stat.name}</td>\n                                                    <td>{stat.night}</td>\n                                                    <td>{stat.shabbat}</td>\n                                                    <td>{stat.regular}</td>\n                                                    <td>{stat.total}</td>\n                                                    <td>{stat.avgNight}</td>\n                                                    <td>{stat.avgShabbat}</td>\n                                                    <td>{stat.avgRegular}</td>\n                                                    <td>{stat.avgTotal}</td>\n                                                </tr>\n                                            ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            ) : (\n                                <div className=\"single-container\">\n                                    <div className=\"employee-comparison-box\">\n                                        <div className=\"employee-selector\">\n                                            <label>Select Employee:</label>\n                                            <Select\n                                                className=\"employee-dropdown\"\n                                                classNamePrefix=\"react-select\"\n                                                options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                                onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                                value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                                                placeholder=\"Choose employee\"\n                                            />\n                                        </div>\n                                        {stats && (\n                                            <div className=\"statistics-summary-wrapper\">\n                                                <div className=\"statistics-summary\">\n                                                    <p><strong>Total Night Shifts:</strong> {stats.nightShifts}</p>\n                                                    <p><strong>Total Shabbat Shifts:</strong> {stats.shabbatShifts}</p>\n                                                    <p><strong>Total Regular Shifts:</strong> {stats.regularShifts}</p>\n                                                    <p><strong>Total All Shifts:</strong> {stats.totalAll}</p>\n                                                    <hr />\n                                                    <p><strong>Average per Week:</strong></p>\n                                                    <p>Night: {stats.avgNight.toFixed(2)} ({((stats.nightShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>Shabbat: {stats.avgShabbat.toFixed(2)} ({((stats.shabbatShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>Regular: {stats.avgRegular.toFixed(2)} ({((stats.regularShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                                    <p>All Shifts: {stats.avgAll.toFixed(2)}</p>\n                                                </div>\n\n                                                <div className=\"chart-toggle-container\">\n                                                    <button\n                                                        className=\"show-chart-button\"\n                                                        onClick={() => setShowCharts(!showCharts)}\n                                                    >\n                                                        {showCharts ? 'Hide Chart' : 'Show Chart'}\n                                                    </button>\n\n                                                    {showCharts && (\n                                                        <div className=\"statistics-chart\">\n                                                            <BarChart width={400} height={300} data={[\n                                                                { name: 'Night', value: stats.nightShifts },\n                                                                { name: 'Shabbat', value: stats.shabbatShifts },\n                                                                { name: 'Regular', value: stats.regularShifts }\n                                                            ]}>\n                                                                <XAxis dataKey=\"name\" />\n                                                                <YAxis allowDecimals={false} />\n                                                                <Tooltip />\n                                                                <Legend />\n                                                                <Bar dataKey=\"value\" fill=\"#2980b9\" />\n                                                            </BarChart>\n                                                        </div>\n                                                    )}\n                                                </div>\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <ToastContainer />\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default StatisticsScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}