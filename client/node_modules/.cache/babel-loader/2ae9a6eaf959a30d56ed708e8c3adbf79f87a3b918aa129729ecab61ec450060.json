{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities, getNecessaryEmployees } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, calculatePreviousDay, calculateNextDay, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n  const [highlightedUser, setHighlightedUser] = useState(null);\n  const [selectedUserNotes, setSelectedUserNotes] = useState('');\n  const [shiftCounts, setShiftCounts] = useState({});\n  const [necessaryEmployees, setNecessaryEmployees] = useState({});\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת זמינות, משתמשים ו-necessaryEmployees\n        const [availabilityData, usersData, necessaryEmployeesData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers(), getNecessaryEmployees(companyId, weekKey) // שליפת necessaryEmployees\n        ]);\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n        setNecessaryEmployees(necessaryEmployeesData || {}); // שמירת necessaryEmployees ב-state\n\n        // חישוב תאריכים לשבוע הנוכחי\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = (status, userId) => {\n    if (highlightedUser === userId) return 'highlighted-user'; // הדגשת משתמש\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleEmployeeClick = async userId => {\n    if (highlightedUser === userId) {\n      setHighlightedUser(null);\n      setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n      return;\n    }\n    setHighlightedUser(userId);\n    if (currentCompany && userId) {\n      try {\n        var _availabilityData$use;\n        const weekKey = calculateWeekKey(weekOffset);\n        const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n        const userNotes = (availabilityData === null || availabilityData === void 0 ? void 0 : (_availabilityData$use = availabilityData[userId]) === null || _availabilityData$use === void 0 ? void 0 : _availabilityData$use.notes) || 'No notes available.';\n        setSelectedUserNotes(userNotes);\n      } catch (err) {\n        console.error('Failed to fetch notes:', err);\n        setSelectedUserNotes('Error fetching notes.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (Object.keys(availability).length > 0) {\n      updateShiftCounts();\n    }\n  }, [availability]);\n  const updateShiftCounts = () => {\n    const counts = {};\n    Object.entries(availability).forEach(([userId, shifts]) => {\n      counts[userId] = Object.values(shifts).reduce((sum, dayShifts) => sum + Object.values(dayShifts).filter(shift => shift.status === 'selected').length, 0);\n    });\n    setShiftCounts(counts);\n  };\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n\n      // Update the current shift's status to 'selected' or 'default'\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        // Disable other shifts on the same day\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n\n        // Handle unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        // Undo selection and revert unique rules\n        await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n        // Revert unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n\n      // Update state with the modified availability\n      setAvailability(updatedAvailability);\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  const employeesWithAvailability = Object.entries(users).filter(([userId]) => availability[userId] && Object.values(availability[userId]).some(shifts => Object.values(shifts).some(shift => shift.status === 'selected' || shift.status === 'default')));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(-1),\n          children: \"Previous Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"week-range\",\n          children: calculateWeekRange(weekOffset)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(1),\n          children: \"Next Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading schedule...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"schedule-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Shift\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 37\n              }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 55\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"date\",\n                  children: weekDates[index]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 49\n                }, this)]\n              }, day, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 45\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: shift\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 41\n              }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                var _necessaryEmployees$d;\n                const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                  var _userData$shift;\n                  const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n                  return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                }).length;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    min: \"0\",\n                    className: \"necessary-employees-input\",\n                    value: (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d = necessaryEmployees[day]) === null || _necessaryEmployees$d === void 0 ? void 0 : _necessaryEmployees$d[shift]) || 0 // ערך ברירת מחדל מתוך necessaryEmployees\n                    ,\n                    onChange: e => {\n                      const updatedNecessaryEmployees = {\n                        ...necessaryEmployees\n                      };\n                      if (!updatedNecessaryEmployees[day]) {\n                        updatedNecessaryEmployees[day] = {};\n                      }\n                      updatedNecessaryEmployees[day][shift] = parseInt(e.target.value, 10) || 0;\n                      setNecessaryEmployees(updatedNecessaryEmployees); // עדכון ה-state\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"selected-employees-indicator\",\n                    children: [selectedEmployeesCount, \" Selected\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 53\n                  }, this), Object.entries(availability).map(([userId, userData]) => {\n                    var _userData$shift2;\n                    const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift2 = userData[shift]) === null || _userData$shift2 === void 0 ? void 0 : _userData$shift2[day];\n                    if (availabilityInfo !== null && availabilityInfo !== void 0 && availabilityInfo.isAvailable) {\n                      var _users$userId;\n                      const statusClass = getStatusClass(availabilityInfo.status, userId);\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: `availability-entry ${statusClass}`,\n                        onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                        style: {\n                          backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ffff',\n                          color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                          pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                          cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                        },\n                        children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                      }, userId, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 256,\n                        columnNumber: 65\n                      }, this);\n                    }\n                    return null;\n                  })]\n                }, day, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 49\n                }, this);\n              })]\n            }, shift, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employees-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Employees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: employeesWithAvailability.map(([userId, user]) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => handleEmployeeClick(userId),\n              className: highlightedUser === userId ? 'selected' : '',\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employee-details\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"employee-name\",\n                  children: [user.name, \" - \", shiftCounts[userId] || 0, \" shifts\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 45\n                }, this), highlightedUser === userId && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"employee-notes\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: \"Notes:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: selectedUserNotes || 'No notes available.'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 41\n              }, this)\n            }, userId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"3tNOdaZKgKNQon0CfPQnPjJlLDc=\");\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","getAllAvailabilities","getNecessaryEmployees","getUsers","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","calculatePreviousDay","calculateNextDay","handleOtherShiftsOfDayWhenDeselectAShift","updateAvailabilityStatus","Navbar","jsxDEV","_jsxDEV","ScheduleScreen","_s","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","highlightedUser","setHighlightedUser","selectedUserNotes","setSelectedUserNotes","shiftCounts","setShiftCounts","necessaryEmployees","setNecessaryEmployees","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","JSON","parse","localStorage","getItem","companyId","company","id","weekKey","availabilityData","usersData","necessaryEmployeesData","Promise","all","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","console","handleWeekChange","direction","prevOffset","getStatusClass","status","userId","handleEmployeeClick","_availabilityData$use","userNotes","notes","Object","keys","updateShiftCounts","counts","entries","forEach","shifts","values","reduce","sum","dayShifts","filter","shift","handleStatusUpdate","day","currentStatus","newStatus","updatedAvailability","otherShift","employeesWithAvailability","some","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","index","_necessaryEmployees$d","selectedEmployeesCount","userData","_userData$shift","availabilityInfo","type","min","value","onChange","e","updatedNecessaryEmployees","parseInt","target","_userData$shift2","isAvailable","_users$userId","statusClass","style","backgroundColor","color","pointerEvents","cursor","name","user","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities, getNecessaryEmployees } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, calculatePreviousDay, calculateNextDay, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n    const [highlightedUser, setHighlightedUser] = useState(null);\n    const [selectedUserNotes, setSelectedUserNotes] = useState('');\n    const [shiftCounts, setShiftCounts] = useState({});\n    const [necessaryEmployees, setNecessaryEmployees] = useState({});\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת זמינות, משתמשים ו-necessaryEmployees\n                const [availabilityData, usersData, necessaryEmployeesData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers(),\n                    getNecessaryEmployees(companyId, weekKey), // שליפת necessaryEmployees\n                ]);\n\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n                setNecessaryEmployees(necessaryEmployeesData || {}); // שמירת necessaryEmployees ב-state\n\n                // חישוב תאריכים לשבוע הנוכחי\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n                });\n                setWeekDates(dates);\n\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status, userId) => {\n        if (highlightedUser === userId) return 'highlighted-user'; // הדגשת משתמש\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n\n    const handleEmployeeClick = async (userId) => {\n        if (highlightedUser === userId) {\n            setHighlightedUser(null);\n            setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n            return;\n        }\n\n        setHighlightedUser(userId);\n\n        if (currentCompany && userId) {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n\n                const userNotes = availabilityData?.[userId]?.notes || 'No notes available.';\n                setSelectedUserNotes(userNotes);\n            } catch (err) {\n                console.error('Failed to fetch notes:', err);\n                setSelectedUserNotes('Error fetching notes.');\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (Object.keys(availability).length > 0) {\n            updateShiftCounts();\n        }\n    }, [availability]);\n\n    const updateShiftCounts = () => {\n        const counts = {};\n        Object.entries(availability).forEach(([userId, shifts]) => {\n            counts[userId] = Object.values(shifts).reduce(\n                (sum, dayShifts) =>\n                    sum +\n                    Object.values(dayShifts).filter((shift) => shift.status === 'selected').length,\n                0\n            );\n        });\n        setShiftCounts(counts);\n    };\n\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            // Update the current shift's status to 'selected' or 'default'\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                // Disable other shifts on the same day\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                // Handle unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                // Undo selection and revert unique rules\n                await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n                // Revert unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            // Update state with the modified availability\n            setAvailability(updatedAvailability);\n\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    const employeesWithAvailability = Object.entries(users).filter(([userId]) =>\n        availability[userId] && Object.values(availability[userId]).some((shifts) =>\n            Object.values(shifts).some((shift) => shift.status === 'selected' || shift.status === 'default')\n        )\n    );\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div> {/* רווח לניווט */}\n\n            <div className=\"schedule-container\">\n                <h2>Weekly Schedule</h2>\n                <div className=\"week-navigation\">\n                    <button onClick={() => handleWeekChange(-1)}>Previous Week</button>\n                    <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                    <button onClick={() => handleWeekChange(1)}>Next Week</button>\n                </div>\n\n                {isLoading ? (\n                    <p>Loading schedule...</p>\n                ) : error ? (\n                    <p className=\"error\">{error}</p>\n                ) : (\n                    <div className=\"schedule-content\">\n                        <table className=\"schedule-table\">\n                            <thead>\n                                <tr>\n                                    <th>Shift</th>\n                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                        (day, index) => (\n                                            <th key={day}>\n                                                {day} <br />\n                                                <span className=\"date\">{weekDates[index]}</span>\n                                            </th>\n                                        )\n                                    )}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                    <tr key={shift}>\n                                        <td>{shift}</td>\n                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                            const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                                                const availabilityInfo = userData?.[shift]?.[day];\n                                                return availabilityInfo?.status === 'selected';\n                                            }).length;\n\n                                            return (\n                                                <td key={day}>\n                                                    {/* Input field for necessary employees */}\n                                                    <input\n                                                        type=\"number\"\n                                                        min=\"0\"\n                                                        className=\"necessary-employees-input\"\n                                                        value={necessaryEmployees?.[day]?.[shift] || 0} // ערך ברירת מחדל מתוך necessaryEmployees\n                                                        onChange={(e) => {\n                                                            const updatedNecessaryEmployees = { ...necessaryEmployees };\n                                                            if (!updatedNecessaryEmployees[day]) {\n                                                                updatedNecessaryEmployees[day] = {};\n                                                            }\n                                                            updatedNecessaryEmployees[day][shift] = parseInt(e.target.value, 10) || 0;\n                                                            setNecessaryEmployees(updatedNecessaryEmployees); // עדכון ה-state\n                                                        }}\n                                                    />\n\n                                                    {/* Indicator for selected employees */}\n                                                    <div className=\"selected-employees-indicator\">\n                                                        {selectedEmployeesCount} Selected\n                                                    </div>\n                                                    {Object.entries(availability).map(([userId, userData]) => {\n                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                        if (availabilityInfo?.isAvailable) {\n                                                            const statusClass = getStatusClass(availabilityInfo.status, userId);\n                                                            return (\n                                                                <div\n                                                                    key={userId}\n                                                                    className={`availability-entry ${statusClass}`}\n                                                                    onClick={() =>\n                                                                        handleStatusUpdate(\n                                                                            userId,\n                                                                            shift,\n                                                                            day,\n                                                                            availabilityInfo.status\n                                                                        )\n                                                                    }\n                                                                    style={{\n                                                                        backgroundColor:\n                                                                            availabilityInfo.status === 'selected'\n                                                                                ? '#2ecc71'\n                                                                                : availabilityInfo.status === 'disabled'\n                                                                                    ? '#e74c3c'\n                                                                                    : '#ffff',\n                                                                        color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                        pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                        cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                    }}\n                                                                >\n                                                                    {users[userId]?.name || 'Unknown'}\n                                                                </div>\n                                                            );\n                                                        }\n                                                        return null;\n                                                    })}\n                                                </td>\n                                            );\n                                        })}\n                                    </tr>\n                                ))}\n\n\n                            </tbody>\n                        </table>\n\n                        <div className=\"employees-list\">\n                            <h3>Employees</h3>\n                            <ul>\n                                {employeesWithAvailability.map(([userId, user]) => (\n                                    <li\n                                        key={userId}\n                                        onClick={() => handleEmployeeClick(userId)}\n                                        className={highlightedUser === userId ? 'selected' : ''}\n                                    >\n                                        <div className=\"employee-details\">\n                                            <span className=\"employee-name\">\n                                                {user.name} - {shiftCounts[userId] || 0} shifts\n                                            </span>\n                                            {highlightedUser === userId && (\n                                                <div className=\"employee-notes\">\n                                                    <h4>Notes:</h4>\n                                                    <p>{selectedUserNotes || 'No notes available.'}</p>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </li>\n                                ))}\n                            </ul>\n\n                        </div>\n                    </div>\n                )}\n            </div>\n\n        </div>\n    );\n}\n\nexport default ScheduleScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}