{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\n// External libraries\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// Components\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport Navbar from '../components/Navbar';\n\n// Icons\nimport { FaChevronLeft, FaChevronRight, FaCalendarCheck, FaEdit } from 'react-icons/fa';\n\n// Services\nimport { updateAvailabilityStatus, getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets, fetchPublishStatus, savePublishStatus, saveEditStatus, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { sendNotification } from '../services/notificationService';\n\n// Utilities\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\n\n// Third-party Libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Styles\nimport '../styles/ScheduleScreen.css';\nimport { saveWeeklyStats } from '../services/statsService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  var _users$secondSelected, _loggedInUser$user3, _availability$shiftOf, _availability$shiftOf2, _availability$shiftOf3, _users$shiftOfferPara, _users$shiftOfferPara2, _users$shiftOfferPara3, _users$shiftOfferPara4, _users$shiftOfferPara5;\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const initialWeekOffset = parseInt(queryParams.get('weekOffset'), 10) || 0;\n  const [weekOffset, setWeekOffset] = useState(initialWeekOffset);\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]);\n  const [highlightedUser, setHighlightedUser] = useState(null);\n  const [selectedUserNotes, setSelectedUserNotes] = useState('');\n  const [shiftCounts, setShiftCounts] = useState({});\n  const [necessaryEmployees, setNecessaryEmployees] = useState({});\n  const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n  const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n  const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n  const [totalWeeklyTargets, setTotalWeeklyTargets] = useState(0);\n  const [isPublished, setIsPublished] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isEditAllowed, setIsEditAllowed] = useState(false);\n  const [mostCriticalShifts, setMostCriticalShifts] = useState([]);\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n  const [isConfirmingPublish, setIsConfirmingPublish] = useState(false);\n  const [isConfirmingEdit, setIsConfirmingEdit] = useState(false);\n  const [isWarningVisible, setIsWarningVisible] = useState(false);\n  const [isViewingAsEmployee, setIsViewingAsEmployee] = useState(false);\n  const [selectedShiftToSwap, setSelectedShiftToSwap] = useState(null);\n  const [offerToUserId, setOfferToUserId] = useState('');\n  const [shiftOfferParams, setShiftOfferParams] = useState(null);\n  const [hasCheckedShiftOffer, setHasCheckedShiftOffer] = useState(false);\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [secondSelectedShift, setSecondSelectedShift] = useState(null);\n  const shabbatShiftsSet = new Set(['Friday|Evening', 'Friday|Night', 'Saturday|Morning', 'Saturday|Noon', 'Saturday|Evening']);\n  function calculateShiftStats(availability, userId) {\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    let nightShifts = 0;\n    let shabbatShifts = 0;\n    let regularShifts = 0;\n    for (const day of days) {\n      for (const shift of shifts) {\n        var _availability$userId, _availability$userId$;\n        const shiftData = (_availability$userId = availability[userId]) === null || _availability$userId === void 0 ? void 0 : (_availability$userId$ = _availability$userId[shift]) === null || _availability$userId$ === void 0 ? void 0 : _availability$userId$[day];\n        if ((shiftData === null || shiftData === void 0 ? void 0 : shiftData.status) === 'selected') {\n          const key = `${day}|${shift}`;\n          if (shabbatShiftsSet.has(key)) {\n            shabbatShifts++;\n          } else if (shift === 'Night') {\n            nightShifts++;\n          } else {\n            regularShifts++;\n          }\n        }\n      }\n    }\n    return {\n      nightShifts,\n      shabbatShifts,\n      regularShifts\n    };\n  }\n  useEffect(() => {\n    window.scrollTo({\n      top: 0\n    });\n  }, []);\n  useEffect(() => {\n    const userFromStorage = JSON.parse(localStorage.getItem('user'));\n    setLoggedInUser(userFromStorage);\n    setIsAdmin((userFromStorage === null || userFromStorage === void 0 ? void 0 : userFromStorage.user.role) === 'admin');\n    setHighlightedUser(userFromStorage === null || userFromStorage === void 0 ? void 0 : userFromStorage.user.id);\n  }, []);\n  useEffect(() => {\n    if (isPublished && !isScheduleFullyStaffed()) {\n      setIsWarningVisible(true);\n    } else {\n      setIsWarningVisible(false);\n    }\n  }, [availability, necessaryEmployees, isPublished]);\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n        const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers(), getNecessaryEmployees(companyId, weekKey), getWeeklyShiftTargets(companyId, weekKey)]);\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n        setNecessaryEmployees(necessaryEmployeesData || {});\n        calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n        const updatedWeeklyTargets = {\n          ...weeklyTargetsData\n        };\n        Object.values(usersData).forEach(user => {\n          if (!(user !== null && user !== void 0 && user.id)) {\n            console.warn(\"User without ID found:\", user);\n            return;\n          }\n          if (!updatedWeeklyTargets[user.id]) {\n            updatedWeeklyTargets[user.id] = 0;\n          }\n        });\n        setWeeklyShiftTargets(updatedWeeklyTargets);\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB');\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeeklyShiftTargetChange = async (userId, value) => {\n    const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n    if (parsedValue < shiftCounts[userId]) {\n      console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n      return;\n    }\n    const updatedTargets = {\n      ...weeklyShiftTargets,\n      [userId]: parsedValue\n    };\n    setWeeklyShiftTargets(updatedTargets);\n    const total = Object.values(updatedTargets).reduce((sum, target) => sum + (target || 0), 0);\n    setTotalWeeklyTargets(total);\n    const cleanedTargets = Object.fromEntries(Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees'));\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n    } catch (error) {\n      console.error('Failed to save weekly shift targets:', error);\n    }\n  };\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = (status, userId, shift, day) => {\n    var _necessaryEmployees$d;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d = necessaryEmployees[day]) === null || _necessaryEmployees$d === void 0 ? void 0 : _necessaryEmployees$d[shift]) || 0;\n    if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled';\n    }\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n    if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled';\n    }\n    if (highlightedUser === userId) {\n      return status === 'disabled' ? 'status-disabled highlighted-user' : `highlighted-user ${status}`;\n    }\n    if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled';\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleEmployeeClick = async userId => {\n    if (highlightedUser === userId) {\n      setHighlightedUser(null);\n      setSelectedUserNotes('');\n      return;\n    }\n    setSelectedUserNotes('');\n    setHighlightedUser(userId);\n    if (currentCompany && userId) {\n      try {\n        var _availabilityData$use;\n        const weekKey = calculateWeekKey(weekOffset);\n        const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n        const userNotes = (availabilityData === null || availabilityData === void 0 ? void 0 : (_availabilityData$use = availabilityData[userId]) === null || _availabilityData$use === void 0 ? void 0 : _availabilityData$use.notes) || 'No notes available.';\n        setSelectedUserNotes(userNotes);\n      } catch (err) {\n        console.error('Failed to fetch notes:', err);\n        setSelectedUserNotes('Error fetching notes.');\n      }\n    }\n  };\n  useEffect(() => {\n    if (Object.keys(availability).length > 0) {\n      updateShiftCounts();\n    }\n  }, [availability]);\n  const updateShiftCounts = () => {\n    const counts = {};\n    let totalShifts = 0;\n    Object.entries(availability).forEach(([userId, shifts]) => {\n      const userShiftCount = Object.values(shifts).reduce((sum, dayShifts) => sum + Object.values(dayShifts).filter(shift => shift.status === 'selected').length, 0);\n      counts[userId] = userShiftCount;\n      totalShifts += userShiftCount;\n    });\n    setShiftCounts(counts);\n    setTotalAssignedShifts(totalShifts);\n  };\n  useEffect(() => {\n    const saveNecessaryEmployeesToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n        if (Object.keys(necessaryEmployees).length > 0) {\n          await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n        }\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n    if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n      saveNecessaryEmployeesToDB();\n    }\n  }, [necessaryEmployees, currentCompany]);\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    var _necessaryEmployees$d2;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift2;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift2 = userData[shift]) === null || _userData$shift2 === void 0 ? void 0 : _userData$shift2[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    const maxNecessaryEmployees = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d2 = necessaryEmployees[day]) === null || _necessaryEmployees$d2 === void 0 ? void 0 : _necessaryEmployees$d2[shift]) || 0;\n    if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n      console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n      return;\n    }\n    const currentShiftCount = shiftCounts[userId] || 0;\n    const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n    if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n      console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n      return;\n    }\n    if (currentStatus === 'disabled') return;\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n      setAvailability(updatedAvailability);\n      updateShiftCounts();\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  const employeesWithAvailability = Object.entries(users).filter(([userId]) => availability[userId] && Object.values(availability[userId]).some(shifts => Object.values(shifts).some(shift => shift.status === 'selected' || shift.status === 'default'))).sort(([userIdA], [userIdB]) => {\n    var _users$userIdA, _users$userIdA$name, _users$userIdB, _users$userIdB$name;\n    const nameA = ((_users$userIdA = users[userIdA]) === null || _users$userIdA === void 0 ? void 0 : (_users$userIdA$name = _users$userIdA.name) === null || _users$userIdA$name === void 0 ? void 0 : _users$userIdA$name.toLowerCase()) || '';\n    const nameB = ((_users$userIdB = users[userIdB]) === null || _users$userIdB === void 0 ? void 0 : (_users$userIdB$name = _users$userIdB.name) === null || _users$userIdB$name === void 0 ? void 0 : _users$userIdB$name.toLowerCase()) || '';\n    return nameA.localeCompare(nameB);\n  });\n  const handleNecessaryEmployeesChange = (day, shift, value) => {\n    const updatedNecessaryEmployees = {\n      ...necessaryEmployees\n    };\n    if (!updatedNecessaryEmployees[day]) {\n      updatedNecessaryEmployees[day] = {};\n    }\n    const parsedValue = parseInt(value, 10) || 0;\n    const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift3;\n      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift3 = userData[shift]) === null || _userData$shift3 === void 0 ? void 0 : _userData$shift3[day];\n      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n    }).length;\n    if (parsedValue < selectedEmployeesCount) {\n      return;\n    }\n    updatedNecessaryEmployees[day][shift] = parsedValue;\n    setNecessaryEmployees(updatedNecessaryEmployees);\n    calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n    const saveToDB = async () => {\n      try {\n        const weekKey = calculateWeekKey(weekOffset);\n        await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n      } catch (error) {\n        console.error('Failed to save necessary employees:', error);\n      }\n    };\n    saveToDB();\n  };\n  const calculateTotalNecessaryEmployees = necessaryEmployeesData => {\n    let total = 0;\n    Object.values(necessaryEmployeesData).forEach(dayData => {\n      Object.values(dayData).forEach(shiftCount => {\n        total += shiftCount || 0;\n      });\n    });\n    setTotalNecessaryEmployees(total);\n  };\n  useEffect(() => {\n    const total = Object.values(weeklyShiftTargets).reduce((sum, target) => sum + (target || 0), 0);\n    setTotalWeeklyTargets(total);\n  }, [weeklyShiftTargets]);\n  const togglePublishStatus = async () => {\n    if (!isPublished && !isScheduleFullyStaffed()) {\n      alert('Cannot publish schedule: not all shifts are fully staffed.');\n      return;\n    }\n    try {\n      const newStatus = !isPublished;\n      const weekKey = calculateWeekKey(weekOffset);\n      await savePublishStatus(currentCompany, weekKey, newStatus);\n      if (newStatus) {\n        const employeeList = Object.entries(users).filter(([_, u]) => ['employee', 'admin'].includes(u.role));\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = now.getMonth() + 1;\n        for (const [employeeId] of employeeList) {\n          const {\n            nightShifts,\n            shabbatShifts,\n            regularShifts\n          } = calculateShiftStats(availability, employeeId);\n          await saveWeeklyStats(currentCompany, year, month, weekKey, employeeId, {\n            nightShifts,\n            shabbatShifts,\n            regularShifts\n          });\n        }\n        const weekRange = calculateWeekRange(weekOffset);\n        const notificationLink = `/schedule?weekOffset=${weekOffset}`;\n        for (const [employeeId] of employeeList) {\n          await sendNotification(currentCompany, employeeId, `Weekly schedule for ${weekRange} has been published.`, notificationLink);\n        }\n      }\n      setIsPublished(newStatus);\n    } catch (error) {\n      console.error('Failed to toggle publish status:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchPublishStatusFromDB = async () => {\n      try {\n        var _status$status;\n        const weekKey = calculateWeekKey(weekOffset);\n        const status = await fetchPublishStatus(currentCompany, weekKey);\n        setIsPublished((_status$status = status === null || status === void 0 ? void 0 : status.status) !== null && _status$status !== void 0 ? _status$status : false);\n      } catch (error) {\n        console.error('Failed to fetch publish status:', error);\n      }\n    };\n    if (currentCompany) {\n      fetchPublishStatusFromDB();\n    }\n  }, [currentCompany, weekOffset]);\n  const isScheduleFullyStaffed = () => {\n    for (const day of Object.keys(necessaryEmployees || {})) {\n      for (const shift of Object.keys(necessaryEmployees[day] || {})) {\n        const requiredCount = necessaryEmployees[day][shift] || 0;\n        const selectedCount = Object.entries(availability).filter(([_, userData]) => {\n          var _userData$shift4;\n          const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift4 = userData[shift]) === null || _userData$shift4 === void 0 ? void 0 : _userData$shift4[day];\n          return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n        }).length;\n        if (selectedCount !== requiredCount) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const isPublishButtonDisabled = !isScheduleFullyStaffed() && !isPublished;\n  const hasWeeklyNotes = userId => {\n    const userAvailability = availability[userId];\n    return userAvailability && userAvailability.notes && userAvailability.notes.trim() !== '';\n  };\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    setIsAdmin((loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.role) === 'admin');\n    setHighlightedUser(loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.user.id);\n  }, []);\n  const toggleEditStatus = async () => {\n    try {\n      const newStatus = !isEditAllowed;\n      const weekKey = calculateWeekKey(weekOffset);\n      await saveEditStatus(currentCompany, weekKey, newStatus);\n      setIsEditAllowed(newStatus);\n    } catch (error) {\n      console.error('Failed to toggle edit status:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchEditStatusFromDB = async () => {\n      try {\n        var _status$isEditAllowed;\n        const weekKey = calculateWeekKey(weekOffset);\n        const status = await fetchEditStatus(currentCompany, weekKey);\n        setIsEditAllowed((_status$isEditAllowed = status === null || status === void 0 ? void 0 : status.isEditAllowed) !== null && _status$isEditAllowed !== void 0 ? _status$isEditAllowed : false);\n      } catch (error) {\n        console.error('Failed to fetch edit status:', error);\n      }\n    };\n    if (currentCompany) {\n      fetchEditStatusFromDB();\n    }\n  }, [currentCompany, weekOffset]);\n  const calculateShiftCriticality = (day, shift) => {\n    var _necessaryEmployees$d3;\n    const necessary = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d3 = necessaryEmployees[day]) === null || _necessaryEmployees$d3 === void 0 ? void 0 : _necessaryEmployees$d3[shift]) || 0;\n    const selected = Object.values(availability).filter(userData => {\n      var _userData$shift5, _userData$shift5$day;\n      return (userData === null || userData === void 0 ? void 0 : (_userData$shift5 = userData[shift]) === null || _userData$shift5 === void 0 ? void 0 : (_userData$shift5$day = _userData$shift5[day]) === null || _userData$shift5$day === void 0 ? void 0 : _userData$shift5$day.status) === 'selected';\n    }).length;\n    const defaults = Object.entries(availability).filter(([_, userData]) => {\n      var _userData$shift6, _userData$shift6$day, _userData$shift7, _userData$shift7$day;\n      const status = userData === null || userData === void 0 ? void 0 : (_userData$shift6 = userData[shift]) === null || _userData$shift6 === void 0 ? void 0 : (_userData$shift6$day = _userData$shift6[day]) === null || _userData$shift6$day === void 0 ? void 0 : _userData$shift6$day.status;\n      return (userData === null || userData === void 0 ? void 0 : (_userData$shift7 = userData[shift]) === null || _userData$shift7 === void 0 ? void 0 : (_userData$shift7$day = _userData$shift7[day]) === null || _userData$shift7$day === void 0 ? void 0 : _userData$shift7$day.isAvailable) && status !== 'selected' && status !== 'disabled';\n    }).length;\n    if (necessary === selected) return 0;\n    return (necessary - selected) / Math.pow(defaults + 1, 2);\n  };\n  const findMostCriticalShifts = () => {\n    let highestCriticality = -Infinity;\n    let criticalShifts = [];\n    Object.keys(necessaryEmployees || {}).forEach(day => {\n      Object.keys(necessaryEmployees[day] || {}).forEach(shift => {\n        var _necessaryEmployees$d4;\n        const criticality = calculateShiftCriticality(day, shift);\n        const necessary = (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d4 = necessaryEmployees[day]) === null || _necessaryEmployees$d4 === void 0 ? void 0 : _necessaryEmployees$d4[shift]) || 0;\n        const selected = Object.values(availability).filter(userData => {\n          var _userData$shift8, _userData$shift8$day;\n          return (userData === null || userData === void 0 ? void 0 : (_userData$shift8 = userData[shift]) === null || _userData$shift8 === void 0 ? void 0 : (_userData$shift8$day = _userData$shift8[day]) === null || _userData$shift8$day === void 0 ? void 0 : _userData$shift8$day.status) === 'selected';\n        }).length;\n        if (necessary === selected) return;\n        if (criticality > highestCriticality) {\n          highestCriticality = criticality;\n          criticalShifts = [{\n            day,\n            shift\n          }];\n        } else if (criticality === highestCriticality && criticality > 0) {\n          criticalShifts.push({\n            day,\n            shift\n          });\n        }\n      });\n    });\n    return criticalShifts;\n  };\n  useEffect(() => {\n    setMostCriticalShifts(findMostCriticalShifts());\n  }, [necessaryEmployees, availability]);\n  const openConfirmModal = actionType => {\n    if (actionType === 'publish') {\n      setIsConfirmingPublish(true);\n      setIsConfirmingEdit(false);\n    } else if (actionType === 'edit') {\n      setIsConfirmingEdit(true);\n      setIsConfirmingPublish(false);\n    }\n    setIsConfirmModalOpen(true);\n  };\n  const closeConfirmModal = () => {\n    setIsConfirmModalOpen(false);\n  };\n  const getUserShiftTable = userId => {\n    if (!availability[userId]) return [];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return shifts.map(shift => {\n      const row = {\n        shift: shift[0] + (shift === 'Night' ? 't' : '')\n      };\n      days.forEach(day => {\n        var _availability$userId2, _availability$userId3;\n        const shiftData = (_availability$userId2 = availability[userId]) === null || _availability$userId2 === void 0 ? void 0 : (_availability$userId3 = _availability$userId2[shift]) === null || _availability$userId3 === void 0 ? void 0 : _availability$userId3[day];\n        if ((shiftData === null || shiftData === void 0 ? void 0 : shiftData.status) === 'selected') {\n          row[day] = '✅';\n        } else if (shiftData !== null && shiftData !== void 0 && shiftData.isAvailable) {\n          row[day] = '🟠';\n        } else {\n          row[day] = '';\n        }\n      });\n      return row;\n    });\n  };\n  const handleOfferShift = async () => {\n    const weekKey = calculateWeekKey(weekOffset);\n    const shift = selectedShiftToSwap.shift;\n    const day = selectedShiftToSwap.day;\n    const fromUser = selectedShiftToSwap.userId;\n    const weekRange = calculateWeekRange(weekOffset);\n    let recipients = [];\n    if (offerToUserId) {\n      recipients.push(offerToUserId);\n    } else {\n      recipients = Object.entries(users).filter(([id, user]) => {\n        var _availability$id, _availability$id$Nigh, _availability$id$Nigh2, _availability$id2, _availability$id2$Mor, _availability$id2$Mor2, _availability$id3, _availability$id3$Noo, _availability$id3$Noo2;\n        if (id === fromUser) return false;\n        const currentShiftCount = shiftCounts[id] || 0;\n        if (currentShiftCount >= 6) return false;\n        const isAssignedThatDay = Object.values((availability === null || availability === void 0 ? void 0 : availability[id]) || {}).some(shiftData => {\n          var _shiftData$day;\n          return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$day = shiftData[day]) === null || _shiftData$day === void 0 ? void 0 : _shiftData$day.status) === 'selected';\n        });\n        if (isAssignedThatDay) return false;\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = days.indexOf(day);\n        const prev = days[currentIndex - 1];\n        const next = days[currentIndex + 1];\n        if (['Morning', 'Noon'].includes(shift) && prev && (availability === null || availability === void 0 ? void 0 : (_availability$id = availability[id]) === null || _availability$id === void 0 ? void 0 : (_availability$id$Nigh = _availability$id.Night) === null || _availability$id$Nigh === void 0 ? void 0 : (_availability$id$Nigh2 = _availability$id$Nigh[prev]) === null || _availability$id$Nigh2 === void 0 ? void 0 : _availability$id$Nigh2.status) === 'selected') return false;\n        if (shift === 'Night' && next && ((availability === null || availability === void 0 ? void 0 : (_availability$id2 = availability[id]) === null || _availability$id2 === void 0 ? void 0 : (_availability$id2$Mor = _availability$id2.Morning) === null || _availability$id2$Mor === void 0 ? void 0 : (_availability$id2$Mor2 = _availability$id2$Mor[next]) === null || _availability$id2$Mor2 === void 0 ? void 0 : _availability$id2$Mor2.status) === 'selected' || (availability === null || availability === void 0 ? void 0 : (_availability$id3 = availability[id]) === null || _availability$id3 === void 0 ? void 0 : (_availability$id3$Noo = _availability$id3.Noon) === null || _availability$id3$Noo === void 0 ? void 0 : (_availability$id3$Noo2 = _availability$id3$Noo[next]) === null || _availability$id3$Noo2 === void 0 ? void 0 : _availability$id3$Noo2.status) === 'selected')) return false;\n        return true;\n      }).map(([id]) => id);\n    }\n    for (const recipientId of recipients) {\n      var _users$fromUser;\n      const link = `/schedule?weekOffset=${weekOffset}&offerShift=true&offerDay=${day}&shift=${shift}&fromUser=${fromUser}&offeredTo=${recipientId}`;\n      await sendNotification(currentCompany, recipientId, `You are offered to take ${shift} shift on ${day} (Week: ${weekRange}) from ${((_users$fromUser = users[fromUser]) === null || _users$fromUser === void 0 ? void 0 : _users$fromUser.name) || 'a colleague'}.`, link);\n    }\n    toast.success('Shift offer sent successfully!');\n    setSelectedShiftToSwap(null);\n    setOfferToUserId('');\n  };\n  useEffect(() => {\n    var _loggedInUser$user;\n    if (hasCheckedShiftOffer || isLoading || !loggedInUser) return;\n    const offerShift = queryParams.get('offerShift');\n    const offerDay = queryParams.get('offerDay');\n    const offeredTo = queryParams.get('offeredTo');\n    const fromUser = queryParams.get('fromUser');\n    const shift = queryParams.get('shift');\n    if (offerShift === 'true' && offerDay && shift && fromUser && (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user = loggedInUser.user) === null || _loggedInUser$user === void 0 ? void 0 : _loggedInUser$user.id) === offeredTo) {\n      var _availability$fromUse, _availability$fromUse2, _availability$fromUse3;\n      const isStillOffered = (availability === null || availability === void 0 ? void 0 : (_availability$fromUse = availability[fromUser]) === null || _availability$fromUse === void 0 ? void 0 : (_availability$fromUse2 = _availability$fromUse[shift]) === null || _availability$fromUse2 === void 0 ? void 0 : (_availability$fromUse3 = _availability$fromUse2[offerDay]) === null || _availability$fromUse3 === void 0 ? void 0 : _availability$fromUse3.status) === 'selected';\n      if (!isStillOffered) {\n        toast.info('This shift offer is no longer available.');\n      } else {\n        setShiftOfferParams({\n          day: offerDay,\n          shift,\n          fromUser,\n          offeredTo,\n          weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0\n        });\n      }\n      setHasCheckedShiftOffer(true);\n    }\n  }, [location.search, availability, isLoading, loggedInUser]);\n  useEffect(() => {\n    const approve = queryParams.get('approveShiftTransfer');\n    const day = queryParams.get('day');\n    const shift = queryParams.get('shift');\n    const fromUser = queryParams.get('fromUser');\n    const toUser = queryParams.get('toUser');\n    if (approve === 'true' && day && shift && fromUser && toUser && isAdmin) {\n      setShiftOfferParams({\n        day,\n        shift,\n        fromUser,\n        offeredTo: toUser,\n        weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n        isAdminApproval: true\n      });\n    }\n  }, [location.search, isAdmin]);\n  const handleSwapProposal = async () => {\n    var _availability$me3, _availability$me3$Nig, _availability$me3$Nig2, _availability$them3, _availability$them3$N, _availability$them3$N2, _loggedInUser$user2, _Object$entries$find, _users$me, _users$them;\n    const {\n      shift: myShift,\n      day: myDay,\n      userId: me\n    } = selectedShiftToSwap;\n    const {\n      shift: theirShift,\n      day: theirDay,\n      userId: them\n    } = secondSelectedShift;\n    const weekKey = calculateWeekKey(weekOffset);\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const myDayIndex = daysOfWeek.indexOf(myDay);\n    const theirDayIndex = daysOfWeek.indexOf(theirDay);\n    const dayBeforeMyDay = daysOfWeek[myDayIndex - 1];\n    const dayBeforeTheirDay = daysOfWeek[theirDayIndex - 1];\n    const dayAfterMyDay = daysOfWeek[myDayIndex + 1];\n    const dayAfterTheirDay = daysOfWeek[theirDayIndex + 1];\n    const meAssignedOnTheirDay = Object.entries(availability[me] || {}).some(([_, shiftData]) => {\n      var _shiftData$theirDay;\n      return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$theirDay = shiftData[theirDay]) === null || _shiftData$theirDay === void 0 ? void 0 : _shiftData$theirDay.status) === 'selected';\n    });\n    const themAssignedOnMyDay = Object.entries(availability[them] || {}).some(([_, shiftData]) => {\n      var _shiftData$myDay;\n      return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$myDay = shiftData[myDay]) === null || _shiftData$myDay === void 0 ? void 0 : _shiftData$myDay.status) === 'selected';\n    });\n    const meMorningAfterTheirNight = theirShift === 'Night' && dayAfterTheirDay && ['Morning', 'Noon'].some(s => {\n      var _availability$me, _availability$me$s, _availability$me$s$da;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$me = availability[me]) === null || _availability$me === void 0 ? void 0 : (_availability$me$s = _availability$me[s]) === null || _availability$me$s === void 0 ? void 0 : (_availability$me$s$da = _availability$me$s[dayAfterTheirDay]) === null || _availability$me$s$da === void 0 ? void 0 : _availability$me$s$da.status) === 'selected';\n    });\n    const themMorningAfterMyNight = myShift === 'Night' && dayAfterMyDay && ['Morning', 'Noon'].some(s => {\n      var _availability$them, _availability$them$s, _availability$them$s$;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$them = availability[them]) === null || _availability$them === void 0 ? void 0 : (_availability$them$s = _availability$them[s]) === null || _availability$them$s === void 0 ? void 0 : (_availability$them$s$ = _availability$them$s[dayAfterMyDay]) === null || _availability$them$s$ === void 0 ? void 0 : _availability$them$s$.status) === 'selected';\n    });\n    const meNightAfterMorningBeforeTheirDay = theirShift === 'Night' && dayBeforeTheirDay && ['Morning', 'Noon'].some(s => {\n      var _availability$me2, _availability$me2$s, _availability$me2$s$d;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$me2 = availability[me]) === null || _availability$me2 === void 0 ? void 0 : (_availability$me2$s = _availability$me2[s]) === null || _availability$me2$s === void 0 ? void 0 : (_availability$me2$s$d = _availability$me2$s[dayBeforeTheirDay]) === null || _availability$me2$s$d === void 0 ? void 0 : _availability$me2$s$d.status) === 'selected';\n    });\n    const themNightAfterMorningBeforeMyDay = myShift === 'Night' && dayBeforeMyDay && ['Morning', 'Noon'].some(s => {\n      var _availability$them2, _availability$them2$s, _availability$them2$s2;\n      return (availability === null || availability === void 0 ? void 0 : (_availability$them2 = availability[them]) === null || _availability$them2 === void 0 ? void 0 : (_availability$them2$s = _availability$them2[s]) === null || _availability$them2$s === void 0 ? void 0 : (_availability$them2$s2 = _availability$them2$s[dayBeforeMyDay]) === null || _availability$them2$s2 === void 0 ? void 0 : _availability$them2$s2.status) === 'selected';\n    });\n    const meMorningAfterNightBeforeTheirDay = ['Morning', 'Noon'].includes(theirShift) && dayBeforeTheirDay && (availability === null || availability === void 0 ? void 0 : (_availability$me3 = availability[me]) === null || _availability$me3 === void 0 ? void 0 : (_availability$me3$Nig = _availability$me3.Night) === null || _availability$me3$Nig === void 0 ? void 0 : (_availability$me3$Nig2 = _availability$me3$Nig[dayBeforeTheirDay]) === null || _availability$me3$Nig2 === void 0 ? void 0 : _availability$me3$Nig2.status) === 'selected';\n    const themMorningAfterNightBeforeMyDay = ['Morning', 'Noon'].includes(myShift) && dayBeforeMyDay && (availability === null || availability === void 0 ? void 0 : (_availability$them3 = availability[them]) === null || _availability$them3 === void 0 ? void 0 : (_availability$them3$N = _availability$them3.Night) === null || _availability$them3$N === void 0 ? void 0 : (_availability$them3$N2 = _availability$them3$N[dayBeforeMyDay]) === null || _availability$them3$N2 === void 0 ? void 0 : _availability$them3$N2.status) === 'selected';\n    if (meAssignedOnTheirDay || themAssignedOnMyDay || meMorningAfterTheirNight || themMorningAfterMyNight || meNightAfterMorningBeforeTheirDay || themNightAfterMorningBeforeMyDay || meMorningAfterNightBeforeTheirDay || themMorningAfterNightBeforeMyDay) {\n      toast.error(\"Swap not allowed: Conflict with shift-before/after rules or existing assignments.\");\n      return;\n    }\n    if ((loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user2 = loggedInUser.user) === null || _loggedInUser$user2 === void 0 ? void 0 : _loggedInUser$user2.role) === 'admin') {\n      await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n      await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n      await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n      await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n      const updated = {\n        ...availability\n      };\n      updated[me][myShift][myDay].status = 'default';\n      updated[them][theirShift][theirDay].status = 'default';\n      updated[me][theirShift] ||= {};\n      updated[me][theirShift][theirDay] ||= {\n        isAvailable: true\n      };\n      updated[me][theirShift][theirDay].status = 'selected';\n      updated[them][myShift] ||= {};\n      updated[them][myShift][myDay] ||= {\n        isAvailable: true\n      };\n      updated[them][myShift][myDay].status = 'selected';\n      setAvailability(updated);\n      updateShiftCounts();\n      setSelectedShiftToSwap(null);\n      setSecondSelectedShift(null);\n      toast.success(\"Swap completed successfully.\");\n      return;\n    }\n    const adminId = (_Object$entries$find = Object.entries(users).find(([, u]) => u.role === 'admin')) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];\n    if (!adminId) {\n      toast.error('Admin not found.');\n      return;\n    }\n    const notificationLink = `/schedule?weekOffset=${weekOffset}&approveSwap=true&me=${me}&them=${them}&myDay=${myDay}&myShift=${myShift}&theirDay=${theirDay}&theirShift=${theirShift}`;\n    await sendNotification(currentCompany, adminId, `${((_users$me = users[me]) === null || _users$me === void 0 ? void 0 : _users$me.name) || 'An employee'} requested to swap their ${myShift} shift on ${myDay} with ${((_users$them = users[them]) === null || _users$them === void 0 ? void 0 : _users$them.name) || 'another employee'}'s ${theirShift} shift on ${theirDay}.`, notificationLink);\n    toast.success('Your swap request has been sent to the admin.');\n    setSelectedShiftToSwap(null);\n    setSecondSelectedShift(null);\n  };\n  useEffect(() => {\n    const approveSwap = queryParams.get('approveSwap');\n    const me = queryParams.get('me');\n    const them = queryParams.get('them');\n    const myDay = queryParams.get('myDay');\n    const myShift = queryParams.get('myShift');\n    const theirDay = queryParams.get('theirDay');\n    const theirShift = queryParams.get('theirShift');\n    if (approveSwap === 'true' && me && them && myDay && myShift && theirDay && theirShift && isAdmin) {\n      setShiftOfferParams({\n        isAdminSwapApproval: true,\n        me,\n        them,\n        myDay,\n        myShift,\n        theirDay,\n        theirShift,\n        weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0\n      });\n    }\n  }, [location.search, isAdmin]);\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 17\n      }, this), isConfirmModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: isConfirmingPublish ? isPublished ? 'Confirm Schedule Unpublishing' : 'Confirm Schedule Publication' : isConfirmingEdit ? isEditAllowed ? 'Confirm Disabling Editing' : 'Confirm Enabling Editing' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: isConfirmingPublish ? isPublished ? 'Are you sure you want to unpublish this schedule?' : 'Are you sure you want to publish this schedule?' : isConfirmingEdit ? isEditAllowed ? 'Are you sure you want to disable weekly availability submissions?' : 'Are you sure you want to enable weekly availability submissions?' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"confirm-button\",\n              onClick: () => {\n                if (isConfirmingPublish) {\n                  togglePublishStatus();\n                } else if (isConfirmingEdit) {\n                  toggleEditStatus();\n                }\n                closeConfirmModal();\n              },\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 928,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cancel-button\",\n              onClick: closeConfirmModal,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 938,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Weekly Schedule\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 21\n        }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-toggle-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"view-toggle-button\",\n            onClick: () => setIsViewingAsEmployee(prev => !prev),\n            children: [isViewingAsEmployee ? /*#__PURE__*/_jsxDEV(FaEdit, {\n              style: {\n                marginRight: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 953,\n              columnNumber: 56\n            }, this) : /*#__PURE__*/_jsxDEV(FaCalendarCheck, {\n              style: {\n                marginRight: '6px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 953,\n              columnNumber: 100\n            }, this), isViewingAsEmployee ? 'Back to Draft View' : 'View Final Schedule']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 25\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 25\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 963,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [!isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"week-navigation centered-navigation\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(-1),\n              children: \"Previous Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 968,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"week-range\",\n              children: calculateWeekRange(weekOffset)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(1),\n              children: \"Next Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 972,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 967,\n            columnNumber: 33\n          }, this), isAdmin && !isViewingAsEmployee ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"schedule-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"schedule-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Shift\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 983,\n                    columnNumber: 49\n                  }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 987,\n                      columnNumber: 67\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"date\",\n                      children: weekDates[index]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 988,\n                      columnNumber: 61\n                    }, this)]\n                  }, day, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 986,\n                    columnNumber: 57\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 982,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 981,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: shift\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 997,\n                    columnNumber: 53\n                  }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                    var _necessaryEmployees$d5, _necessaryEmployees$d6;\n                    const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                      var _userData$shift9;\n                      const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift9 = userData[shift]) === null || _userData$shift9 === void 0 ? void 0 : _userData$shift9[day];\n                      return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                    }).length;\n                    const isFullyStaffed = selectedEmployeesCount === ((necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d5 = necessaryEmployees[day]) === null || _necessaryEmployees$d5 === void 0 ? void 0 : _necessaryEmployees$d5[shift]) || 0);\n                    const criticality = calculateShiftCriticality(day, shift);\n                    const isMostCritical = mostCriticalShifts.some(criticalShift => criticalShift.day === day && criticalShift.shift === shift);\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: `schedule-cell \n                                                                ${isFullyStaffed ? 'fully-staffed' : ''} \n                                                                ${isMostCritical ? 'most-critical' : ''}\n                                                            `,\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"number\",\n                        min: \"0\",\n                        className: \"necessary-employees-input\",\n                        value: (necessaryEmployees === null || necessaryEmployees === void 0 ? void 0 : (_necessaryEmployees$d6 = necessaryEmployees[day]) === null || _necessaryEmployees$d6 === void 0 ? void 0 : _necessaryEmployees$d6[shift]) || 0,\n                        onChange: e => handleNecessaryEmployeesChange(day, shift, e.target.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1018,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"selected-employees-indicator\",\n                        children: [selectedEmployeesCount, \" Selected\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1026,\n                        columnNumber: 65\n                      }, this), Object.entries(availability).filter(([userId, userData]) => {\n                        var _userData$shift10;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift10 = userData[shift]) === null || _userData$shift10 === void 0 ? void 0 : _userData$shift10[day];\n                        return availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.isAvailable;\n                      }).sort(([userIdA], [userIdB]) => {\n                        var _users$userIdA2, _users$userIdB2;\n                        const nameA = ((_users$userIdA2 = users[userIdA]) === null || _users$userIdA2 === void 0 ? void 0 : _users$userIdA2.name) || '';\n                        const nameB = ((_users$userIdB2 = users[userIdB]) === null || _users$userIdB2 === void 0 ? void 0 : _users$userIdB2.name) || '';\n                        return nameA.localeCompare(nameB);\n                      }).map(([userId, userData]) => {\n                        var _userData$shift11, _users$userId;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift11 = userData[shift]) === null || _userData$shift11 === void 0 ? void 0 : _userData$shift11[day];\n                        const statusClass = getStatusClass(availabilityInfo.status, userId);\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: `availability-entry ${statusClass}`,\n                          onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                          style: {\n                            backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ffff',\n                            color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                            pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                            cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                          },\n                          children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                        }, userId, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1045,\n                          columnNumber: 77\n                        }, this);\n                      })]\n                    }, day, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1011,\n                      columnNumber: 61\n                    }, this);\n                  })]\n                }, shift, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 996,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 994,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 980,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"employees-list\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Employees\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"week-navigation\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"week-nav-button\",\n                  onClick: () => handleWeekChange(-1),\n                  children: /*#__PURE__*/_jsxDEV(FaChevronLeft, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1086,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1085,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"week-range\",\n                  children: calculateWeekRange(weekOffset)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1088,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"week-nav-button\",\n                  onClick: () => handleWeekChange(1),\n                  children: /*#__PURE__*/_jsxDEV(FaChevronRight, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1090,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1089,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1084,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"buttons-container\",\n                children: [isWarningVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"warning-banner\",\n                  children: \"\\u26A0\\uFE0F Warning: One or more shifts are no longer fully staffed. Please review the schedule.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1096,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `general-button ${isPublished ? 'green' : 'red'}`,\n                  onClick: () => openConfirmModal('publish'),\n                  disabled: isPublishButtonDisabled,\n                  children: [isPublished ? 'Unpublish Schedule' : 'Publish Schedule', isWarningVisible && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"publish-warning-icon\",\n                    children: \"\\uD83D\\uDD34\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1107,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1101,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `general-button ${isEditAllowed ? 'green' : 'red'}`,\n                  onClick: () => openConfirmModal('edit'),\n                  children: isEditAllowed ? 'Disable Editing' : 'Enable Editing'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1110,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1094,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"total-info-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Weekly Overview\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1120,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1121,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Weekly Staff: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalNecessaryEmployees\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1122,\n                    columnNumber: 62\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1122,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1123,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Weekly Shift Targets: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalWeeklyTargets\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1124,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1124,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1125,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Assigned Shifts: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: totalAssignedShifts\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1126,\n                    columnNumber: 65\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1126,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1127,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1119,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: employeesWithAvailability.map(([userId, user]) => {\n                  const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId];\n                  const hasNotes = hasWeeklyNotes(userId);\n                  const backgroundColor = hasNotes ? 'yellow' : '#2980b9';\n                  const textColor = hasNotes ? 'black' : 'white';\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    onClick: () => handleEmployeeClick(userId),\n                    className: `${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`,\n                    style: {\n                      backgroundColor: isTargetMet ? '#d4edda' : 'inherit'\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"employee-details\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"notes-indicator\",\n                        style: {\n                          backgroundColor: backgroundColor,\n                          color: textColor\n                        },\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"indicator-text\",\n                          children: \"i\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1155,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1148,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"employee-name\",\n                        children: user.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1158,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"weekly-shift-target\",\n                        children: /*#__PURE__*/_jsxDEV(\"label\", {\n                          children: [shiftCounts[userId] || 0, \" shifts out of:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                            type: \"number\",\n                            min: \"0\",\n                            max: \"6\",\n                            value: weeklyShiftTargets[userId] || 0,\n                            onClick: e => e.stopPropagation(),\n                            onChange: e => handleWeeklyShiftTargetChange(userId, e.target.value),\n                            className: \"weekly-shift-input\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1165,\n                            columnNumber: 69\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1163,\n                          columnNumber: 65\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1162,\n                        columnNumber: 61\n                      }, this), highlightedUser === userId && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [selectedUserNotes && selectedUserNotes !== 'No notes available.' && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"employee-notes\",\n                          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                            children: \"Notes:\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1181,\n                            columnNumber: 77\n                          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                            children: selectedUserNotes\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1182,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1180,\n                          columnNumber: 73\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"employee-table\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"mini-schedule-legend compact\",\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"legend-symbol\",\n                              children: \"\\u2705\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1188,\n                              columnNumber: 77\n                            }, this), \" Assigned \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"legend-symbol\",\n                              children: \"\\uD83D\\uDFE0\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1189,\n                              columnNumber: 77\n                            }, this), \" Submitted\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1187,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                            className: \"mini-schedule-table\",\n                            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                                  children: \"Shift\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1195,\n                                  columnNumber: 85\n                                }, this), ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n                                  children: day\n                                }, day, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1197,\n                                  columnNumber: 89\n                                }, this))]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1194,\n                                columnNumber: 81\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1193,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                              children: getUserShiftTable(userId).map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n                                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                                  children: {\n                                    Morning: 'M',\n                                    Noon: 'N',\n                                    Evening: 'E',\n                                    Night: 'Nt'\n                                  }[row.shift] || row.shift\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1204,\n                                  columnNumber: 89\n                                }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n                                  children: row[day]\n                                }, day, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 1213,\n                                  columnNumber: 93\n                                }, this))]\n                              }, row.shift, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 1203,\n                                columnNumber: 85\n                              }, this))\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1201,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1192,\n                            columnNumber: 73\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1186,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1146,\n                      columnNumber: 57\n                    }, this)\n                  }, userId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1138,\n                    columnNumber: 53\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1130,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1081,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 979,\n            columnNumber: 33\n          }, this) : isPublished ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"schedule-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"schedule-table\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"Shift\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1236,\n                      columnNumber: 57\n                    }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1240,\n                        columnNumber: 75\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"date\",\n                        children: weekDates[index]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1241,\n                        columnNumber: 69\n                      }, this)]\n                    }, day, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1239,\n                      columnNumber: 65\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1235,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1234,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: shift\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1250,\n                      columnNumber: 61\n                    }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                      const selectedEmployees = Object.entries(availability).filter(([userId, userData]) => {\n                        var _userData$shift12;\n                        const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift12 = userData[shift]) === null || _userData$shift12 === void 0 ? void 0 : _userData$shift12[day];\n                        return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                      });\n                      return /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"schedule-cell\",\n                        children: selectedEmployees.sort(([userIdA], [userIdB]) => {\n                          var _users$userIdA3, _users$userIdA3$name, _users$userIdB3, _users$userIdB3$name;\n                          const nameA = ((_users$userIdA3 = users[userIdA]) === null || _users$userIdA3 === void 0 ? void 0 : (_users$userIdA3$name = _users$userIdA3.name) === null || _users$userIdA3$name === void 0 ? void 0 : _users$userIdA3$name.toLowerCase()) || '';\n                          const nameB = ((_users$userIdB3 = users[userIdB]) === null || _users$userIdB3 === void 0 ? void 0 : (_users$userIdB3$name = _users$userIdB3.name) === null || _users$userIdB3$name === void 0 ? void 0 : _users$userIdB3$name.toLowerCase()) || '';\n                          return nameA.localeCompare(nameB);\n                        }).map(([userId]) => {\n                          var _users$userId2;\n                          const isOwnShift = userId === highlightedUser;\n                          const isSelected = selectedShiftToSwap && selectedShiftToSwap.userId === userId && selectedShiftToSwap.day === day && selectedShiftToSwap.shift === shift;\n                          const isOfferedToMe = shiftOfferParams && userId === shiftOfferParams.fromUser && shift === shiftOfferParams.shift && day === shiftOfferParams.day;\n                          const isSecondSelected = secondSelectedShift && secondSelectedShift.userId === userId && secondSelectedShift.day === day && secondSelectedShift.shift === shift;\n                          console.log('[DEBUG] checking cell', {\n                            userId,\n                            shift,\n                            day,\n                            highlightedUser,\n                            isOwnShift,\n                            isSelected,\n                            isOfferedToMe,\n                            shiftOfferParams\n                          });\n                          return /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: `employee-button \n                                                                                        ${isOwnShift ? 'highlighted-own-shift' : ''} \n                                                                                        ${isSelected ? 'highlighted-swap-source' : ''} \n                                                                                        ${isSecondSelected ? 'highlighted-swap-target' : ''} \n                                                                                        ${isOfferedToMe ? 'offered-to-me' : ''} \n                                                                                        ${shiftOfferParams !== null && shiftOfferParams !== void 0 && shiftOfferParams.isAdminSwapApproval && (userId === shiftOfferParams.me && shift === shiftOfferParams.myShift && day === shiftOfferParams.myDay || userId === shiftOfferParams.them && shift === shiftOfferParams.theirShift && day === shiftOfferParams.theirDay) ? 'highlighted-swap' : ''}\n                                                                                    `,\n                            onClick: () => {\n                              if (isOwnShift) {\n                                if (selectedShiftToSwap && selectedShiftToSwap.userId === userId && selectedShiftToSwap.shift === shift && selectedShiftToSwap.day === day) {\n                                  setSelectedShiftToSwap(null);\n                                  setSecondSelectedShift(null);\n                                } else {\n                                  setSelectedShiftToSwap({\n                                    userId,\n                                    shift,\n                                    day\n                                  });\n                                  setSecondSelectedShift(null);\n                                }\n                              } else if (selectedShiftToSwap && !secondSelectedShift) {\n                                setSecondSelectedShift({\n                                  userId,\n                                  shift,\n                                  day\n                                });\n                              } else {\n                                setSelectedShiftToSwap(null);\n                                setSecondSelectedShift(null);\n                              }\n                            },\n                            children: ((_users$userId2 = users[userId]) === null || _users$userId2 === void 0 ? void 0 : _users$userId2.name) || 'Unknown'\n                          }, userId, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1295,\n                            columnNumber: 85\n                          }, this);\n                        })\n                      }, day, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1258,\n                        columnNumber: 69\n                      }, this);\n                    })]\n                  }, shift, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1249,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1247,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1233,\n                columnNumber: 45\n              }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employees-list\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Employees\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1353,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: employeesWithAvailability.map(([userId, user]) => {\n                    return /*#__PURE__*/_jsxDEV(\"li\", {\n                      onClick: () => handleEmployeeClick(userId),\n                      className: `${highlightedUser === userId ? 'selected' : ''}`,\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"employee-details\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"employee-name\",\n                          children: user.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1363,\n                          columnNumber: 73\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1362,\n                        columnNumber: 69\n                      }, this)\n                    }, userId, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1357,\n                      columnNumber: 65\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1354,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1352,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1232,\n              columnNumber: 41\n            }, this), selectedShiftToSwap && (secondSelectedShift ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Swap Shifts With Another Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1376,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are proposing to swap your \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1378,\n                  columnNumber: 88\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1378,\n                  columnNumber: 142\n                }, this), \"with \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: (_users$secondSelected = users[secondSelectedShift.userId]) === null || _users$secondSelected === void 0 ? void 0 : _users$secondSelected.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1379,\n                  columnNumber: 62\n                }, this), \"'s\", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\" \", secondSelectedShift.shift]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1380,\n                  columnNumber: 57\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: secondSelectedShift.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1380,\n                  columnNumber: 112\n                }, this), \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1377,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  onClick: handleSwapProposal,\n                  children: \"Propose Swap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1383,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setSelectedShiftToSwap(null);\n                    setSecondSelectedShift(null);\n                  },\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1389,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1382,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1375,\n              columnNumber: 49\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Offer Shift to Another Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1403,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are offering your \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1405,\n                  columnNumber: 79\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: selectedShiftToSwap.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1405,\n                  columnNumber: 133\n                }, this), \" to another employee.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1404,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Choose employee to offer the shift to:\", /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: offerToUserId,\n                    onChange: e => setOfferToUserId(e.target.value),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"No one specific\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1411,\n                      columnNumber: 65\n                    }, this), Object.entries(users).filter(([id, user]) => {\n                      var _user$companyIds, _availability$id4, _availability$id4$Nig, _availability$id4$Nig2, _availability$id5, _availability$id5$Mor, _availability$id5$Mor2, _availability$id6, _availability$id6$Noo, _availability$id6$Noo2;\n                      if (id === selectedShiftToSwap.userId) return false;\n                      if (!((_user$companyIds = user.companyIds) !== null && _user$companyIds !== void 0 && _user$companyIds.some(company => {\n                        var _loggedInUser$company;\n                        return company.companyId === (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$company = loggedInUser.company) === null || _loggedInUser$company === void 0 ? void 0 : _loggedInUser$company.id);\n                      }))) return false;\n                      if ((shiftCounts[id] || 0) >= 6) return false;\n                      const isAssignedThatDay = Object.values((availability === null || availability === void 0 ? void 0 : availability[id]) || {}).some(shiftData => {\n                        var _shiftData$selectedSh;\n                        return (shiftData === null || shiftData === void 0 ? void 0 : (_shiftData$selectedSh = shiftData[selectedShiftToSwap.day]) === null || _shiftData$selectedSh === void 0 ? void 0 : _shiftData$selectedSh.status) === 'selected';\n                      });\n                      if (isAssignedThatDay) return false;\n                      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                      const currentIndex = days.indexOf(selectedShiftToSwap.day);\n                      const previousDay = days[currentIndex - 1];\n                      const nextDay = days[currentIndex + 1];\n                      if (['Morning', 'Noon'].includes(selectedShiftToSwap.shift) && previousDay && (availability === null || availability === void 0 ? void 0 : (_availability$id4 = availability[id]) === null || _availability$id4 === void 0 ? void 0 : (_availability$id4$Nig = _availability$id4.Night) === null || _availability$id4$Nig === void 0 ? void 0 : (_availability$id4$Nig2 = _availability$id4$Nig[previousDay]) === null || _availability$id4$Nig2 === void 0 ? void 0 : _availability$id4$Nig2.status) === 'selected') return false;\n                      if (selectedShiftToSwap.shift === 'Night' && nextDay && ((availability === null || availability === void 0 ? void 0 : (_availability$id5 = availability[id]) === null || _availability$id5 === void 0 ? void 0 : (_availability$id5$Mor = _availability$id5.Morning) === null || _availability$id5$Mor === void 0 ? void 0 : (_availability$id5$Mor2 = _availability$id5$Mor[nextDay]) === null || _availability$id5$Mor2 === void 0 ? void 0 : _availability$id5$Mor2.status) === 'selected' || (availability === null || availability === void 0 ? void 0 : (_availability$id6 = availability[id]) === null || _availability$id6 === void 0 ? void 0 : (_availability$id6$Noo = _availability$id6.Noon) === null || _availability$id6$Noo === void 0 ? void 0 : (_availability$id6$Noo2 = _availability$id6$Noo[nextDay]) === null || _availability$id6$Noo2 === void 0 ? void 0 : _availability$id6$Noo2.status) === 'selected')) return false;\n                      return true;\n                    }).sort(([, a], [, b]) => (a.name || '').localeCompare(b.name || '')).map(([id, user]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: id,\n                      children: user.name\n                    }, id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1448,\n                      columnNumber: 73\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1410,\n                    columnNumber: 61\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1408,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  onClick: handleOfferShift,\n                  children: \"Offer Shift\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1455,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1407,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1402,\n              columnNumber: 49\n            }, this)), shiftOfferParams && (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user3 = loggedInUser.user) === null || _loggedInUser$user3 === void 0 ? void 0 : _loggedInUser$user3.id) === shiftOfferParams.offeredTo && (availability === null || availability === void 0 ? void 0 : (_availability$shiftOf = availability[shiftOfferParams.fromUser]) === null || _availability$shiftOf === void 0 ? void 0 : (_availability$shiftOf2 = _availability$shiftOf[shiftOfferParams.shift]) === null || _availability$shiftOf2 === void 0 ? void 0 : (_availability$shiftOf3 = _availability$shiftOf2[shiftOfferParams.day]) === null || _availability$shiftOf3 === void 0 ? void 0 : _availability$shiftOf3.status) === 'selected' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"You\\u2019ve received a shift offer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1468,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"You are being offered the \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: shiftOfferParams.shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1470,\n                  columnNumber: 83\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: shiftOfferParams.day\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1470,\n                  columnNumber: 134\n                }, this), \" by\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara = users[shiftOfferParams.fromUser]) === null || _users$shiftOfferPara === void 0 ? void 0 : _users$shiftOfferPara.name) || 'a colleague'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1471,\n                  columnNumber: 57\n                }, this), \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1469,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$fromUse4, _availability$fromUse5, _availability$fromUse6, _Object$entries$find2;\n                    const weekKey = calculateWeekKey(shiftOfferParams.weekOffset);\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo\n                    } = shiftOfferParams;\n                    const currentStatus = availability === null || availability === void 0 ? void 0 : (_availability$fromUse4 = availability[fromUser]) === null || _availability$fromUse4 === void 0 ? void 0 : (_availability$fromUse5 = _availability$fromUse4[shift]) === null || _availability$fromUse5 === void 0 ? void 0 : (_availability$fromUse6 = _availability$fromUse5[day]) === null || _availability$fromUse6 === void 0 ? void 0 : _availability$fromUse6.status;\n                    if (currentStatus !== 'selected') {\n                      toast.error('This shift has already been taken by someone else.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n                    const adminId = (_Object$entries$find2 = Object.entries(users).find(([, u]) => u.role === 'admin')) === null || _Object$entries$find2 === void 0 ? void 0 : _Object$entries$find2[0];\n                    if (!adminId) {\n                      toast.error('Admin not found.');\n                      return;\n                    }\n                    const weekRange = calculateWeekRange(shiftOfferParams.weekOffset);\n                    const notificationLink = `/schedule?weekOffset=${shiftOfferParams.weekOffset}&approveShiftTransfer=true&day=${day}&shift=${shift}&fromUser=${fromUser}&toUser=${offeredTo}`;\n                    if (adminId === offeredTo) {\n                      await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                      await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n                      const updated = {\n                        ...availability\n                      };\n                      updated[fromUser][shift][day].status = 'default';\n                      if (!updated[offeredTo]) updated[offeredTo] = {};\n                      if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                      if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = {\n                        isAvailable: true\n                      };\n                      updated[offeredTo][shift][day].status = 'selected';\n                      setAvailability(updated);\n                      updateShiftCounts();\n                      toast.success('Shift was successfully reassigned to you.');\n                      setShiftOfferParams(null);\n                    } else {\n                      var _users$offeredTo;\n                      await sendNotification(currentCompany, adminId, `${((_users$offeredTo = users[offeredTo]) === null || _users$offeredTo === void 0 ? void 0 : _users$offeredTo.name) || 'An employee'} accepted the offer to take the ${shift} shift on ${day}. Please approve the change.`, notificationLink);\n                      toast.success('Your request has been sent to the admin for approval.');\n                      setShiftOfferParams(null);\n                    }\n                  },\n                  children: \"Accept Shift\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1474,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setShiftOfferParams(null);\n                    toast.info('You declined the shift.');\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1528,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1473,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1467,\n              columnNumber: 49\n            }, this), (shiftOfferParams === null || shiftOfferParams === void 0 ? void 0 : shiftOfferParams.isAdminApproval) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Admin Approval Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1544,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Approve transfer of \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [shiftOfferParams.shift, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1546,\n                  columnNumber: 73\n                }, this), \" shift on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [shiftOfferParams.day, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1546,\n                  columnNumber: 125\n                }, this), \"from \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [((_users$shiftOfferPara2 = users[shiftOfferParams.fromUser]) === null || _users$shiftOfferPara2 === void 0 ? void 0 : _users$shiftOfferPara2.name) || 'Unknown', \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1547,\n                  columnNumber: 58\n                }, this), \"to \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara3 = users[shiftOfferParams.offeredTo]) === null || _users$shiftOfferPara3 === void 0 ? void 0 : _users$shiftOfferPara3.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1548,\n                  columnNumber: 56\n                }, this), \"?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1545,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$fromUse7, _availability$fromUse8, _availability$fromUse9, _users$fromUser2, _users$offeredTo2, _loggedInUser$user4, _loggedInUser$user5;\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const weekKey = calculateWeekKey(weekOffset);\n                    const currentStatus = availability === null || availability === void 0 ? void 0 : (_availability$fromUse7 = availability[fromUser]) === null || _availability$fromUse7 === void 0 ? void 0 : (_availability$fromUse8 = _availability$fromUse7[shift]) === null || _availability$fromUse8 === void 0 ? void 0 : (_availability$fromUse9 = _availability$fromUse8[day]) === null || _availability$fromUse9 === void 0 ? void 0 : _availability$fromUse9.status;\n                    if (currentStatus !== 'selected') {\n                      toast.error('This shift has already been reassigned.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n                    await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n                    const updated = {\n                      ...availability\n                    };\n                    updated[fromUser][shift][day].status = 'default';\n                    if (!updated[offeredTo]) updated[offeredTo] = {};\n                    if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                    if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = {\n                      isAvailable: true\n                    };\n                    updated[offeredTo][shift][day].status = 'selected';\n                    setAvailability(updated);\n                    updateShiftCounts();\n                    const shabbatShiftsSet = new Set(['Friday|Evening', 'Friday|Night', 'Saturday|Morning', 'Saturday|Noon', 'Saturday|Evening']);\n                    const isShabbatShift = shabbatShiftsSet.has(`${day}|${shift}`);\n                    const isNightShift = shift === 'Night' && !isShabbatShift;\n                    const isRegularShift = !isShabbatShift && shift !== 'Night';\n                    if (isShabbatShift || isNightShift || isRegularShift) {\n                      const now = new Date();\n                      const year = now.getFullYear();\n                      const month = now.getMonth() + 1;\n                      const fromStats = calculateShiftStats(updated, fromUser);\n                      const toStats = calculateShiftStats(updated, offeredTo);\n                      await saveWeeklyStats(currentCompany, year, month, weekKey, fromUser, fromStats);\n                      await saveWeeklyStats(currentCompany, year, month, weekKey, offeredTo, toStats);\n                    }\n                    const fromUserName = ((_users$fromUser2 = users[fromUser]) === null || _users$fromUser2 === void 0 ? void 0 : _users$fromUser2.name) || 'Unknown';\n                    const offeredToName = ((_users$offeredTo2 = users[offeredTo]) === null || _users$offeredTo2 === void 0 ? void 0 : _users$offeredTo2.name) || 'Unknown';\n                    const link = `/schedule?weekOffset=${weekOffset}`;\n                    if (fromUser !== (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user4 = loggedInUser.user) === null || _loggedInUser$user4 === void 0 ? void 0 : _loggedInUser$user4.id)) {\n                      await sendNotification(currentCompany, fromUser, `The admin approved your request to transfer the ${shift} shift on ${day} to ${offeredToName}.`, link);\n                    }\n                    if (offeredTo !== (loggedInUser === null || loggedInUser === void 0 ? void 0 : (_loggedInUser$user5 = loggedInUser.user) === null || _loggedInUser$user5 === void 0 ? void 0 : _loggedInUser$user5.id)) {\n                      await sendNotification(currentCompany, offeredTo, `The admin approved your request to take the ${shift} shift on ${day} from ${fromUserName}.`, link);\n                    }\n                    toast.success('Shift transfer approved.');\n                    setShiftOfferParams(null);\n                  },\n                  children: \"Approve\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1551,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: async () => {\n                    var _users$fromUser3, _users$offeredTo3;\n                    setShiftOfferParams(null);\n                    toast.info('Shift transfer declined.');\n                    const {\n                      shift,\n                      day,\n                      fromUser,\n                      offeredTo,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const fromUserName = ((_users$fromUser3 = users[fromUser]) === null || _users$fromUser3 === void 0 ? void 0 : _users$fromUser3.name) || 'Unknown';\n                    const offeredToName = ((_users$offeredTo3 = users[offeredTo]) === null || _users$offeredTo3 === void 0 ? void 0 : _users$offeredTo3.name) || 'an employee';\n                    const weekRange = calculateWeekRange(weekOffset);\n                    await sendNotification(currentCompany, fromUser, `Your shift offer to ${offeredToName} for the ${shift} shift on ${day} was declined by the admin.`, `/schedule?weekOffset=${weekOffset}`);\n                    await sendNotification(currentCompany, offeredTo, `Your request to take the ${shift} shift on ${day} from ${fromUserName} was declined by the admin.`, `/schedule?weekOffset=${weekOffset}`);\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1629,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1550,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1543,\n              columnNumber: 45\n            }, this), (shiftOfferParams === null || shiftOfferParams === void 0 ? void 0 : shiftOfferParams.isAdminSwapApproval) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"swap-request-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Admin Approval Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1665,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Approve shift swap between\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara4 = users[shiftOfferParams.me]) === null || _users$shiftOfferPara4 === void 0 ? void 0 : _users$shiftOfferPara4.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1668,\n                  columnNumber: 53\n                }, this), \"(shift: \", shiftOfferParams.myShift, \" on \", shiftOfferParams.myDay, \") and\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: ((_users$shiftOfferPara5 = users[shiftOfferParams.them]) === null || _users$shiftOfferPara5 === void 0 ? void 0 : _users$shiftOfferPara5.name) || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1670,\n                  columnNumber: 53\n                }, this), \"(shift: \", shiftOfferParams.theirShift, \" on \", shiftOfferParams.theirDay, \")?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1666,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"swap-form\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"accept-swap-button\",\n                  onClick: async () => {\n                    var _availability$me4, _availability$me4$myS, _availability$me4$myS2, _availability$them4, _availability$them4$t, _availability$them4$t2;\n                    const {\n                      me,\n                      them,\n                      myDay,\n                      myShift,\n                      theirDay,\n                      theirShift,\n                      weekOffset\n                    } = shiftOfferParams;\n                    const weekKey = calculateWeekKey(weekOffset);\n                    const myStatus = availability === null || availability === void 0 ? void 0 : (_availability$me4 = availability[me]) === null || _availability$me4 === void 0 ? void 0 : (_availability$me4$myS = _availability$me4[myShift]) === null || _availability$me4$myS === void 0 ? void 0 : (_availability$me4$myS2 = _availability$me4$myS[myDay]) === null || _availability$me4$myS2 === void 0 ? void 0 : _availability$me4$myS2.status;\n                    const theirStatus = availability === null || availability === void 0 ? void 0 : (_availability$them4 = availability[them]) === null || _availability$them4 === void 0 ? void 0 : (_availability$them4$t = _availability$them4[theirShift]) === null || _availability$them4$t === void 0 ? void 0 : (_availability$them4$t2 = _availability$them4$t[theirDay]) === null || _availability$them4$t2 === void 0 ? void 0 : _availability$them4$t2.status;\n                    if (myStatus !== 'selected' || theirStatus !== 'selected') {\n                      toast.error('One of the shifts has already changed.');\n                      setShiftOfferParams(null);\n                      return;\n                    }\n                    await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n                    await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n                    await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n                    const updated = {\n                      ...availability\n                    };\n                    updated[me][myShift][myDay].status = 'default';\n                    updated[them][theirShift][theirDay].status = 'default';\n                    updated[me][theirShift] ||= {};\n                    updated[me][theirShift][theirDay] ||= {\n                      isAvailable: true\n                    };\n                    updated[me][theirShift][theirDay].status = 'selected';\n                    updated[them][myShift] ||= {};\n                    updated[them][myShift][myDay] ||= {\n                      isAvailable: true\n                    };\n                    updated[them][myShift][myDay].status = 'selected';\n                    setAvailability(updated);\n                    updateShiftCounts();\n\n                    // --- עדכון סטטיסטיקות ---\n                    const shabbatShiftsSet = new Set(['Friday|Evening', 'Friday|Night', 'Saturday|Morning', 'Saturday|Noon', 'Saturday|Evening']);\n                    const isShabbatShift = shabbatShiftsSet.has(`${myDay}|${myShift}`) || shabbatShiftsSet.has(`${theirDay}|${theirShift}`);\n                    const isNightShift = (myShift === 'Night' || theirShift === 'Night') && !isShabbatShift;\n                    const isRegularShift = !isShabbatShift && myShift !== 'Night' && theirShift !== 'Night';\n                    if (isShabbatShift || isNightShift || isRegularShift) {\n                      const now = new Date();\n                      const year = now.getFullYear();\n                      const month = now.getMonth() + 1;\n                      const meStats = calculateShiftStats(updated, me);\n                      const themStats = calculateShiftStats(updated, them);\n                      await saveWeeklyStats(currentCompany, year, month, weekKey, me, meStats);\n                      await saveWeeklyStats(currentCompany, year, month, weekKey, them, themStats);\n                    }\n                    toast.success('Swap approved and shifts updated.');\n                    setShiftOfferParams(null);\n                    await sendNotification(currentCompany, me, `The admin approved your shift swap. You are now assigned to the ${theirShift} shift on ${theirDay}.`, `/schedule?weekOffset=${weekOffset}`);\n                    await sendNotification(currentCompany, them, `The admin approved your shift swap. You are now assigned to the ${myShift} shift on ${myDay}.`, `/schedule?weekOffset=${weekOffset}`);\n                  },\n                  children: \"Approve\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1674,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"submit-swap-button\",\n                  style: {\n                    backgroundColor: '#e74c3c'\n                  },\n                  onClick: () => {\n                    setShiftOfferParams(null);\n                    toast.info('Swap request declined.');\n                  },\n                  children: \"Decline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1803,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1673,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1664,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1231,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-schedule-message\",\n            children: \"No published schedule is available for this week.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1819,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 906,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 905,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"YwJWEHVsBYx8tbIE2ju93EqAif8=\", false, function () {\n  return [useLocation];\n});\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Loader","BackgroundWrapper","Navbar","FaChevronLeft","FaChevronRight","FaCalendarCheck","FaEdit","updateAvailabilityStatus","getAllAvailabilities","getNecessaryEmployees","saveNecessaryEmployees","saveWeeklyShiftTargets","getWeeklyShiftTargets","fetchPublishStatus","savePublishStatus","saveEditStatus","fetchEditStatus","getUsers","sendNotification","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","handleOtherShiftsOfDayWhenDeselectAShift","toast","ToastContainer","saveWeeklyStats","jsxDEV","_jsxDEV","Fragment","_Fragment","ScheduleScreen","_s","_users$secondSelected","_loggedInUser$user3","_availability$shiftOf","_availability$shiftOf2","_availability$shiftOf3","_users$shiftOfferPara","_users$shiftOfferPara2","_users$shiftOfferPara3","_users$shiftOfferPara4","_users$shiftOfferPara5","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","location","queryParams","URLSearchParams","search","initialWeekOffset","parseInt","get","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","highlightedUser","setHighlightedUser","selectedUserNotes","setSelectedUserNotes","shiftCounts","setShiftCounts","necessaryEmployees","setNecessaryEmployees","weeklyShiftTargets","setWeeklyShiftTargets","totalNecessaryEmployees","setTotalNecessaryEmployees","totalAssignedShifts","setTotalAssignedShifts","totalWeeklyTargets","setTotalWeeklyTargets","isPublished","setIsPublished","isAdmin","setIsAdmin","isEditAllowed","setIsEditAllowed","mostCriticalShifts","setMostCriticalShifts","isConfirmModalOpen","setIsConfirmModalOpen","isConfirmingPublish","setIsConfirmingPublish","isConfirmingEdit","setIsConfirmingEdit","isWarningVisible","setIsWarningVisible","isViewingAsEmployee","setIsViewingAsEmployee","selectedShiftToSwap","setSelectedShiftToSwap","offerToUserId","setOfferToUserId","shiftOfferParams","setShiftOfferParams","hasCheckedShiftOffer","setHasCheckedShiftOffer","loggedInUser","setLoggedInUser","secondSelectedShift","setSecondSelectedShift","shabbatShiftsSet","Set","calculateShiftStats","userId","shifts","days","nightShifts","shabbatShifts","regularShifts","day","shift","_availability$userId","_availability$userId$","shiftData","status","key","has","window","scrollTo","top","userFromStorage","JSON","parse","localStorage","getItem","user","role","id","isScheduleFullyStaffed","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","companyId","company","weekKey","availabilityData","usersData","necessaryEmployeesData","weeklyTargetsData","Promise","all","calculateTotalNecessaryEmployees","updatedWeeklyTargets","Object","values","forEach","console","warn","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","handleWeeklyShiftTargetChange","value","parsedValue","Math","min","updatedTargets","total","reduce","sum","target","cleanedTargets","fromEntries","entries","filter","handleWeekChange","direction","prevOffset","getStatusClass","_necessaryEmployees$d","selectedEmployeesCount","userData","_userData$shift","availabilityInfo","maxNecessaryEmployees","currentShiftCount","maxShiftsAllowed","handleEmployeeClick","_availabilityData$use","userNotes","notes","keys","updateShiftCounts","counts","totalShifts","userShiftCount","dayShifts","saveNecessaryEmployeesToDB","handleStatusUpdate","currentStatus","_necessaryEmployees$d2","_userData$shift2","newStatus","updatedAvailability","otherShift","employeesWithAvailability","some","sort","userIdA","userIdB","_users$userIdA","_users$userIdA$name","_users$userIdB","_users$userIdB$name","nameA","name","toLowerCase","nameB","localeCompare","handleNecessaryEmployeesChange","updatedNecessaryEmployees","_userData$shift3","saveToDB","dayData","shiftCount","togglePublishStatus","alert","employeeList","u","includes","now","year","getFullYear","month","getMonth","employeeId","weekRange","notificationLink","fetchPublishStatusFromDB","_status$status","requiredCount","selectedCount","_userData$shift4","isPublishButtonDisabled","hasWeeklyNotes","userAvailability","trim","toggleEditStatus","fetchEditStatusFromDB","_status$isEditAllowed","calculateShiftCriticality","_necessaryEmployees$d3","necessary","selected","_userData$shift5","_userData$shift5$day","defaults","_userData$shift6","_userData$shift6$day","_userData$shift7","_userData$shift7$day","isAvailable","pow","findMostCriticalShifts","highestCriticality","Infinity","criticalShifts","_necessaryEmployees$d4","criticality","_userData$shift8","_userData$shift8$day","push","openConfirmModal","actionType","closeConfirmModal","getUserShiftTable","map","row","_availability$userId2","_availability$userId3","handleOfferShift","fromUser","recipients","_availability$id","_availability$id$Nigh","_availability$id$Nigh2","_availability$id2","_availability$id2$Mor","_availability$id2$Mor2","_availability$id3","_availability$id3$Noo","_availability$id3$Noo2","isAssignedThatDay","_shiftData$day","currentIndex","indexOf","prev","next","Night","Morning","Noon","recipientId","_users$fromUser","link","success","_loggedInUser$user","offerShift","offerDay","offeredTo","_availability$fromUse","_availability$fromUse2","_availability$fromUse3","isStillOffered","info","approve","toUser","isAdminApproval","handleSwapProposal","_availability$me3","_availability$me3$Nig","_availability$me3$Nig2","_availability$them3","_availability$them3$N","_availability$them3$N2","_loggedInUser$user2","_Object$entries$find","_users$me","_users$them","myShift","myDay","me","theirShift","theirDay","them","daysOfWeek","myDayIndex","theirDayIndex","dayBeforeMyDay","dayBeforeTheirDay","dayAfterMyDay","dayAfterTheirDay","meAssignedOnTheirDay","_shiftData$theirDay","themAssignedOnMyDay","_shiftData$myDay","meMorningAfterTheirNight","s","_availability$me","_availability$me$s","_availability$me$s$da","themMorningAfterMyNight","_availability$them","_availability$them$s","_availability$them$s$","meNightAfterMorningBeforeTheirDay","_availability$me2","_availability$me2$s","_availability$me2$s$d","themNightAfterMorningBeforeMyDay","_availability$them2","_availability$them2$s","_availability$them2$s2","meMorningAfterNightBeforeTheirDay","themMorningAfterNightBeforeMyDay","updated","adminId","find","approveSwap","isAdminSwapApproval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","style","marginRight","index","_necessaryEmployees$d5","_necessaryEmployees$d6","_userData$shift9","isFullyStaffed","isMostCritical","criticalShift","type","onChange","e","_userData$shift10","_users$userIdA2","_users$userIdB2","_userData$shift11","_users$userId","statusClass","backgroundColor","color","pointerEvents","cursor","disabled","isTargetMet","hasNotes","textColor","max","stopPropagation","Evening","selectedEmployees","_userData$shift12","_users$userIdA3","_users$userIdA3$name","_users$userIdB3","_users$userIdB3$name","_users$userId2","isOwnShift","isSelected","isOfferedToMe","isSecondSelected","log","_user$companyIds","_availability$id4","_availability$id4$Nig","_availability$id4$Nig2","_availability$id5","_availability$id5$Mor","_availability$id5$Mor2","_availability$id6","_availability$id6$Noo","_availability$id6$Noo2","companyIds","_loggedInUser$company","_shiftData$selectedSh","previousDay","nextDay","a","b","_availability$fromUse4","_availability$fromUse5","_availability$fromUse6","_Object$entries$find2","_users$offeredTo","_availability$fromUse7","_availability$fromUse8","_availability$fromUse9","_users$fromUser2","_users$offeredTo2","_loggedInUser$user4","_loggedInUser$user5","isShabbatShift","isNightShift","isRegularShift","fromStats","toStats","fromUserName","offeredToName","_users$fromUser3","_users$offeredTo3","_availability$me4","_availability$me4$myS","_availability$me4$myS2","_availability$them4","_availability$them4$t","_availability$them4$t2","myStatus","theirStatus","meStats","themStats","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["// External libraries\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// Components\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport Navbar from '../components/Navbar';\n\n// Icons\nimport { FaChevronLeft, FaChevronRight, FaCalendarCheck, FaEdit } from 'react-icons/fa';\n\n// Services\nimport { updateAvailabilityStatus, getAllAvailabilities, getNecessaryEmployees, saveNecessaryEmployees, saveWeeklyShiftTargets, getWeeklyShiftTargets, fetchPublishStatus, savePublishStatus, saveEditStatus, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { sendNotification } from '../services/notificationService';\n\n// Utilities\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\n\n// Third-party Libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Styles\nimport '../styles/ScheduleScreen.css';\n\nimport { saveWeeklyStats } from '../services/statsService';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const location = useLocation();\n    const queryParams = new URLSearchParams(location.search);\n    const initialWeekOffset = parseInt(queryParams.get('weekOffset'), 10) || 0;\n    const [weekOffset, setWeekOffset] = useState(initialWeekOffset);\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]);\n    const [highlightedUser, setHighlightedUser] = useState(null);\n    const [selectedUserNotes, setSelectedUserNotes] = useState('');\n    const [shiftCounts, setShiftCounts] = useState({});\n    const [necessaryEmployees, setNecessaryEmployees] = useState({});\n    const [weeklyShiftTargets, setWeeklyShiftTargets] = useState({});\n    const [totalNecessaryEmployees, setTotalNecessaryEmployees] = useState(0);\n    const [totalAssignedShifts, setTotalAssignedShifts] = useState(0);\n    const [totalWeeklyTargets, setTotalWeeklyTargets] = useState(0);\n    const [isPublished, setIsPublished] = useState(false);\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [isEditAllowed, setIsEditAllowed] = useState(false);\n    const [mostCriticalShifts, setMostCriticalShifts] = useState([]);\n    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n    const [isConfirmingPublish, setIsConfirmingPublish] = useState(false);\n    const [isConfirmingEdit, setIsConfirmingEdit] = useState(false);\n    const [isWarningVisible, setIsWarningVisible] = useState(false);\n    const [isViewingAsEmployee, setIsViewingAsEmployee] = useState(false);\n    const [selectedShiftToSwap, setSelectedShiftToSwap] = useState(null);\n    const [offerToUserId, setOfferToUserId] = useState('');\n    const [shiftOfferParams, setShiftOfferParams] = useState(null);\n    const [hasCheckedShiftOffer, setHasCheckedShiftOffer] = useState(false);\n    const [loggedInUser, setLoggedInUser] = useState(null);\n    const [secondSelectedShift, setSecondSelectedShift] = useState(null);\n\n    const shabbatShiftsSet = new Set([\n        'Friday|Evening',\n        'Friday|Night',\n        'Saturday|Morning',\n        'Saturday|Noon',\n        'Saturday|Evening',\n    ]);\n\n    function calculateShiftStats(availability, userId) {\n        const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        let nightShifts = 0;\n        let shabbatShifts = 0;\n        let regularShifts = 0;\n\n        for (const day of days) {\n            for (const shift of shifts) {\n                const shiftData = availability[userId]?.[shift]?.[day];\n                if (shiftData?.status === 'selected') {\n                    const key = `${day}|${shift}`;\n                    if (shabbatShiftsSet.has(key)) {\n                        shabbatShifts++;\n                    } else if (shift === 'Night') {\n                        nightShifts++;\n                    } else {\n                        regularShifts++;\n                    }\n                }\n            }\n        }\n\n        return { nightShifts, shabbatShifts, regularShifts };\n    }\n\n    useEffect(() => {\n        window.scrollTo({ top: 0 });\n    }, []);\n\n    useEffect(() => {\n        const userFromStorage = JSON.parse(localStorage.getItem('user'));\n        setLoggedInUser(userFromStorage);\n        setIsAdmin(userFromStorage?.user.role === 'admin');\n        setHighlightedUser(userFromStorage?.user.id);\n    }, []);\n\n    useEffect(() => {\n        if (isPublished && !isScheduleFullyStaffed()) {\n            setIsWarningVisible(true);\n        } else {\n            setIsWarningVisible(false);\n        }\n    }, [availability, necessaryEmployees, isPublished]);\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                const [availabilityData, usersData, necessaryEmployeesData, weeklyTargetsData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers(),\n                    getNecessaryEmployees(companyId, weekKey),\n                    getWeeklyShiftTargets(companyId, weekKey),\n                ]);\n\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n                setNecessaryEmployees(necessaryEmployeesData || {});\n                calculateTotalNecessaryEmployees(necessaryEmployeesData || {});\n\n                const updatedWeeklyTargets = { ...weeklyTargetsData };\n                Object.values(usersData).forEach(user => {\n                    if (!user?.id) {\n                        console.warn(\"User without ID found:\", user);\n                        return;\n                    }\n\n                    if (!updatedWeeklyTargets[user.id]) {\n                        updatedWeeklyTargets[user.id] = 0;\n                    }\n                });\n\n                setWeeklyShiftTargets(updatedWeeklyTargets);\n\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB');\n                });\n                setWeekDates(dates);\n\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n    const handleWeeklyShiftTargetChange = async (userId, value) => {\n        const parsedValue = Math.min(parseInt(value, 10) || 0, 6);\n\n        if (parsedValue < shiftCounts[userId]) {\n            console.warn(`Cannot set target lower than current shifts (${shiftCounts[userId]} shifts for user ${userId}).`);\n            return;\n        }\n\n        const updatedTargets = { ...weeklyShiftTargets, [userId]: parsedValue };\n        setWeeklyShiftTargets(updatedTargets);\n\n        const total = Object.values(updatedTargets).reduce((sum, target) => sum + (target || 0), 0);\n        setTotalWeeklyTargets(total);\n\n        const cleanedTargets = Object.fromEntries(\n            Object.entries(updatedTargets).filter(([key]) => key !== 'necessaryEmployees')\n        );\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            await saveWeeklyShiftTargets(currentCompany, weekKey, cleanedTargets);\n        } catch (error) {\n            console.error('Failed to save weekly shift targets:', error);\n        }\n    };\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status, userId, shift, day) => {\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        if (status === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled';\n        }\n\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        if (status === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            return highlightedUser === userId ? 'status-disabled highlighted-user' : 'status-disabled';\n        }\n\n        if (highlightedUser === userId) {\n            return status === 'disabled' ? 'status-disabled highlighted-user' : `highlighted-user ${status}`;\n        }\n\n        if (shiftCounts[userId] >= weeklyShiftTargets[userId]) return 'status-disabled';\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const handleEmployeeClick = async (userId) => {\n        if (highlightedUser === userId) {\n            setHighlightedUser(null);\n            setSelectedUserNotes('');\n            return;\n        }\n\n        setSelectedUserNotes('');\n\n        setHighlightedUser(userId);\n\n        if (currentCompany && userId) {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n\n                const userNotes = availabilityData?.[userId]?.notes || 'No notes available.';\n                setSelectedUserNotes(userNotes);\n            } catch (err) {\n                console.error('Failed to fetch notes:', err);\n                setSelectedUserNotes('Error fetching notes.');\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (Object.keys(availability).length > 0) {\n            updateShiftCounts();\n        }\n    }, [availability]);\n\n    const updateShiftCounts = () => {\n        const counts = {};\n        let totalShifts = 0;\n\n        Object.entries(availability).forEach(([userId, shifts]) => {\n            const userShiftCount = Object.values(shifts).reduce(\n                (sum, dayShifts) =>\n                    sum +\n                    Object.values(dayShifts).filter((shift) => shift.status === 'selected').length,\n                0\n            );\n            counts[userId] = userShiftCount;\n            totalShifts += userShiftCount;\n        });\n\n        setShiftCounts(counts);\n        setTotalAssignedShifts(totalShifts);\n    };\n\n    useEffect(() => {\n        const saveNecessaryEmployeesToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n\n                if (Object.keys(necessaryEmployees).length > 0) {\n                    await saveNecessaryEmployees(currentCompany, weekKey, necessaryEmployees);\n                }\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n\n        if (!isLoading && Object.keys(necessaryEmployees).length > 0) {\n            saveNecessaryEmployeesToDB();\n        }\n    }, [necessaryEmployees, currentCompany]);\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        const maxNecessaryEmployees = necessaryEmployees?.[day]?.[shift] || 0;\n\n        if (currentStatus === 'default' && selectedEmployeesCount >= maxNecessaryEmployees) {\n            console.warn(`Cannot select more employees for ${shift} on ${day}, as the necessary employees limit (${maxNecessaryEmployees}) is reached.`);\n            return;\n        }\n\n        const currentShiftCount = shiftCounts[userId] || 0;\n        const maxShiftsAllowed = weeklyShiftTargets[userId] || 0;\n\n        if (currentStatus === 'default' && currentShiftCount >= maxShiftsAllowed) {\n            console.warn(`User ${userId} has reached the maximum number of shifts (${maxShiftsAllowed}).`);\n            return;\n        }\n\n        if (currentStatus === 'disabled') return;\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            setAvailability(updatedAvailability);\n\n            updateShiftCounts();\n\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    const employeesWithAvailability = Object.entries(users)\n        .filter(([userId]) =>\n            availability[userId] && Object.values(availability[userId]).some((shifts) =>\n                Object.values(shifts).some((shift) => shift.status === 'selected' || shift.status === 'default')\n            )\n        )\n        .sort(([userIdA], [userIdB]) => {\n            const nameA = users[userIdA]?.name?.toLowerCase() || '';\n            const nameB = users[userIdB]?.name?.toLowerCase() || '';\n            return nameA.localeCompare(nameB);\n        });\n\n    const handleNecessaryEmployeesChange = (day, shift, value) => {\n        const updatedNecessaryEmployees = { ...necessaryEmployees };\n\n        if (!updatedNecessaryEmployees[day]) {\n            updatedNecessaryEmployees[day] = {};\n        }\n\n        const parsedValue = parseInt(value, 10) || 0;\n\n        const selectedEmployeesCount = Object.entries(availability).filter(([_, userData]) => {\n            const availabilityInfo = userData?.[shift]?.[day];\n            return availabilityInfo?.status === 'selected';\n        }).length;\n\n        if (parsedValue < selectedEmployeesCount) {\n            return;\n        }\n\n        updatedNecessaryEmployees[day][shift] = parsedValue;\n\n        setNecessaryEmployees(updatedNecessaryEmployees);\n        calculateTotalNecessaryEmployees(updatedNecessaryEmployees);\n\n        const saveToDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                await saveNecessaryEmployees(currentCompany, weekKey, updatedNecessaryEmployees);\n            } catch (error) {\n                console.error('Failed to save necessary employees:', error);\n            }\n        };\n        saveToDB();\n    };\n\n    const calculateTotalNecessaryEmployees = (necessaryEmployeesData) => {\n        let total = 0;\n        Object.values(necessaryEmployeesData).forEach((dayData) => {\n            Object.values(dayData).forEach((shiftCount) => {\n                total += shiftCount || 0;\n            });\n        });\n        setTotalNecessaryEmployees(total);\n    };\n\n    useEffect(() => {\n        const total = Object.values(weeklyShiftTargets).reduce((sum, target) => sum + (target || 0), 0);\n        setTotalWeeklyTargets(total);\n    }, [weeklyShiftTargets]);\n\n    const togglePublishStatus = async () => {\n        if (!isPublished && !isScheduleFullyStaffed()) {\n            alert('Cannot publish schedule: not all shifts are fully staffed.');\n            return;\n        }\n\n        try {\n            const newStatus = !isPublished;\n            const weekKey = calculateWeekKey(weekOffset);\n\n            await savePublishStatus(currentCompany, weekKey, newStatus);\n\n            if (newStatus) {\n                const employeeList = Object.entries(users).filter(([_, u]) =>\n                    ['employee', 'admin'].includes(u.role)\n                );\n\n                const now = new Date();\n                const year = now.getFullYear();\n                const month = now.getMonth() + 1;\n\n                for (const [employeeId] of employeeList) {\n                    const { nightShifts, shabbatShifts, regularShifts } = calculateShiftStats(availability, employeeId);\n\n                    await saveWeeklyStats(\n                        currentCompany,\n                        year,\n                        month,\n                        weekKey,\n                        employeeId,\n                        { nightShifts, shabbatShifts, regularShifts }\n                    );\n                }\n\n                const weekRange = calculateWeekRange(weekOffset);\n                const notificationLink = `/schedule?weekOffset=${weekOffset}`;\n\n                for (const [employeeId] of employeeList) {\n                    await sendNotification(\n                        currentCompany,\n                        employeeId,\n                        `Weekly schedule for ${weekRange} has been published.`,\n                        notificationLink\n                    );\n                }\n            }\n\n            setIsPublished(newStatus);\n        } catch (error) {\n            console.error('Failed to toggle publish status:', error);\n        }\n    };\n\n    useEffect(() => {\n        const fetchPublishStatusFromDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const status = await fetchPublishStatus(currentCompany, weekKey);\n\n                setIsPublished(status?.status ?? false);\n            } catch (error) {\n                console.error('Failed to fetch publish status:', error);\n            }\n        };\n\n        if (currentCompany) {\n            fetchPublishStatusFromDB();\n        }\n    }, [currentCompany, weekOffset]);\n\n    const isScheduleFullyStaffed = () => {\n        for (const day of Object.keys(necessaryEmployees || {})) {\n            for (const shift of Object.keys(necessaryEmployees[day] || {})) {\n                const requiredCount = necessaryEmployees[day][shift] || 0;\n                const selectedCount = Object.entries(availability).filter(([_, userData]) => {\n                    const availabilityInfo = userData?.[shift]?.[day];\n                    return availabilityInfo?.status === 'selected';\n                }).length;\n\n                if (selectedCount !== requiredCount) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n\n    const isPublishButtonDisabled = !isScheduleFullyStaffed() && !isPublished;\n\n    const hasWeeklyNotes = (userId) => {\n        const userAvailability = availability[userId];\n        return userAvailability && userAvailability.notes && userAvailability.notes.trim() !== '';\n    };\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        setIsAdmin(loggedUser?.user.role === 'admin');\n        setHighlightedUser(loggedUser?.user.id);\n    }, []);\n\n    const toggleEditStatus = async () => {\n        try {\n            const newStatus = !isEditAllowed;\n            const weekKey = calculateWeekKey(weekOffset);\n\n            await saveEditStatus(currentCompany, weekKey, newStatus);\n\n            setIsEditAllowed(newStatus);\n        } catch (error) {\n            console.error('Failed to toggle edit status:', error);\n        }\n    };\n\n    useEffect(() => {\n        const fetchEditStatusFromDB = async () => {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const status = await fetchEditStatus(currentCompany, weekKey);\n\n                setIsEditAllowed(status?.isEditAllowed ?? false);\n            } catch (error) {\n                console.error('Failed to fetch edit status:', error);\n            }\n        };\n\n        if (currentCompany) {\n            fetchEditStatusFromDB();\n        }\n    }, [currentCompany, weekOffset]);\n\n    const calculateShiftCriticality = (day, shift) => {\n        const necessary = necessaryEmployees?.[day]?.[shift] || 0;\n        const selected = Object.values(availability).filter(userData =>\n            userData?.[shift]?.[day]?.status === 'selected'\n        ).length;\n\n        const defaults = Object.entries(availability)\n            .filter(([_, userData]) => {\n                const status = userData?.[shift]?.[day]?.status;\n                return userData?.[shift]?.[day]?.isAvailable && status !== 'selected' && status !== 'disabled';\n            })\n            .length;\n\n        if (necessary === selected) return 0;\n\n        return (necessary - selected) / Math.pow((defaults + 1), 2);\n    };\n\n    const findMostCriticalShifts = () => {\n        let highestCriticality = -Infinity;\n        let criticalShifts = [];\n\n        Object.keys(necessaryEmployees || {}).forEach(day => {\n            Object.keys(necessaryEmployees[day] || {}).forEach(shift => {\n                const criticality = calculateShiftCriticality(day, shift);\n                const necessary = necessaryEmployees?.[day]?.[shift] || 0;\n                const selected = Object.values(availability).filter(userData =>\n                    userData?.[shift]?.[day]?.status === 'selected'\n                ).length;\n\n                if (necessary === selected) return;\n\n                if (criticality > highestCriticality) {\n                    highestCriticality = criticality;\n                    criticalShifts = [{ day, shift }];\n                } else if (criticality === highestCriticality && criticality > 0) {\n                    criticalShifts.push({ day, shift });\n                }\n            });\n        });\n\n        return criticalShifts;\n    };\n\n    useEffect(() => {\n        setMostCriticalShifts(findMostCriticalShifts());\n    }, [necessaryEmployees, availability]);\n\n    const openConfirmModal = (actionType) => {\n        if (actionType === 'publish') {\n            setIsConfirmingPublish(true);\n            setIsConfirmingEdit(false);\n        } else if (actionType === 'edit') {\n            setIsConfirmingEdit(true);\n            setIsConfirmingPublish(false);\n        }\n        setIsConfirmModalOpen(true);\n    };\n\n    const closeConfirmModal = () => {\n        setIsConfirmModalOpen(false);\n    };\n\n    const getUserShiftTable = (userId) => {\n        if (!availability[userId]) return [];\n\n        const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n        return shifts.map((shift) => {\n            const row = { shift: shift[0] + (shift === 'Night' ? 't' : '') };\n            days.forEach((day) => {\n                const shiftData = availability[userId]?.[shift]?.[day];\n                if (shiftData?.status === 'selected') {\n                    row[day] = '✅';\n                } else if (shiftData?.isAvailable) {\n                    row[day] = '🟠';\n                } else {\n                    row[day] = '';\n                }\n            });\n            return row;\n        });\n    };\n\n    const handleOfferShift = async () => {\n        const weekKey = calculateWeekKey(weekOffset);\n        const shift = selectedShiftToSwap.shift;\n        const day = selectedShiftToSwap.day;\n        const fromUser = selectedShiftToSwap.userId;\n\n        const weekRange = calculateWeekRange(weekOffset);\n\n        let recipients = [];\n\n        if (offerToUserId) {\n            recipients.push(offerToUserId);\n        } else {\n            recipients = Object.entries(users)\n                .filter(([id, user]) => {\n                    if (id === fromUser) return false;\n\n                    const currentShiftCount = shiftCounts[id] || 0;\n                    if (currentShiftCount >= 6) return false;\n\n                    const isAssignedThatDay = Object.values(availability?.[id] || {}).some(\n                        shiftData => shiftData?.[day]?.status === 'selected'\n                    );\n                    if (isAssignedThatDay) return false;\n\n                    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                    const currentIndex = days.indexOf(day);\n                    const prev = days[currentIndex - 1];\n                    const next = days[currentIndex + 1];\n\n                    if (\n                        ['Morning', 'Noon'].includes(shift) &&\n                        prev &&\n                        availability?.[id]?.Night?.[prev]?.status === 'selected'\n                    ) return false;\n\n                    if (\n                        shift === 'Night' &&\n                        next &&\n                        (\n                            availability?.[id]?.Morning?.[next]?.status === 'selected' ||\n                            availability?.[id]?.Noon?.[next]?.status === 'selected'\n                        )\n                    ) return false;\n\n                    return true;\n                })\n                .map(([id]) => id);\n\n        }\n\n        for (const recipientId of recipients) {\n            const link = `/schedule?weekOffset=${weekOffset}&offerShift=true&offerDay=${day}&shift=${shift}&fromUser=${fromUser}&offeredTo=${recipientId}`;\n\n            await sendNotification(\n                currentCompany,\n                recipientId,\n                `You are offered to take ${shift} shift on ${day} (Week: ${weekRange}) from ${users[fromUser]?.name || 'a colleague'}.`,\n                link\n            );\n        }\n\n        toast.success('Shift offer sent successfully!');\n        setSelectedShiftToSwap(null);\n        setOfferToUserId('');\n    };\n\n    useEffect(() => {\n        if (hasCheckedShiftOffer || isLoading || !loggedInUser) return;\n\n        const offerShift = queryParams.get('offerShift');\n        const offerDay = queryParams.get('offerDay');\n        const offeredTo = queryParams.get('offeredTo');\n        const fromUser = queryParams.get('fromUser');\n        const shift = queryParams.get('shift');\n\n        if (\n            offerShift === 'true' &&\n            offerDay &&\n            shift &&\n            fromUser &&\n            loggedInUser?.user?.id === offeredTo\n        ) {\n            const isStillOffered = availability?.[fromUser]?.[shift]?.[offerDay]?.status === 'selected';\n\n            if (!isStillOffered) {\n                toast.info('This shift offer is no longer available.');\n            } else {\n                setShiftOfferParams({\n                    day: offerDay,\n                    shift,\n                    fromUser,\n                    offeredTo,\n                    weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n                });\n            }\n\n            setHasCheckedShiftOffer(true);\n        }\n    }, [location.search, availability, isLoading, loggedInUser]);\n\n    useEffect(() => {\n        const approve = queryParams.get('approveShiftTransfer');\n        const day = queryParams.get('day');\n        const shift = queryParams.get('shift');\n        const fromUser = queryParams.get('fromUser');\n        const toUser = queryParams.get('toUser');\n\n        if (\n            approve === 'true' &&\n            day && shift && fromUser && toUser &&\n            isAdmin\n        ) {\n            setShiftOfferParams({\n                day,\n                shift,\n                fromUser,\n                offeredTo: toUser,\n                weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n                isAdminApproval: true\n            });\n        }\n    }, [location.search, isAdmin]);\n\n    const handleSwapProposal = async () => {\n        const { shift: myShift, day: myDay, userId: me } = selectedShiftToSwap;\n        const { shift: theirShift, day: theirDay, userId: them } = secondSelectedShift;\n\n        const weekKey = calculateWeekKey(weekOffset);\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const myDayIndex = daysOfWeek.indexOf(myDay);\n        const theirDayIndex = daysOfWeek.indexOf(theirDay);\n        const dayBeforeMyDay = daysOfWeek[myDayIndex - 1];\n        const dayBeforeTheirDay = daysOfWeek[theirDayIndex - 1];\n        const dayAfterMyDay = daysOfWeek[myDayIndex + 1];\n        const dayAfterTheirDay = daysOfWeek[theirDayIndex + 1];\n\n        const meAssignedOnTheirDay = Object.entries(availability[me] || {}).some(\n            ([_, shiftData]) => shiftData?.[theirDay]?.status === 'selected'\n        );\n        const themAssignedOnMyDay = Object.entries(availability[them] || {}).some(\n            ([_, shiftData]) => shiftData?.[myDay]?.status === 'selected'\n        );\n\n        const meMorningAfterTheirNight = theirShift === 'Night' &&\n            dayAfterTheirDay &&\n            ['Morning', 'Noon'].some(s => availability?.[me]?.[s]?.[dayAfterTheirDay]?.status === 'selected');\n\n        const themMorningAfterMyNight = myShift === 'Night' &&\n            dayAfterMyDay &&\n            ['Morning', 'Noon'].some(s => availability?.[them]?.[s]?.[dayAfterMyDay]?.status === 'selected');\n\n        const meNightAfterMorningBeforeTheirDay = theirShift === 'Night' &&\n            dayBeforeTheirDay &&\n            ['Morning', 'Noon'].some(s => availability?.[me]?.[s]?.[dayBeforeTheirDay]?.status === 'selected');\n\n        const themNightAfterMorningBeforeMyDay = myShift === 'Night' &&\n            dayBeforeMyDay &&\n            ['Morning', 'Noon'].some(s => availability?.[them]?.[s]?.[dayBeforeMyDay]?.status === 'selected');\n\n        const meMorningAfterNightBeforeTheirDay = ['Morning', 'Noon'].includes(theirShift) &&\n            dayBeforeTheirDay &&\n            availability?.[me]?.Night?.[dayBeforeTheirDay]?.status === 'selected';\n\n        const themMorningAfterNightBeforeMyDay = ['Morning', 'Noon'].includes(myShift) &&\n            dayBeforeMyDay &&\n            availability?.[them]?.Night?.[dayBeforeMyDay]?.status === 'selected';\n\n        if (\n            meAssignedOnTheirDay ||\n            themAssignedOnMyDay ||\n            meMorningAfterTheirNight ||\n            themMorningAfterMyNight ||\n            meNightAfterMorningBeforeTheirDay ||\n            themNightAfterMorningBeforeMyDay ||\n            meMorningAfterNightBeforeTheirDay ||\n            themMorningAfterNightBeforeMyDay\n        ) {\n            toast.error(\"Swap not allowed: Conflict with shift-before/after rules or existing assignments.\");\n            return;\n        }\n\n        if (loggedInUser?.user?.role === 'admin') {\n            await updateAvailabilityStatus(currentCompany, weekKey, me, myShift, myDay, 'default');\n            await updateAvailabilityStatus(currentCompany, weekKey, them, theirShift, theirDay, 'default');\n            await updateAvailabilityStatus(currentCompany, weekKey, me, theirShift, theirDay, 'selected');\n            await updateAvailabilityStatus(currentCompany, weekKey, them, myShift, myDay, 'selected');\n\n            const updated = { ...availability };\n            updated[me][myShift][myDay].status = 'default';\n            updated[them][theirShift][theirDay].status = 'default';\n\n            updated[me][theirShift] ||= {};\n            updated[me][theirShift][theirDay] ||= { isAvailable: true };\n            updated[me][theirShift][theirDay].status = 'selected';\n\n            updated[them][myShift] ||= {};\n            updated[them][myShift][myDay] ||= { isAvailable: true };\n            updated[them][myShift][myDay].status = 'selected';\n\n            setAvailability(updated);\n            updateShiftCounts();\n\n            setSelectedShiftToSwap(null);\n            setSecondSelectedShift(null);\n            toast.success(\"Swap completed successfully.\");\n            return;\n        }\n\n        const adminId = Object.entries(users).find(([, u]) => u.role === 'admin')?.[0];\n        if (!adminId) {\n            toast.error('Admin not found.');\n            return;\n        }\n\n        const notificationLink = `/schedule?weekOffset=${weekOffset}&approveSwap=true&me=${me}&them=${them}&myDay=${myDay}&myShift=${myShift}&theirDay=${theirDay}&theirShift=${theirShift}`;\n\n        await sendNotification(\n            currentCompany,\n            adminId,\n            `${users[me]?.name || 'An employee'} requested to swap their ${myShift} shift on ${myDay} with ${users[them]?.name || 'another employee'}'s ${theirShift} shift on ${theirDay}.`,\n            notificationLink\n        );\n\n        toast.success('Your swap request has been sent to the admin.');\n        setSelectedShiftToSwap(null);\n        setSecondSelectedShift(null);\n    };\n\n    useEffect(() => {\n        const approveSwap = queryParams.get('approveSwap');\n        const me = queryParams.get('me');\n        const them = queryParams.get('them');\n        const myDay = queryParams.get('myDay');\n        const myShift = queryParams.get('myShift');\n        const theirDay = queryParams.get('theirDay');\n        const theirShift = queryParams.get('theirShift');\n\n        if (\n            approveSwap === 'true' &&\n            me && them && myDay && myShift && theirDay && theirShift &&\n            isAdmin\n        ) {\n            setShiftOfferParams({\n                isAdminSwapApproval: true,\n                me, them, myDay, myShift, theirDay, theirShift,\n                weekOffset: parseInt(queryParams.get('weekOffset'), 10) || 0,\n            });\n        }\n    }, [location.search, isAdmin]);\n\n    return (\n        <BackgroundWrapper >\n            <div>\n                <Navbar />\n                <ToastContainer />\n\n                {isConfirmModalOpen && (\n                    <div className=\"modal-overlay\">\n                        <div className=\"modal-content\">\n                            <h2>\n                                {isConfirmingPublish\n                                    ? isPublished ? 'Confirm Schedule Unpublishing' : 'Confirm Schedule Publication'\n                                    : isConfirmingEdit\n                                        ? isEditAllowed ? 'Confirm Disabling Editing' : 'Confirm Enabling Editing'\n                                        : ''}\n                            </h2>\n                            <p>\n                                {isConfirmingPublish\n                                    ? isPublished ? 'Are you sure you want to unpublish this schedule?' : 'Are you sure you want to publish this schedule?'\n                                    : isConfirmingEdit\n                                        ? isEditAllowed ? 'Are you sure you want to disable weekly availability submissions?' : 'Are you sure you want to enable weekly availability submissions?'\n                                        : ''}\n                            </p>\n                            <div className=\"modal-buttons\">\n                                <button className=\"confirm-button\" onClick={() => {\n                                    if (isConfirmingPublish) {\n                                        togglePublishStatus();\n                                    } else if (isConfirmingEdit) {\n                                        toggleEditStatus();\n                                    }\n                                    closeConfirmModal();\n                                }}>\n                                    Confirm\n                                </button>\n                                <button className=\"cancel-button\" onClick={closeConfirmModal}>Cancel</button>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                <div className=\"navbar-placeholder\"></div>\n                <div className=\"schedule-container\">\n                    <h1>Weekly Schedule</h1>\n                    {isAdmin && (\n                        <div className=\"view-toggle-container\">\n                            <button\n                                className=\"view-toggle-button\"\n                                onClick={() => setIsViewingAsEmployee(prev => !prev)}\n                            >\n                                {isViewingAsEmployee ? <FaEdit style={{ marginRight: '6px' }} /> : <FaCalendarCheck style={{ marginRight: '6px' }} />}\n                                {isViewingAsEmployee ? 'Back to Draft View' : 'View Final Schedule'}\n                            </button>\n                        </div>\n                    )}\n\n                    {isLoading ? (\n                        <Loader />\n\n                    ) : error ? (\n                        <p className=\"error\">{error}</p>\n                    ) : (\n                        <>\n                            {!isAdmin && (\n                                <div className=\"week-navigation centered-navigation\">\n                                    <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                        Previous Week\n                                    </button>\n                                    <h2 className=\"week-range\">{calculateWeekRange(weekOffset)}</h2>\n                                    <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                        Next Week\n                                    </button>\n                                </div>\n                            )}\n\n                            {(isAdmin && !isViewingAsEmployee) ? (\n                                <div className=\"schedule-content\">\n                                    <table className=\"schedule-table\">\n                                        <thead>\n                                            <tr>\n                                                <th>Shift</th>\n                                                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                                    (day, index) => (\n                                                        <th key={day}>\n                                                            {day} <br />\n                                                            <span className=\"date\">{weekDates[index]}</span>\n                                                        </th>\n                                                    )\n                                                )}\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                                <tr key={shift}>\n                                                    <td>{shift}</td>\n                                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                        const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                                                            const availabilityInfo = userData?.[shift]?.[day];\n                                                            return availabilityInfo?.status === 'selected';\n                                                        }).length;\n\n                                                        const isFullyStaffed = selectedEmployeesCount === (necessaryEmployees?.[day]?.[shift] || 0);\n                                                        const criticality = calculateShiftCriticality(day, shift);\n                                                        const isMostCritical = mostCriticalShifts.some(criticalShift =>\n                                                            criticalShift.day === day && criticalShift.shift === shift\n                                                        );\n\n                                                        return (\n                                                            <td\n                                                                key={day}\n                                                                className={`schedule-cell \n                                                                ${isFullyStaffed ? 'fully-staffed' : ''} \n                                                                ${isMostCritical ? 'most-critical' : ''}\n                                                            `}\n                                                            >\n                                                                <input\n                                                                    type=\"number\"\n                                                                    min=\"0\"\n                                                                    className=\"necessary-employees-input\"\n                                                                    value={necessaryEmployees?.[day]?.[shift] || 0}\n                                                                    onChange={(e) => handleNecessaryEmployeesChange(day, shift, e.target.value)}\n                                                                />\n\n                                                                <div className=\"selected-employees-indicator\">\n                                                                    {selectedEmployeesCount} Selected\n                                                                </div>\n\n                                                                {Object.entries(availability)\n                                                                    .filter(([userId, userData]) => {\n                                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                                        return availabilityInfo?.isAvailable;\n                                                                    })\n                                                                    .sort(([userIdA], [userIdB]) => {\n                                                                        const nameA = users[userIdA]?.name || '';\n                                                                        const nameB = users[userIdB]?.name || '';\n                                                                        return nameA.localeCompare(nameB);\n                                                                    })\n                                                                    .map(([userId, userData]) => {\n                                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                                        const statusClass = getStatusClass(availabilityInfo.status, userId);\n\n                                                                        return (\n                                                                            <div\n                                                                                key={userId}\n                                                                                className={`availability-entry ${statusClass}`}\n                                                                                onClick={() =>\n                                                                                    handleStatusUpdate(\n                                                                                        userId,\n                                                                                        shift,\n                                                                                        day,\n                                                                                        availabilityInfo.status\n                                                                                    )\n                                                                                }\n                                                                                style={{\n                                                                                    backgroundColor:\n                                                                                        availabilityInfo.status === 'selected'\n                                                                                            ? '#2ecc71'\n                                                                                            : availabilityInfo.status === 'disabled'\n                                                                                                ? '#e74c3c'\n                                                                                                : '#ffff',\n                                                                                    color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                                    pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                                    cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                                }}\n                                                                            >\n                                                                                {users[userId]?.name || 'Unknown'}\n                                                                            </div>\n                                                                        );\n                                                                    })}\n                                                            </td>\n                                                        );\n                                                    })}\n                                                </tr>\n                                            ))}\n\n                                        </tbody>\n                                    </table>\n\n                                    <div className=\"employees-list\">\n                                        <h3>Employees</h3>\n\n                                        <div className=\"week-navigation\">\n                                            <button className=\"week-nav-button\" onClick={() => handleWeekChange(-1)}>\n                                                <FaChevronLeft />\n                                            </button>\n                                            <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                                            <button className=\"week-nav-button\" onClick={() => handleWeekChange(1)}>\n                                                <FaChevronRight />\n                                            </button>\n                                        </div>\n\n                                        <div className=\"buttons-container\">\n                                            {isWarningVisible && (\n                                                <div className=\"warning-banner\">\n                                                    ⚠️ Warning: One or more shifts are no longer fully staffed. Please review the schedule.\n                                                </div>\n                                            )}\n\n                                            <button\n                                                className={`general-button ${isPublished ? 'green' : 'red'}`}\n                                                onClick={() => openConfirmModal('publish')}\n                                                disabled={isPublishButtonDisabled}\n                                            >\n                                                {isPublished ? 'Unpublish Schedule' : 'Publish Schedule'}\n                                                {isWarningVisible && <span className=\"publish-warning-icon\">🔴</span>}\n                                            </button>\n\n                                            <button\n                                                className={`general-button ${isEditAllowed ? 'green' : 'red'}`}\n                                                onClick={() => openConfirmModal('edit')}\n                                            >\n                                                {isEditAllowed ? 'Disable Editing' : 'Enable Editing'}\n                                            </button>\n\n                                        </div>\n\n                                        <div className=\"total-info-container\">\n                                            <h3>Weekly Overview</h3>\n                                            <hr />\n                                            <p>Weekly Staff: <span>{totalNecessaryEmployees}</span></p>\n                                            <hr />\n                                            <p>Weekly Shift Targets: <span>{totalWeeklyTargets}</span></p>\n                                            <hr />\n                                            <p>Assigned Shifts: <span>{totalAssignedShifts}</span></p>\n                                            <hr />\n                                        </div>\n\n                                        <ul>\n                                            {employeesWithAvailability.map(([userId, user]) => {\n                                                const isTargetMet = weeklyShiftTargets[userId] === shiftCounts[userId];\n                                                const hasNotes = hasWeeklyNotes(userId);\n                                                const backgroundColor = hasNotes ? 'yellow' : '#2980b9';\n                                                const textColor = hasNotes ? 'black' : 'white';\n\n                                                return (\n                                                    <li\n                                                        key={userId}\n                                                        onClick={() => handleEmployeeClick(userId)}\n                                                        className={`${highlightedUser === userId ? 'selected' : ''} ${isTargetMet ? 'target-met' : ''}`}\n                                                        style={{\n                                                            backgroundColor: isTargetMet ? '#d4edda' : 'inherit',\n                                                        }}\n                                                    >\n                                                        <div className=\"employee-details\">\n\n                                                            <span\n                                                                className=\"notes-indicator\"\n                                                                style={{\n                                                                    backgroundColor: backgroundColor,\n                                                                    color: textColor,\n                                                                }}\n                                                            >\n                                                                <span className=\"indicator-text\">i</span>\n                                                            </span>\n\n                                                            <span className=\"employee-name\">\n                                                                {user.name}\n                                                            </span>\n\n                                                            <div className=\"weekly-shift-target\">\n                                                                <label>\n                                                                    {shiftCounts[userId] || 0} shifts out of:\n                                                                    <input\n                                                                        type=\"number\"\n                                                                        min=\"0\"\n                                                                        max=\"6\"\n                                                                        value={weeklyShiftTargets[userId] || 0}\n                                                                        onClick={(e) => e.stopPropagation()}\n                                                                        onChange={(e) => handleWeeklyShiftTargetChange(userId, e.target.value)}\n                                                                        className=\"weekly-shift-input\"\n                                                                    />\n                                                                </label>\n                                                            </div>\n\n                                                            {highlightedUser === userId && (\n                                                                <>\n                                                                    {selectedUserNotes && selectedUserNotes !== 'No notes available.' && (\n                                                                        <div className=\"employee-notes\">\n                                                                            <h4>Notes:</h4>\n                                                                            <p>{selectedUserNotes}</p>\n                                                                        </div>\n                                                                    )}\n\n                                                                    <div className=\"employee-table\">\n                                                                        <div className=\"mini-schedule-legend compact\">\n                                                                            <span className=\"legend-symbol\">✅</span> Assigned &nbsp;&nbsp;\n                                                                            <span className=\"legend-symbol\">🟠</span> Submitted\n                                                                        </div>\n\n                                                                        <table className=\"mini-schedule-table\">\n                                                                            <thead>\n                                                                                <tr>\n                                                                                    <th>Shift</th>\n                                                                                    {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                                                                                        <th key={day}>{day}</th>\n                                                                                    ))}\n                                                                                </tr>\n                                                                            </thead>\n                                                                            <tbody>\n                                                                                {getUserShiftTable(userId).map((row) => (\n                                                                                    <tr key={row.shift}>\n                                                                                        <td>\n                                                                                            {{\n                                                                                                Morning: 'M',\n                                                                                                Noon: 'N',\n                                                                                                Evening: 'E',\n                                                                                                Night: 'Nt'\n                                                                                            }[row.shift] || row.shift}\n                                                                                        </td>\n                                                                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => (\n                                                                                            <td key={day}>{row[day]}</td>\n                                                                                        ))}\n                                                                                    </tr>\n                                                                                ))}\n                                                                            </tbody>\n                                                                        </table>\n                                                                    </div>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </li>\n                                                );\n                                            })}\n                                        </ul>\n                                    </div>\n                                </div>\n                            ) : (\n                                isPublished ? (\n                                    <div>\n                                        <div className=\"schedule-content\">\n                                            <table className=\"schedule-table\">\n                                                <thead>\n                                                    <tr>\n                                                        <th>Shift</th>\n                                                        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                                            (day, index) => (\n                                                                <th key={day}>\n                                                                    {day} <br />\n                                                                    <span className=\"date\">{weekDates[index]}</span>\n                                                                </th>\n                                                            )\n                                                        )}\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                                        <tr key={shift}>\n                                                            <td>{shift}</td>\n                                                            {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                                const selectedEmployees = Object.entries(availability).filter(([userId, userData]) => {\n                                                                    const availabilityInfo = userData?.[shift]?.[day];\n                                                                    return availabilityInfo?.status === 'selected';\n                                                                });\n\n                                                                return (\n                                                                    <td key={day} className=\"schedule-cell\">\n\n                                                                        {selectedEmployees\n                                                                            .sort(([userIdA], [userIdB]) => {\n                                                                                const nameA = users[userIdA]?.name?.toLowerCase() || '';\n                                                                                const nameB = users[userIdB]?.name?.toLowerCase() || '';\n                                                                                return nameA.localeCompare(nameB);\n                                                                            })\n                                                                            .map(([userId]) => {\n                                                                                const isOwnShift = userId === highlightedUser;\n                                                                                const isSelected = selectedShiftToSwap &&\n                                                                                    selectedShiftToSwap.userId === userId &&\n                                                                                    selectedShiftToSwap.day === day &&\n                                                                                    selectedShiftToSwap.shift === shift;\n\n                                                                                const isOfferedToMe = shiftOfferParams &&\n                                                                                    userId === shiftOfferParams.fromUser &&\n                                                                                    shift === shiftOfferParams.shift &&\n                                                                                    day === shiftOfferParams.day;\n\n                                                                                const isSecondSelected = secondSelectedShift &&\n                                                                                    secondSelectedShift.userId === userId &&\n                                                                                    secondSelectedShift.day === day &&\n                                                                                    secondSelectedShift.shift === shift;\n\n                                                                                console.log('[DEBUG] checking cell', {\n                                                                                    userId,\n                                                                                    shift,\n                                                                                    day,\n                                                                                    highlightedUser,\n                                                                                    isOwnShift,\n                                                                                    isSelected,\n                                                                                    isOfferedToMe,\n                                                                                    shiftOfferParams,\n                                                                                });\n\n                                                                                return (\n                                                                                    <div\n                                                                                        key={userId}\n                                                                                        className={`employee-button \n                                                                                        ${isOwnShift ? 'highlighted-own-shift' : ''} \n                                                                                        ${isSelected ? 'highlighted-swap-source' : ''} \n                                                                                        ${isSecondSelected ? 'highlighted-swap-target' : ''} \n                                                                                        ${isOfferedToMe ? 'offered-to-me' : ''} \n                                                                                        ${shiftOfferParams?.isAdminSwapApproval &&\n                                                                                                (\n                                                                                                    (userId === shiftOfferParams.me &&\n                                                                                                        shift === shiftOfferParams.myShift &&\n                                                                                                        day === shiftOfferParams.myDay) ||\n                                                                                                    (userId === shiftOfferParams.them &&\n                                                                                                        shift === shiftOfferParams.theirShift &&\n                                                                                                        day === shiftOfferParams.theirDay)\n                                                                                                )\n                                                                                                ? 'highlighted-swap'\n                                                                                                : ''\n                                                                                            }\n                                                                                    `}\n\n                                                                                        onClick={() => {\n                                                                                            if (isOwnShift) {\n                                                                                                if (\n                                                                                                    selectedShiftToSwap &&\n                                                                                                    selectedShiftToSwap.userId === userId &&\n                                                                                                    selectedShiftToSwap.shift === shift &&\n                                                                                                    selectedShiftToSwap.day === day\n                                                                                                ) {\n                                                                                                    setSelectedShiftToSwap(null);\n                                                                                                    setSecondSelectedShift(null);\n                                                                                                } else {\n                                                                                                    setSelectedShiftToSwap({ userId, shift, day });\n                                                                                                    setSecondSelectedShift(null);\n                                                                                                }\n                                                                                            } else if (selectedShiftToSwap && !secondSelectedShift) {\n                                                                                                setSecondSelectedShift({ userId, shift, day });\n                                                                                            } else {\n                                                                                                setSelectedShiftToSwap(null);\n                                                                                                setSecondSelectedShift(null);\n                                                                                            }\n                                                                                        }}\n                                                                                    >\n                                                                                        {users[userId]?.name || 'Unknown'}\n                                                                                    </div>\n                                                                                );\n                                                                            })\n                                                                        }\n                                                                    </td>\n                                                                );\n                                                            })}\n                                                        </tr>\n                                                    ))}\n                                                </tbody>\n                                            </table>\n\n                                            {isAdmin && (\n                                                <div className=\"employees-list\">\n                                                    <h3>Employees</h3>\n                                                    <ul>\n                                                        {employeesWithAvailability.map(([userId, user]) => {\n                                                            return (\n                                                                <li\n                                                                    key={userId}\n                                                                    onClick={() => handleEmployeeClick(userId)}\n                                                                    className={`${highlightedUser === userId ? 'selected' : ''}`}\n                                                                >\n                                                                    <div className=\"employee-details\">\n                                                                        <span className=\"employee-name\">{user.name}</span>\n                                                                    </div>\n                                                                </li>\n                                                            );\n                                                        })}\n                                                    </ul>\n                                                </div>\n                                            )}\n\n                                        </div>\n                                        {selectedShiftToSwap && (\n                                            secondSelectedShift ? (\n                                                <div className=\"swap-request-container\">\n                                                    <h3>Swap Shifts With Another Employee</h3>\n                                                    <p>\n                                                        You are proposing to swap your <strong>{selectedShiftToSwap.shift}</strong> shift on <strong>{selectedShiftToSwap.day}</strong>\n                                                        with <strong>{users[secondSelectedShift.userId]?.name}</strong>'s\n                                                        <strong> {secondSelectedShift.shift}</strong> shift on <strong>{secondSelectedShift.day}</strong>.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            onClick={handleSwapProposal}\n                                                        >\n                                                            Propose Swap\n                                                        </button>\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            style={{ backgroundColor: '#e74c3c' }}\n                                                            onClick={() => {\n                                                                setSelectedShiftToSwap(null);\n                                                                setSecondSelectedShift(null);\n                                                            }}\n                                                        >\n                                                            Cancel\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            ) : (\n                                                <div className=\"swap-request-container\">\n                                                    <h3>Offer Shift to Another Employee</h3>\n                                                    <p>\n                                                        You are offering your <strong>{selectedShiftToSwap.shift}</strong> shift on <strong>{selectedShiftToSwap.day}</strong> to another employee.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <label>\n                                                            Choose employee to offer the shift to:\n                                                            <select value={offerToUserId} onChange={(e) => setOfferToUserId(e.target.value)}>\n                                                                <option value=\"\">No one specific</option>\n                                                                {Object.entries(users)\n                                                                    .filter(([id, user]) => {\n                                                                        if (id === selectedShiftToSwap.userId) return false;\n\n                                                                        if (!user.companyIds?.some((company) => company.companyId === loggedInUser?.company?.id)) return false;\n\n                                                                        if ((shiftCounts[id] || 0) >= 6) return false;\n\n                                                                        const isAssignedThatDay = Object.values(availability?.[id] || {}).some(\n                                                                            shiftData => shiftData?.[selectedShiftToSwap.day]?.status === 'selected'\n                                                                        );\n                                                                        if (isAssignedThatDay) return false;\n\n                                                                        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n                                                                        const currentIndex = days.indexOf(selectedShiftToSwap.day);\n                                                                        const previousDay = days[currentIndex - 1];\n                                                                        const nextDay = days[currentIndex + 1];\n\n                                                                        if (['Morning', 'Noon'].includes(selectedShiftToSwap.shift) &&\n                                                                            previousDay &&\n                                                                            availability?.[id]?.Night?.[previousDay]?.status === 'selected'\n                                                                        ) return false;\n\n                                                                        if (selectedShiftToSwap.shift === 'Night' &&\n                                                                            nextDay &&\n                                                                            (\n                                                                                availability?.[id]?.Morning?.[nextDay]?.status === 'selected' ||\n                                                                                availability?.[id]?.Noon?.[nextDay]?.status === 'selected'\n                                                                            )\n                                                                        ) return false;\n\n                                                                        return true;\n                                                                    })\n\n                                                                    .sort(([, a], [, b]) => (a.name || '').localeCompare(b.name || ''))\n                                                                    .map(([id, user]) => (\n                                                                        <option key={id} value={id}>\n                                                                            {user.name}\n                                                                        </option>\n                                                                    ))}\n                                                            </select>\n                                                        </label>\n\n                                                        <button className=\"submit-swap-button\" onClick={handleOfferShift}>\n                                                            Offer Shift\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )\n                                        )}\n\n                                        {shiftOfferParams &&\n                                            loggedInUser?.user?.id === shiftOfferParams.offeredTo &&\n                                            availability?.[shiftOfferParams.fromUser]?.[shiftOfferParams.shift]?.[shiftOfferParams.day]?.status === 'selected' && (\n\n                                                <div className=\"swap-request-container\">\n                                                    <h3>You’ve received a shift offer</h3>\n                                                    <p>\n                                                        You are being offered the <strong>{shiftOfferParams.shift}</strong> shift on <strong>{shiftOfferParams.day}</strong> by{' '}\n                                                        <strong>{users[shiftOfferParams.fromUser]?.name || 'a colleague'}</strong>.\n                                                    </p>\n                                                    <div className=\"swap-form\">\n                                                        <button\n                                                            className=\"accept-swap-button\"\n                                                            onClick={async () => {\n                                                                const weekKey = calculateWeekKey(shiftOfferParams.weekOffset);\n                                                                const { shift, day, fromUser, offeredTo } = shiftOfferParams;\n\n                                                                const currentStatus = availability?.[fromUser]?.[shift]?.[day]?.status;\n                                                                if (currentStatus !== 'selected') {\n                                                                    toast.error('This shift has already been taken by someone else.');\n                                                                    setShiftOfferParams(null);\n                                                                    return;\n                                                                }\n\n                                                                const adminId = Object.entries(users).find(([, u]) => u.role === 'admin')?.[0];\n                                                                if (!adminId) {\n                                                                    toast.error('Admin not found.');\n                                                                    return;\n                                                                }\n\n                                                                const weekRange = calculateWeekRange(shiftOfferParams.weekOffset);\n                                                                const notificationLink = `/schedule?weekOffset=${shiftOfferParams.weekOffset}&approveShiftTransfer=true&day=${day}&shift=${shift}&fromUser=${fromUser}&toUser=${offeredTo}`;\n\n                                                                if (adminId === offeredTo) {\n                                                                    await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                                                                    await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n\n                                                                    const updated = { ...availability };\n                                                                    updated[fromUser][shift][day].status = 'default';\n                                                                    if (!updated[offeredTo]) updated[offeredTo] = {};\n                                                                    if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                                                                    if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = { isAvailable: true };\n                                                                    updated[offeredTo][shift][day].status = 'selected';\n\n                                                                    setAvailability(updated);\n                                                                    updateShiftCounts();\n\n                                                                    toast.success('Shift was successfully reassigned to you.');\n                                                                    setShiftOfferParams(null);\n                                                                } else {\n                                                                    await sendNotification(\n                                                                        currentCompany,\n                                                                        adminId,\n                                                                        `${users[offeredTo]?.name || 'An employee'} accepted the offer to take the ${shift} shift on ${day}. Please approve the change.`,\n                                                                        notificationLink\n                                                                    );\n\n                                                                    toast.success('Your request has been sent to the admin for approval.');\n                                                                    setShiftOfferParams(null);\n                                                                }\n                                                            }}\n                                                        >\n                                                            Accept Shift\n                                                        </button>\n\n                                                        <button\n                                                            className=\"submit-swap-button\"\n                                                            style={{ backgroundColor: '#e74c3c' }}\n                                                            onClick={() => {\n                                                                setShiftOfferParams(null);\n                                                                toast.info('You declined the shift.');\n                                                            }}\n                                                        >\n                                                            Decline\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            )}\n\n                                        {shiftOfferParams?.isAdminApproval && (\n                                            <div className=\"swap-request-container\">\n                                                <h3>Admin Approval Required</h3>\n                                                <p>\n                                                    Approve transfer of <strong>{shiftOfferParams.shift} </strong> shift on <strong>{shiftOfferParams.day} </strong>\n                                                    from <strong>{users[shiftOfferParams.fromUser]?.name || 'Unknown'} </strong>\n                                                    to <strong>{users[shiftOfferParams.offeredTo]?.name || 'Unknown'}</strong>?\n                                                </p>\n                                                <div className=\"swap-form\">\n                                                    <button\n                                                        className=\"accept-swap-button\"\n                                                        onClick={async () => {\n                                                            const { shift, day, fromUser, offeredTo, weekOffset } = shiftOfferParams;\n                                                            const weekKey = calculateWeekKey(weekOffset);\n\n                                                            const currentStatus = availability?.[fromUser]?.[shift]?.[day]?.status;\n                                                            if (currentStatus !== 'selected') {\n                                                                toast.error('This shift has already been reassigned.');\n                                                                setShiftOfferParams(null);\n                                                                return;\n                                                            }\n\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, fromUser, shift, day, 'default');\n                                                            await updateAvailabilityStatus(currentCompany, weekKey, offeredTo, shift, day, 'selected');\n\n                                                            const updated = { ...availability };\n                                                            updated[fromUser][shift][day].status = 'default';\n                                                            if (!updated[offeredTo]) updated[offeredTo] = {};\n                                                            if (!updated[offeredTo][shift]) updated[offeredTo][shift] = {};\n                                                            if (!updated[offeredTo][shift][day]) updated[offeredTo][shift][day] = { isAvailable: true };\n                                                            updated[offeredTo][shift][day].status = 'selected';\n\n                                                            setAvailability(updated);\n                                                            updateShiftCounts();\n\n                                                            const shabbatShiftsSet = new Set([\n                                                                'Friday|Evening',\n                                                                'Friday|Night',\n                                                                'Saturday|Morning',\n                                                                'Saturday|Noon',\n                                                                'Saturday|Evening',\n                                                            ]);\n                                                            const isShabbatShift = shabbatShiftsSet.has(`${day}|${shift}`);\n                                                            const isNightShift = shift === 'Night' && !isShabbatShift;\n                                                            const isRegularShift = !isShabbatShift && shift !== 'Night';\n\n                                                            if (isShabbatShift || isNightShift || isRegularShift) {\n                                                                const now = new Date();\n                                                                const year = now.getFullYear();\n                                                                const month = now.getMonth() + 1;\n\n                                                                const fromStats = calculateShiftStats(updated, fromUser);\n                                                                const toStats = calculateShiftStats(updated, offeredTo);\n\n                                                                await saveWeeklyStats(currentCompany, year, month, weekKey, fromUser, fromStats);\n                                                                await saveWeeklyStats(currentCompany, year, month, weekKey, offeredTo, toStats);\n                                                            }\n\n                                                            const fromUserName = users[fromUser]?.name || 'Unknown';\n                                                            const offeredToName = users[offeredTo]?.name || 'Unknown';\n                                                            const link = `/schedule?weekOffset=${weekOffset}`;\n\n                                                            if (fromUser !== loggedInUser?.user?.id) {\n                                                                await sendNotification(\n                                                                    currentCompany,\n                                                                    fromUser,\n                                                                    `The admin approved your request to transfer the ${shift} shift on ${day} to ${offeredToName}.`,\n                                                                    link\n                                                                );\n                                                            }\n\n                                                            if (offeredTo !== loggedInUser?.user?.id) {\n                                                                await sendNotification(\n                                                                    currentCompany,\n                                                                    offeredTo,\n                                                                    `The admin approved your request to take the ${shift} shift on ${day} from ${fromUserName}.`,\n                                                                    link\n                                                                );\n                                                            }\n\n                                                            toast.success('Shift transfer approved.');\n                                                            setShiftOfferParams(null);\n                                                        }}\n                                                    >\n                                                        Approve\n                                                    </button>\n\n                                                    <button\n                                                        className=\"submit-swap-button\"\n                                                        style={{ backgroundColor: '#e74c3c' }}\n                                                        onClick={async () => {\n                                                            setShiftOfferParams(null);\n                                                            toast.info('Shift transfer declined.');\n\n                                                            const { shift, day, fromUser, offeredTo, weekOffset } = shiftOfferParams;\n\n                                                            const fromUserName = users[fromUser]?.name || 'Unknown';\n                                                            const offeredToName = users[offeredTo]?.name || 'an employee';\n                                                            const weekRange = calculateWeekRange(weekOffset);\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                fromUser,\n                                                                `Your shift offer to ${offeredToName} for the ${shift} shift on ${day} was declined by the admin.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                offeredTo,\n                                                                `Your request to take the ${shift} shift on ${day} from ${fromUserName} was declined by the admin.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n                                                        }}\n                                                    >\n                                                        Decline\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        )}\n\n                                        {shiftOfferParams?.isAdminSwapApproval && (\n                                            <div className=\"swap-request-container\">\n                                                <h3>Admin Approval Required</h3>\n                                                <p>\n                                                    Approve shift swap between{' '}\n                                                    <strong>{users[shiftOfferParams.me]?.name || 'Unknown'}</strong>\n                                                    (shift: {shiftOfferParams.myShift} on {shiftOfferParams.myDay}) and{' '}\n                                                    <strong>{users[shiftOfferParams.them]?.name || 'Unknown'}</strong>\n                                                    (shift: {shiftOfferParams.theirShift} on {shiftOfferParams.theirDay})?\n                                                </p>\n                                                <div className=\"swap-form\">\n                                                    <button\n                                                        className=\"accept-swap-button\"\n                                                        onClick={async () => {\n                                                            const {\n                                                                me,\n                                                                them,\n                                                                myDay,\n                                                                myShift,\n                                                                theirDay,\n                                                                theirShift,\n                                                                weekOffset,\n                                                            } = shiftOfferParams;\n                                                            const weekKey = calculateWeekKey(weekOffset);\n\n                                                            const myStatus = availability?.[me]?.[myShift]?.[myDay]?.status;\n                                                            const theirStatus = availability?.[them]?.[theirShift]?.[theirDay]?.status;\n\n                                                            if (myStatus !== 'selected' || theirStatus !== 'selected') {\n                                                                toast.error('One of the shifts has already changed.');\n                                                                setShiftOfferParams(null);\n                                                                return;\n                                                            }\n\n                                                            await updateAvailabilityStatus(\n                                                                currentCompany,\n                                                                weekKey,\n                                                                me,\n                                                                myShift,\n                                                                myDay,\n                                                                'default'\n                                                            );\n                                                            await updateAvailabilityStatus(\n                                                                currentCompany,\n                                                                weekKey,\n                                                                them,\n                                                                theirShift,\n                                                                theirDay,\n                                                                'default'\n                                                            );\n                                                            await updateAvailabilityStatus(\n                                                                currentCompany,\n                                                                weekKey,\n                                                                me,\n                                                                theirShift,\n                                                                theirDay,\n                                                                'selected'\n                                                            );\n                                                            await updateAvailabilityStatus(\n                                                                currentCompany,\n                                                                weekKey,\n                                                                them,\n                                                                myShift,\n                                                                myDay,\n                                                                'selected'\n                                                            );\n\n                                                            const updated = { ...availability };\n                                                            updated[me][myShift][myDay].status = 'default';\n                                                            updated[them][theirShift][theirDay].status = 'default';\n\n                                                            updated[me][theirShift] ||= {};\n                                                            updated[me][theirShift][theirDay] ||= { isAvailable: true };\n                                                            updated[me][theirShift][theirDay].status = 'selected';\n\n                                                            updated[them][myShift] ||= {};\n                                                            updated[them][myShift][myDay] ||= { isAvailable: true };\n                                                            updated[them][myShift][myDay].status = 'selected';\n\n                                                            setAvailability(updated);\n                                                            updateShiftCounts();\n\n                                                            // --- עדכון סטטיסטיקות ---\n                                                            const shabbatShiftsSet = new Set([\n                                                                'Friday|Evening',\n                                                                'Friday|Night',\n                                                                'Saturday|Morning',\n                                                                'Saturday|Noon',\n                                                                'Saturday|Evening',\n                                                            ]);\n                                                            const isShabbatShift =\n                                                                shabbatShiftsSet.has(`${myDay}|${myShift}`) ||\n                                                                shabbatShiftsSet.has(`${theirDay}|${theirShift}`);\n                                                            const isNightShift =\n                                                                (myShift === 'Night' || theirShift === 'Night') && !isShabbatShift;\n                                                            const isRegularShift =\n                                                                !isShabbatShift &&\n                                                                myShift !== 'Night' &&\n                                                                theirShift !== 'Night';\n\n                                                            if (isShabbatShift || isNightShift || isRegularShift) {\n                                                                const now = new Date();\n                                                                const year = now.getFullYear();\n                                                                const month = now.getMonth() + 1;\n\n                                                                const meStats = calculateShiftStats(updated, me);\n                                                                const themStats = calculateShiftStats(updated, them);\n\n                                                                await saveWeeklyStats(currentCompany, year, month, weekKey, me, meStats);\n                                                                await saveWeeklyStats(\n                                                                    currentCompany,\n                                                                    year,\n                                                                    month,\n                                                                    weekKey,\n                                                                    them,\n                                                                    themStats\n                                                                );\n                                                            }\n\n                                                            toast.success('Swap approved and shifts updated.');\n                                                            setShiftOfferParams(null);\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                me,\n                                                                `The admin approved your shift swap. You are now assigned to the ${theirShift} shift on ${theirDay}.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n\n                                                            await sendNotification(\n                                                                currentCompany,\n                                                                them,\n                                                                `The admin approved your shift swap. You are now assigned to the ${myShift} shift on ${myDay}.`,\n                                                                `/schedule?weekOffset=${weekOffset}`\n                                                            );\n                                                        }}\n                                                    >\n                                                        Approve\n                                                    </button>\n\n                                                    <button\n                                                        className=\"submit-swap-button\"\n                                                        style={{ backgroundColor: '#e74c3c' }}\n                                                        onClick={() => {\n                                                            setShiftOfferParams(null);\n                                                            toast.info('Swap request declined.');\n                                                        }}\n                                                    >\n                                                        Decline\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        )}\n\n                                    </div>\n                                ) : (\n                                    <p className=\"no-schedule-message\">\n                                        No published schedule is available for this week.\n                                    </p>\n                                )\n                            )}\n                        </>\n                    )}\n                </div>\n            </div>\n        </BackgroundWrapper>\n    );\n}\n\nexport default ScheduleScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}