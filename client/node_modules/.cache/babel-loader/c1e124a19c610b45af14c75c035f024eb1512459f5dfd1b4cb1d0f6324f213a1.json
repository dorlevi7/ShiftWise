{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { toast, ToastContainer } from 'react-toastify';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\nimport { saveAvailability, getAvailability, saveNecessaryEmployees, getNecessaryEmployees, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { getWeekDateObjects, calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport Select from 'react-select'; // ודא שזה מופיע בתחילת הקובץ\n\nimport Modal from 'react-modal';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { saveVacationRequest } from '../services/availabilityService';\nimport { sendNotification } from '../services/notificationService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst AvailabilityScreen = () => {\n  _s();\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [availability, setAvailability] = useState(null);\n  const [notes, setNotes] = useState('');\n  const [currentWeek, setCurrentWeek] = useState(1);\n  const [userData, setUserData] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const [sortConfig, setSortConfig] = useState({\n    key: 'name',\n    direction: 'asc'\n  });\n  const [isEditAllowed, setIsEditAllowed] = useState(true);\n  const [vacationModalOpen, setVacationModalOpen] = useState(false);\n  const [vacationStartDate, setVacationStartDate] = useState(null);\n  const [vacationEndDate, setVacationEndDate] = useState(null);\n  const navigate = useNavigate();\n  const [weekDays, setWeekDays] = useState([]);\n  const [textDirection, setTextDirection] = useState('rtl'); // ברירת מחדל לעברית\n\n  useEffect(() => {\n    const fetchEditStatusForWeek = async () => {\n      if (!userData) return;\n      const companyId = userData.company.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      try {\n        var _status$isEditAllowed;\n        const status = await fetchEditStatus(companyId, weekKey);\n        setIsEditAllowed((_status$isEditAllowed = status === null || status === void 0 ? void 0 : status.isEditAllowed) !== null && _status$isEditAllowed !== void 0 ? _status$isEditAllowed : false);\n      } catch (error) {\n        console.error('Failed to fetch edit status:', error);\n        setIsEditAllowed(false);\n      }\n    };\n    fetchEditStatusForWeek();\n  }, [userData, currentWeek]);\n  const formatDate = date => {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // חודשים מ־0 עד 11\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  };\n\n  // On component mount, retrieve the logged-in user from localStorage.\n  // If no user is found, redirect to the login page.\n  // If the user is an admin, fetch all employees associated with the same company.\n  // Otherwise, set the selected employee ID to the current user's ID.\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      if (loggedUser.user.role === 'admin') {\n        const fetchEmployees = async () => {\n          try {\n            const usersData = await getUsers();\n            const companyId = loggedUser.company.id;\n            if (companyId) {\n              const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n                id,\n                ...user\n              })).filter(user => {\n                var _user$companyIds;\n                return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(company => company.companyId === companyId);\n              });\n              setEmployees(filteredEmployees);\n            }\n          } catch (error) {\n            console.error('Error fetching employees:', error);\n          }\n        };\n        fetchEmployees();\n      } else {\n        setUserData(loggedUser);\n        if (loggedUser.user.role === 'admin') {\n          // ... קוד לאדמין\n        } else {\n          setSelectedEmployeeId(loggedUser.user.id);\n\n          // ✅ הוספה כאן:\n          const fetchCurrentUserData = async () => {\n            try {\n              const usersData = await getUsers();\n              const userFromDB = usersData[loggedUser.user.id];\n              if (userFromDB) {\n                setEmployees([{\n                  id: loggedUser.user.id,\n                  ...userFromDB\n                }]);\n              }\n            } catch (error) {\n              console.error(\"Error fetching current user data:\", error);\n            }\n          };\n          fetchCurrentUserData();\n        }\n      }\n    }\n  }, [navigate]);\n\n  // Whenever the current week, selected employee, or user data changes,\n  // fetch the availability data for the selected employee for the relevant week.\n  // Initialize the availability state and notes based on the fetched data.\n  useEffect(() => {\n    const fetchAvailability = async () => {\n      if (!selectedEmployeeId || !userData) return;\n      const companyId = userData.company.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      try {\n        const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n        setAvailability(initializeAvailability(fetchedAvailability || {}));\n        setNotes((fetchedAvailability === null || fetchedAvailability === void 0 ? void 0 : fetchedAvailability.notes) || '');\n      } catch (error) {\n        console.error('Error fetching availability:', error);\n        alert('Failed to fetch availability. Please try again.');\n      }\n    };\n    fetchAvailability();\n  }, [currentWeek, selectedEmployeeId, userData]);\n\n  // Update the current week number whenever the week offset changes.\n  // Week numbers are 1-based, so we add 1 to the offset.\n  useEffect(() => {\n    const newWeek = weekOffset + 1;\n    setCurrentWeek(newWeek);\n    setWeekDays(getWeekDateObjects(newWeek));\n  }, [weekOffset]);\n\n  // Initialize the availability structure for all shifts and days of the week.\n  // If existing availability data is provided, use it;\n  // otherwise, default to isAvailable: false and status: 'default'.\n  const initializeAvailability = existingAvailability => {\n    return shifts.reduce((acc, shift) => {\n      acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n        var _existingAvailability, _existingAvailability2, _existingAvailability3, _existingAvailability4;\n        dayAcc[day] = {\n          isAvailable: ((_existingAvailability = existingAvailability[shift]) === null || _existingAvailability === void 0 ? void 0 : (_existingAvailability2 = _existingAvailability[day]) === null || _existingAvailability2 === void 0 ? void 0 : _existingAvailability2.isAvailable) || false,\n          status: ((_existingAvailability3 = existingAvailability[shift]) === null || _existingAvailability3 === void 0 ? void 0 : (_existingAvailability4 = _existingAvailability3[day]) === null || _existingAvailability4 === void 0 ? void 0 : _existingAvailability4.status) || 'default'\n        };\n        return dayAcc;\n      }, {});\n      return acc;\n    }, {});\n  };\n\n  // Toggle the availability status for a specific shift and day.\n  const handleAvailabilityChange = (shift, day) => {\n    setAvailability(prev => ({\n      ...prev,\n      [shift]: {\n        ...prev[shift],\n        [day]: {\n          ...prev[shift][day],\n          isAvailable: !prev[shift][day].isAvailable\n        }\n      }\n    }));\n  };\n\n  // Toggle all shifts for a specific day column.\n  // If all are selected, unselect them; otherwise, select all.\n  const handleDayColumnClick = day => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = shifts.every(shift => {\n        var _updatedAvailability$, _updatedAvailability$2;\n        return (_updatedAvailability$ = updatedAvailability[shift]) === null || _updatedAvailability$ === void 0 ? void 0 : (_updatedAvailability$2 = _updatedAvailability$[day]) === null || _updatedAvailability$2 === void 0 ? void 0 : _updatedAvailability$2.isAvailable;\n      });\n      shifts.forEach(shift => {\n        updatedAvailability[shift][day].isAvailable = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n\n  // Toggle all days for a specific shift row.\n  // If all are selected, unselect them; otherwise, select all.\n  const handleShiftRowClick = shift => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = daysOfWeek.every(day => {\n        var _updatedAvailability$3, _updatedAvailability$4;\n        return (_updatedAvailability$3 = updatedAvailability[shift]) === null || _updatedAvailability$3 === void 0 ? void 0 : (_updatedAvailability$4 = _updatedAvailability$3[day]) === null || _updatedAvailability$4 === void 0 ? void 0 : _updatedAvailability$4.isAvailable;\n      });\n      daysOfWeek.forEach(day => {\n        updatedAvailability[shift][day].isAvailable = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n\n  // Toggle all checkboxes in the entire table.\n  // If everything is selected, unselect all; otherwise, select all.\n  const handleSelectAll = () => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = shifts.every(shift => daysOfWeek.every(day => updatedAvailability[shift][day].isAvailable));\n      shifts.forEach(shift => {\n        daysOfWeek.forEach(day => {\n          updatedAvailability[shift][day].isAvailable = !allSelected;\n        });\n      });\n      return updatedAvailability;\n    });\n  };\n\n  // Handle submission of availability data for the selected employee.\n  // 1. Show error if no employee is selected.\n  // 2. Check if editing is allowed for the current week.\n  // 3. Save the availability data along with any notes.\n  // 4. If no necessaryEmployees data exists for the week, initialize it with default (0) values for each shift per day.\n  // 5. Save necessaryEmployees data only if it was just initialized.\n  const handleSubmit = async () => {\n    if (!selectedEmployeeId) {\n      toast.error('Please select an employee to save availability.');\n      return;\n    }\n    const companyId = userData.company.id;\n    const weekKey = calculateWeekKey(currentWeek);\n    try {\n      // בדיקת סטטוס עריכה עבור השבוע\n      const editStatus = await fetchEditStatus(companyId, weekKey);\n      if (!(editStatus !== null && editStatus !== void 0 && editStatus.isEditAllowed)) {\n        toast.error('Editing availability is currently locked for this week.');\n        return;\n      }\n\n      // שמירת זמינות של המשתמש\n      const dataToSave = {\n        ...availability,\n        notes\n      };\n      await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n\n      // בדיקה אם יש כבר נתונים של necessaryEmployees ב-DB\n      let necessaryEmployees = await getNecessaryEmployees(companyId, weekKey);\n\n      // אם אין נתונים ב-DB, לאתחל אותם\n      if (!necessaryEmployees || Object.keys(necessaryEmployees).length === 0) {\n        necessaryEmployees = daysOfWeek.reduce((acc, day) => {\n          acc[day] = {\n            Morning: 0,\n            Noon: 0,\n            Evening: 0,\n            Night: 0\n          };\n          return acc;\n        }, {});\n\n        // שמירה ל-DB רק במקרה של אתחול\n        await saveNecessaryEmployees(companyId, weekKey, necessaryEmployees);\n      }\n      toast.success('Availability and notes saved successfully!');\n    } catch (error) {\n      console.error('Error saving availability or necessary employees:', error);\n      toast.error('Failed to save data. Please try again.');\n    }\n  };\n  const handleVacationRequestSubmit = async e => {\n    e.preventDefault();\n    if (!vacationStartDate || !vacationEndDate) {\n      toast.error('Please select valid dates');\n      return;\n    }\n    try {\n      const companyId = userData.company.id;\n      const userId = selectedEmployeeId;\n      const requestId = uuidv4();\n      const employee = employees.find(e => e.id === userId);\n      const employeeName = (employee === null || employee === void 0 ? void 0 : employee.name) || 'Unknown';\n\n      // שמירת הבקשה ב־DB\n      await saveVacationRequest(companyId, userId, requestId, {\n        startDate: vacationStartDate.toISOString(),\n        endDate: vacationEndDate.toISOString(),\n        status: 'pending',\n        requestedBy: {\n          id: userId,\n          name: employeeName\n        }\n      });\n\n      // ✅ שליפת כל המשתמשים מהשרת\n      const allUsers = await getUsers();\n      const companyAdmin = Object.entries(allUsers).find(([, user]) => {\n        var _user$companyIds2;\n        return user.role === 'admin' && ((_user$companyIds2 = user.companyIds) === null || _user$companyIds2 === void 0 ? void 0 : _user$companyIds2.some(c => c.companyId === companyId));\n      });\n      if (companyAdmin) {\n        const adminId = companyAdmin[0];\n        await sendNotification(companyId, adminId, `${employeeName} requested vacation from ${formatDate(vacationStartDate)} to ${formatDate(vacationEndDate)}. Please approve or decline the request.`, '/admin/vacation-requests', {\n          vacationUserId: userId,\n          // מזהה העובד שביקש את החופשה\n          vacationRequestId: requestId // מזהה ייחודי של בקשת החופשה (UUID)\n        });\n      }\n      toast.success('Vacation request sent successfully');\n      setVacationModalOpen(false);\n      setVacationStartDate(null);\n      setVacationEndDate(null);\n    } catch (error) {\n      console.error('Vacation request error:', error);\n      toast.error('Error submitting vacation request');\n    }\n  };\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 16\n    }, this);\n  }\n  const sortedEmployees = [...employees].sort((a, b) => {\n    if (a[sortConfig.key] < b[sortConfig.key]) {\n      return sortConfig.direction === 'asc' ? -1 : 1;\n    }\n    if (a[sortConfig.key] > b[sortConfig.key]) {\n      return sortConfig.direction === 'asc' ? 1 : -1;\n    }\n    return 0;\n  });\n  const handleSort = key => {\n    setSortConfig(prev => ({\n      key,\n      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  // Render the availability screen UI:\n  // - Show the Navbar and a placeholder to prevent layout shift.\n  // - If the user is an admin, show a dropdown to select an employee.\n  // - If an employee is selected, display:\n  //   1. Week navigation controls (previous/next).\n  //   2. A table for selecting availability per shift and day.\n  //   3. A notes textarea for weekly notes.\n  //   4. A submit button to save availability and notes.\n  // - Display toast notifications using <ToastContainer />.\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"availability-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Weekly Availability\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 21\n        }, this), userData.user.role === 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"employeeDropdown\",\n              children: \"Select Employee:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              className: \"employee-dropdown\",\n              classNamePrefix: \"react-select\",\n              options: sortedEmployees.map(e => ({\n                value: e.id,\n                label: e.name\n              })),\n              onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n              placeholder: \"Select an employee\",\n              menuPlacement: \"bottom\",\n              value: sortedEmployees.map(e => ({\n                value: e.id,\n                label: e.name\n              })).find(o => o.value === selectedEmployeeId) || null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 29\n          }, this), selectedEmployeeId && (() => {\n            const selected = employees.find(emp => emp.id === selectedEmployeeId);\n            return /*#__PURE__*/_jsxDEV(\"img\", {\n              src: (selected === null || selected === void 0 ? void 0 : selected.photoData) || '/images/Profile.jpeg',\n              alt: `${(selected === null || selected === void 0 ? void 0 : selected.name) || 'Employee'}'s profile`,\n              className: \"employee-photo-preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 37\n            }, this);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 25\n        }, this), userData.user.role !== 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-selector\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee-photo-wrapper\",\n            children: (() => {\n              const currentUser = employees.find(emp => emp.id === selectedEmployeeId);\n              return /*#__PURE__*/_jsxDEV(\"img\", {\n                src: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.photoData) || '/images/Profile.jpeg',\n                alt: `${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || 'Your'} profile`,\n                className: \"employee-photo-preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 41\n              }, this);\n            })()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 25\n        }, this), selectedEmployeeId && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"week-navigation\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(-1),\n              children: \"Previous Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"week-range\",\n              children: calculateWeekRange(currentWeek)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(1),\n              children: \"Next Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"availability-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  onClick: handleSelectAll,\n                  className: \"clickable\",\n                  children: \"Select All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 41\n                }, this), weekDays.map(({\n                  name,\n                  date\n                }) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  onClick: () => handleDayColumnClick(name),\n                  className: \"clickable\",\n                  children: [name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 476,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      fontSize: '0.85em',\n                      color: '#555'\n                    },\n                    children: date\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 477,\n                    columnNumber: 49\n                  }, this)]\n                }, name, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 45\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: shifts.map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  onClick: () => handleShiftRowClick(shift),\n                  className: \"clickable\",\n                  children: shift\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 45\n                }, this), weekDays.map(({\n                  name\n                }) => {\n                  var _availability$shift, _availability$shift$n;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      checked: (availability === null || availability === void 0 ? void 0 : (_availability$shift = availability[shift]) === null || _availability$shift === void 0 ? void 0 : (_availability$shift$n = _availability$shift[name]) === null || _availability$shift$n === void 0 ? void 0 : _availability$shift$n.isAvailable) || false,\n                      onChange: () => handleAvailabilityChange(shift, name)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 491,\n                      columnNumber: 53\n                    }, this)\n                  }, name, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 490,\n                    columnNumber: 49\n                  }, this);\n                })]\n              }, shift, true, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"direction-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"textDirection\",\n              children: \"Text direction:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              id: \"textDirection\",\n              className: \"employee-dropdown\",\n              classNamePrefix: \"react-select\",\n              options: [{\n                value: 'rtl',\n                label: 'RTL (Hebrew)'\n              }, {\n                value: 'ltr',\n                label: 'LTR (English)'\n              }],\n              value: [{\n                value: 'rtl',\n                label: 'RTL (Hebrew)'\n              }, {\n                value: 'ltr',\n                label: 'LTR (English)'\n              }].find(option => option.value === textDirection),\n              onChange: selectedOption => setTextDirection(selectedOption.value),\n              placeholder: \"Select direction\",\n              menuPlacement: \"bottom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"notes-textarea\",\n            placeholder: textDirection === 'rtl' ? 'כתוב כאן את ההערות השבועיות...' : 'Write weekly notes here...',\n            dir: textDirection,\n            style: {\n              textAlign: textDirection === 'rtl' ? 'right' : 'left'\n            },\n            value: notes,\n            onChange: e => setNotes(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textAlign: 'center',\n              color: isEditAllowed ? 'green' : 'red',\n              fontWeight: 'bold'\n            },\n            children: isEditAllowed ? 'Availability editing is currently open.' : 'Availability editing is currently locked.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-button\",\n            onClick: handleSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-button\",\n            style: {\n              marginTop: '10px'\n            },\n            onClick: () => setVacationModalOpen(true),\n            children: \"Request Vacation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: vacationModalOpen,\n        onRequestClose: () => setVacationModalOpen(false),\n        className: \"modal\",\n        overlayClassName: \"modal-overlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Vacation Request\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleVacationRequestSubmit,\n          className: \"addOrEdit-employee-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Vacation Range:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selectsRange: true,\n            startDate: vacationStartDate,\n            endDate: vacationEndDate,\n            onChange: ([start, end]) => {\n              setVacationStartDate(start);\n              setVacationEndDate(end);\n            },\n            dateFormat: \"dd/MM/yyyy\",\n            placeholderText: \"Select vacation dates\",\n            className: \"datepicker\",\n            isClearable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '20px',\n              textAlign: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"submit-button\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setVacationModalOpen(false),\n              className: \"cancel-button\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 398,\n    columnNumber: 9\n  }, this);\n};\n_s(AvailabilityScreen, \"LIBl+du6JtgrVHjP5ZtZaMpBZnY=\", false, function () {\n  return [useNavigate];\n});\n_c = AvailabilityScreen;\nexport default AvailabilityScreen;\nvar _c;\n$RefreshReg$(_c, \"AvailabilityScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Navbar","toast","ToastContainer","Loader","BackgroundWrapper","saveAvailability","getAvailability","saveNecessaryEmployees","getNecessaryEmployees","fetchEditStatus","getUsers","getWeekDateObjects","calculateWeekKey","calculateWeekRange","Select","Modal","DatePicker","v4","uuidv4","saveVacationRequest","sendNotification","jsxDEV","_jsxDEV","Fragment","_Fragment","setAppElement","AvailabilityScreen","_s","daysOfWeek","shifts","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","availability","setAvailability","notes","setNotes","currentWeek","setCurrentWeek","userData","setUserData","weekOffset","setWeekOffset","sortConfig","setSortConfig","key","direction","isEditAllowed","setIsEditAllowed","vacationModalOpen","setVacationModalOpen","vacationStartDate","setVacationStartDate","vacationEndDate","setVacationEndDate","navigate","weekDays","setWeekDays","textDirection","setTextDirection","fetchEditStatusForWeek","companyId","company","id","weekKey","_status$isEditAllowed","status","error","console","formatDate","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","loggedUser","JSON","parse","localStorage","getItem","user","role","fetchEmployees","usersData","filteredEmployees","Object","entries","map","filter","_user$companyIds","companyIds","some","fetchCurrentUserData","userFromDB","fetchAvailability","fetchedAvailability","initializeAvailability","alert","newWeek","existingAvailability","reduce","acc","shift","dayAcc","_existingAvailability","_existingAvailability2","_existingAvailability3","_existingAvailability4","isAvailable","handleAvailabilityChange","prev","handleDayColumnClick","updatedAvailability","stringify","allSelected","every","_updatedAvailability$","_updatedAvailability$2","forEach","handleShiftRowClick","_updatedAvailability$3","_updatedAvailability$4","handleSelectAll","handleSubmit","editStatus","dataToSave","necessaryEmployees","keys","length","Morning","Noon","Evening","Night","success","handleVacationRequestSubmit","e","preventDefault","userId","requestId","employee","find","employeeName","name","startDate","toISOString","endDate","requestedBy","allUsers","companyAdmin","_user$companyIds2","c","adminId","vacationUserId","vacationRequestId","handleWeekChange","prevOffset","fileName","_jsxFileName","lineNumber","columnNumber","sortedEmployees","sort","a","b","handleSort","children","className","htmlFor","classNamePrefix","options","value","label","onChange","option","placeholder","menuPlacement","o","selected","emp","src","photoData","alt","currentUser","onClick","style","fontSize","color","_availability$shift","_availability$shift$n","type","checked","selectedOption","dir","textAlign","target","fontWeight","marginTop","isOpen","onRequestClose","overlayClassName","onSubmit","selectsRange","start","end","dateFormat","placeholderText","isClearable","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { toast, ToastContainer } from 'react-toastify';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\nimport { saveAvailability, getAvailability, saveNecessaryEmployees, getNecessaryEmployees, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { getWeekDateObjects, calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\nimport Select from 'react-select'; // ודא שזה מופיע בתחילת הקובץ\n\nimport Modal from 'react-modal';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { saveVacationRequest } from '../services/availabilityService';\n\nimport { sendNotification } from '../services/notificationService';\n\nModal.setAppElement('#root');\n\nconst AvailabilityScreen = () => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n\n    const [employees, setEmployees] = useState([]);\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [availability, setAvailability] = useState(null);\n    const [notes, setNotes] = useState('');\n    const [currentWeek, setCurrentWeek] = useState(1);\n    const [userData, setUserData] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n    const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });\n    const [isEditAllowed, setIsEditAllowed] = useState(true);\n\n    const [vacationModalOpen, setVacationModalOpen] = useState(false);\n    const [vacationStartDate, setVacationStartDate] = useState(null);\n    const [vacationEndDate, setVacationEndDate] = useState(null);\n\n    const navigate = useNavigate();\n\n    const [weekDays, setWeekDays] = useState([]);\n\n    const [textDirection, setTextDirection] = useState('rtl'); // ברירת מחדל לעברית\n\n    useEffect(() => {\n        const fetchEditStatusForWeek = async () => {\n            if (!userData) return;\n\n            const companyId = userData.company.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            try {\n                const status = await fetchEditStatus(companyId, weekKey);\n                setIsEditAllowed(status?.isEditAllowed ?? false);\n            } catch (error) {\n                console.error('Failed to fetch edit status:', error);\n                setIsEditAllowed(false);\n            }\n        };\n\n        fetchEditStatusForWeek();\n    }, [userData, currentWeek]);\n\n    const formatDate = (date) => {\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0'); // חודשים מ־0 עד 11\n        const year = date.getFullYear();\n        return `${day}/${month}/${year}`;\n    };\n\n    // On component mount, retrieve the logged-in user from localStorage.\n    // If no user is found, redirect to the login page.\n    // If the user is an admin, fetch all employees associated with the same company.\n    // Otherwise, set the selected employee ID to the current user's ID.\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n\n            if (loggedUser.user.role === 'admin') {\n                const fetchEmployees = async () => {\n                    try {\n                        const usersData = await getUsers();\n                        const companyId = loggedUser.company.id;\n\n                        if (companyId) {\n                            const filteredEmployees = Object.entries(usersData)\n                                .map(([id, user]) => ({ id, ...user }))\n                                .filter((user) =>\n                                    user.companyIds?.some((company) => company.companyId === companyId)\n                                );\n\n                            setEmployees(filteredEmployees);\n                        }\n                    } catch (error) {\n                        console.error('Error fetching employees:', error);\n                    }\n                };\n\n                fetchEmployees();\n            } else {\n                setUserData(loggedUser);\n\n                if (loggedUser.user.role === 'admin') {\n                    // ... קוד לאדמין\n                } else {\n                    setSelectedEmployeeId(loggedUser.user.id);\n\n                    // ✅ הוספה כאן:\n                    const fetchCurrentUserData = async () => {\n                        try {\n                            const usersData = await getUsers();\n                            const userFromDB = usersData[loggedUser.user.id];\n                            if (userFromDB) {\n                                setEmployees([{ id: loggedUser.user.id, ...userFromDB }]);\n                            }\n                        } catch (error) {\n                            console.error(\"Error fetching current user data:\", error);\n                        }\n                    };\n\n                    fetchCurrentUserData();\n                }\n            }\n\n        }\n    }, [navigate]);\n\n    // Whenever the current week, selected employee, or user data changes,\n    // fetch the availability data for the selected employee for the relevant week.\n    // Initialize the availability state and notes based on the fetched data.\n    useEffect(() => {\n        const fetchAvailability = async () => {\n            if (!selectedEmployeeId || !userData) return;\n\n            const companyId = userData.company.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            try {\n                const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n                setAvailability(initializeAvailability(fetchedAvailability || {}));\n                setNotes(fetchedAvailability?.notes || '');\n            } catch (error) {\n                console.error('Error fetching availability:', error);\n                alert('Failed to fetch availability. Please try again.');\n            }\n        };\n\n        fetchAvailability();\n    }, [currentWeek, selectedEmployeeId, userData]);\n\n    // Update the current week number whenever the week offset changes.\n    // Week numbers are 1-based, so we add 1 to the offset.\n    useEffect(() => {\n        const newWeek = weekOffset + 1;\n        setCurrentWeek(newWeek);\n        setWeekDays(getWeekDateObjects(newWeek));\n    }, [weekOffset]);\n\n\n    // Initialize the availability structure for all shifts and days of the week.\n    // If existing availability data is provided, use it;\n    // otherwise, default to isAvailable: false and status: 'default'.\n    const initializeAvailability = (existingAvailability) => {\n        return shifts.reduce((acc, shift) => {\n            acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n                dayAcc[day] = {\n                    isAvailable: existingAvailability[shift]?.[day]?.isAvailable || false,\n                    status: existingAvailability[shift]?.[day]?.status || 'default'\n                };\n                return dayAcc;\n            }, {});\n            return acc;\n        }, {});\n    };\n\n    // Toggle the availability status for a specific shift and day.\n    const handleAvailabilityChange = (shift, day) => {\n        setAvailability((prev) => ({\n            ...prev,\n            [shift]: {\n                ...prev[shift],\n                [day]: {\n                    ...prev[shift][day],\n                    isAvailable: !prev[shift][day].isAvailable,\n                },\n            },\n        }));\n    };\n\n    // Toggle all shifts for a specific day column.\n    // If all are selected, unselect them; otherwise, select all.\n    const handleDayColumnClick = (day) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = shifts.every((shift) => updatedAvailability[shift]?.[day]?.isAvailable);\n\n            shifts.forEach((shift) => {\n                updatedAvailability[shift][day].isAvailable = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    // Toggle all days for a specific shift row.\n    // If all are selected, unselect them; otherwise, select all.\n    const handleShiftRowClick = (shift) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = daysOfWeek.every((day) => updatedAvailability[shift]?.[day]?.isAvailable);\n\n            daysOfWeek.forEach((day) => {\n                updatedAvailability[shift][day].isAvailable = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    // Toggle all checkboxes in the entire table.\n    // If everything is selected, unselect all; otherwise, select all.\n    const handleSelectAll = () => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = shifts.every((shift) =>\n                daysOfWeek.every((day) => updatedAvailability[shift][day].isAvailable)\n            );\n\n            shifts.forEach((shift) => {\n                daysOfWeek.forEach((day) => {\n                    updatedAvailability[shift][day].isAvailable = !allSelected;\n                });\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    // Handle submission of availability data for the selected employee.\n    // 1. Show error if no employee is selected.\n    // 2. Check if editing is allowed for the current week.\n    // 3. Save the availability data along with any notes.\n    // 4. If no necessaryEmployees data exists for the week, initialize it with default (0) values for each shift per day.\n    // 5. Save necessaryEmployees data only if it was just initialized.\n    const handleSubmit = async () => {\n        if (!selectedEmployeeId) {\n            toast.error('Please select an employee to save availability.');\n            return;\n        }\n\n        const companyId = userData.company.id;\n        const weekKey = calculateWeekKey(currentWeek);\n\n        try {\n            // בדיקת סטטוס עריכה עבור השבוע\n            const editStatus = await fetchEditStatus(companyId, weekKey);\n            if (!editStatus?.isEditAllowed) {\n                toast.error('Editing availability is currently locked for this week.');\n                return;\n            }\n\n            // שמירת זמינות של המשתמש\n            const dataToSave = {\n                ...availability,\n                notes,\n            };\n            await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n\n            // בדיקה אם יש כבר נתונים של necessaryEmployees ב-DB\n            let necessaryEmployees = await getNecessaryEmployees(companyId, weekKey);\n\n            // אם אין נתונים ב-DB, לאתחל אותם\n            if (!necessaryEmployees || Object.keys(necessaryEmployees).length === 0) {\n                necessaryEmployees = daysOfWeek.reduce((acc, day) => {\n                    acc[day] = {\n                        Morning: 0,\n                        Noon: 0,\n                        Evening: 0,\n                        Night: 0,\n                    };\n                    return acc;\n                }, {});\n\n                // שמירה ל-DB רק במקרה של אתחול\n                await saveNecessaryEmployees(companyId, weekKey, necessaryEmployees);\n            }\n\n            toast.success('Availability and notes saved successfully!');\n        } catch (error) {\n            console.error('Error saving availability or necessary employees:', error);\n            toast.error('Failed to save data. Please try again.');\n        }\n    };\n\n    const handleVacationRequestSubmit = async (e) => {\n        e.preventDefault();\n\n        if (!vacationStartDate || !vacationEndDate) {\n            toast.error('Please select valid dates');\n            return;\n        }\n\n        try {\n            const companyId = userData.company.id;\n            const userId = selectedEmployeeId;\n            const requestId = uuidv4();\n\n            const employee = employees.find((e) => e.id === userId);\n            const employeeName = employee?.name || 'Unknown';\n\n            // שמירת הבקשה ב־DB\n            await saveVacationRequest(companyId, userId, requestId, {\n                startDate: vacationStartDate.toISOString(),\n                endDate: vacationEndDate.toISOString(),\n                status: 'pending',\n                requestedBy: {\n                    id: userId,\n                    name: employeeName,\n                },\n            });\n\n            // ✅ שליפת כל המשתמשים מהשרת\n            const allUsers = await getUsers();\n            const companyAdmin = Object.entries(allUsers).find(\n                ([, user]) =>\n                    user.role === 'admin' &&\n                    user.companyIds?.some(c => c.companyId === companyId)\n            );\n\n            if (companyAdmin) {\n                const adminId = companyAdmin[0];\n                await sendNotification(\n                    companyId,\n                    adminId,\n                    `${employeeName} requested vacation from ${formatDate(vacationStartDate)} to ${formatDate(vacationEndDate)}. Please approve or decline the request.`,\n                    '/admin/vacation-requests',\n                    {\n                        vacationUserId: userId,           // מזהה העובד שביקש את החופשה\n                        vacationRequestId: requestId      // מזהה ייחודי של בקשת החופשה (UUID)\n                    }\n                );\n            }\n\n            toast.success('Vacation request sent successfully');\n            setVacationModalOpen(false);\n            setVacationStartDate(null);\n            setVacationEndDate(null);\n        } catch (error) {\n            console.error('Vacation request error:', error);\n            toast.error('Error submitting vacation request');\n        }\n    };\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    if (!userData) {\n        return <Loader />;\n    }\n\n    const sortedEmployees = [...employees].sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n            return sortConfig.direction === 'asc' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n            return sortConfig.direction === 'asc' ? 1 : -1;\n        }\n        return 0;\n    });\n\n    const handleSort = (key) => {\n        setSortConfig((prev) => ({\n            key,\n            direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc',\n        }));\n    };\n\n    // Render the availability screen UI:\n    // - Show the Navbar and a placeholder to prevent layout shift.\n    // - If the user is an admin, show a dropdown to select an employee.\n    // - If an employee is selected, display:\n    //   1. Week navigation controls (previous/next).\n    //   2. A table for selecting availability per shift and day.\n    //   3. A notes textarea for weekly notes.\n    //   4. A submit button to save availability and notes.\n    // - Display toast notifications using <ToastContainer />.\n    return (\n        <BackgroundWrapper>\n\n            <div>\n                <Navbar />\n                <div className=\"navbar-placeholder\"></div>\n\n                <div className=\"availability-container\">\n                    <h1>Weekly Availability</h1>\n                    {userData.user.role === 'admin' && (\n                        <div className=\"employee-selector\">\n                            {/* Select dropdown */}\n                            <div className=\"dropdown-container\">\n                                <label htmlFor=\"employeeDropdown\">Select Employee:</label>\n                                <Select\n                                    className=\"employee-dropdown\"\n                                    classNamePrefix=\"react-select\"\n                                    options={sortedEmployees.map((e) => ({ value: e.id, label: e.name }))}\n                                    onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                    placeholder=\"Select an employee\"\n                                    menuPlacement=\"bottom\"\n                                    value={\n                                        sortedEmployees\n                                            .map((e) => ({ value: e.id, label: e.name }))\n                                            .find((o) => o.value === selectedEmployeeId) || null\n                                    }\n                                />\n                            </div>\n\n                            {/* Employee photo */}\n                            {selectedEmployeeId && (() => {\n                                const selected = employees.find(emp => emp.id === selectedEmployeeId);\n                                return (\n                                    <img\n                                        src={selected?.photoData || '/images/Profile.jpeg'}\n                                        alt={`${selected?.name || 'Employee'}'s profile`}\n                                        className=\"employee-photo-preview\"\n                                    />\n                                );\n                            })()}\n\n                        </div>\n                    )}\n\n                    {userData.user.role !== 'admin' && (\n                        <div className=\"employee-selector\">\n                            <div className=\"employee-photo-wrapper\">\n                                {(() => {\n                                    const currentUser = employees.find(emp => emp.id === selectedEmployeeId);\n                                    return (\n                                        <img\n                                            src={currentUser?.photoData || '/images/Profile.jpeg'}\n                                            alt={`${currentUser?.name || 'Your'} profile`}\n                                            className=\"employee-photo-preview\"\n                                        />\n                                    );\n                                })()}\n                            </div>\n                        </div>\n                    )}\n\n                    {selectedEmployeeId && (\n                        <>\n                            <div className=\"week-navigation\">\n                                <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                    Previous Week\n                                </button>\n                                <h2 className=\"week-range\">{calculateWeekRange(currentWeek)}</h2>\n                                <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                    Next Week\n                                </button>\n                            </div>\n                            <table className=\"availability-table\">\n                                <thead>\n                                    <tr>\n                                        <th onClick={handleSelectAll} className=\"clickable\">Select All</th>\n                                        {weekDays.map(({ name, date }) => (\n                                            <th key={name} onClick={() => handleDayColumnClick(name)} className=\"clickable\">\n                                                {name}\n                                                <br />\n                                                <span style={{ fontSize: '0.85em', color: '#555' }}>{date}</span>\n                                            </th>\n                                        ))}\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {shifts.map((shift) => (\n                                        <tr key={shift}>\n                                            <td onClick={() => handleShiftRowClick(shift)} className=\"clickable\">\n                                                {shift}\n                                            </td>\n                                            {weekDays.map(({ name }) => (\n                                                <td key={name}>\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        checked={availability?.[shift]?.[name]?.isAvailable || false}\n                                                        onChange={() => handleAvailabilityChange(shift, name)}\n                                                    />\n                                                </td>\n                                            ))}\n                                        </tr>\n                                    ))}\n                                </tbody>\n\n                            </table>\n                            <div className=\"direction-toggle\">\n                                <label htmlFor=\"textDirection\">Text direction:</label>\n                                <Select\n                                    id=\"textDirection\"\n                                    className=\"employee-dropdown\"\n                                    classNamePrefix=\"react-select\"\n                                    options={[\n                                        { value: 'rtl', label: 'RTL (Hebrew)' },\n                                        { value: 'ltr', label: 'LTR (English)' },\n                                    ]}\n                                    value={\n                                        [{ value: 'rtl', label: 'RTL (Hebrew)' }, { value: 'ltr', label: 'LTR (English)' }]\n                                            .find(option => option.value === textDirection)\n                                    }\n                                    onChange={(selectedOption) => setTextDirection(selectedOption.value)}\n                                    placeholder=\"Select direction\"\n                                    menuPlacement=\"bottom\"\n                                />\n                            </div>\n\n\n                            <textarea\n                                className=\"notes-textarea\"\n                                placeholder={textDirection === 'rtl' ? 'כתוב כאן את ההערות השבועיות...' : 'Write weekly notes here...'}\n                                dir={textDirection}\n                                style={{ textAlign: textDirection === 'rtl' ? 'right' : 'left' }}\n                                value={notes}\n                                onChange={(e) => setNotes(e.target.value)}\n                            ></textarea>\n\n\n                            <p style={{ textAlign: 'center', color: isEditAllowed ? 'green' : 'red', fontWeight: 'bold' }}>\n                                {isEditAllowed ? 'Availability editing is currently open.' : 'Availability editing is currently locked.'}\n                            </p>\n\n                            <button className=\"submit-button\" onClick={handleSubmit}>\n                                Submit\n                            </button>\n                            <button\n                                className=\"submit-button\"\n                                style={{ marginTop: '10px' }}\n                                onClick={() => setVacationModalOpen(true)}\n                            >\n                                Request Vacation\n                            </button>\n\n                        </>\n                    )}\n                </div>\n\n                <ToastContainer />\n                <Modal\n                    isOpen={vacationModalOpen}\n                    onRequestClose={() => setVacationModalOpen(false)}\n                    className=\"modal\"\n                    overlayClassName=\"modal-overlay\"\n                >\n                    <h3>Vacation Request</h3>\n                    <form onSubmit={handleVacationRequestSubmit} className=\"addOrEdit-employee-form\">\n                        <label>Select Vacation Range:</label>\n                        <DatePicker\n                            selectsRange\n                            startDate={vacationStartDate}\n                            endDate={vacationEndDate}\n                            onChange={([start, end]) => {\n                                setVacationStartDate(start);\n                                setVacationEndDate(end);\n                            }}\n                            dateFormat=\"dd/MM/yyyy\"\n                            placeholderText=\"Select vacation dates\"\n                            className=\"datepicker\"\n                            isClearable\n                        />\n\n                        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n                            <button type=\"submit\" className=\"submit-button\">Submit</button>\n                            <button\n                                type=\"button\"\n                                onClick={() => setVacationModalOpen(false)}\n                                className=\"cancel-button\"\n                            >\n                                Cancel\n                            </button>\n                        </div>\n                    </form>\n                </Modal>\n\n            </div>\n        </BackgroundWrapper>\n\n    );\n};\n\nexport default AvailabilityScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}