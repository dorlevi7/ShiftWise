{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { saveAvailability, getAvailability } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AvailabilityScreen = () => {\n  _s();\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [availability, setAvailability] = useState(null);\n  const [notes, setNotes] = useState('');\n  const [currentWeek, setCurrentWeek] = useState(1);\n  const [userData, setUserData] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      if (loggedUser.user.role === 'admin') {\n        const fetchEmployees = async () => {\n          try {\n            const usersData = await getUsers();\n            const companyId = loggedUser.company.id;\n            if (companyId) {\n              const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n                id,\n                ...user\n              })).filter(user => {\n                var _user$companyIds;\n                return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(company => company.companyId === companyId);\n              });\n              setEmployees(filteredEmployees);\n            }\n          } catch (error) {\n            console.error('Error fetching employees:', error);\n          }\n        };\n        fetchEmployees();\n      } else {\n        setSelectedEmployeeId(loggedUser.id);\n      }\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const fetchAvailability = async () => {\n      if (!selectedEmployeeId || !userData) return;\n      const companyId = userData.company.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      try {\n        const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n        setAvailability(initializeAvailability(fetchedAvailability || {}));\n        setNotes((fetchedAvailability === null || fetchedAvailability === void 0 ? void 0 : fetchedAvailability.notes) || '');\n      } catch (error) {\n        console.error('Error fetching availability:', error);\n        alert('Failed to fetch availability. Please try again.');\n      }\n    };\n    fetchAvailability();\n  }, [currentWeek, selectedEmployeeId, userData]);\n  const calculateWeekKey = weekOffset => {\n    const today = new Date();\n    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n    const formatDate = date => `${date.getFullYear()}_${String(date.getMonth() + 1).padStart(2, '0')}_${String(date.getDate()).padStart(2, '0')}`;\n    return `week_${formatDate(firstDayOfWeek)}`;\n  };\n  const calculateWeekRange = weekOffset => {\n    const today = new Date();\n    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n    const lastDayOfWeek = new Date(firstDayOfWeek);\n    lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);\n    const formatDate = date => {\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    };\n    return `${formatDate(firstDayOfWeek)} - ${formatDate(lastDayOfWeek)}`;\n  };\n  const initializeAvailability = existingAvailability => {\n    return shifts.reduce((acc, shift) => {\n      acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n        var _existingAvailability;\n        dayAcc[day] = ((_existingAvailability = existingAvailability[shift]) === null || _existingAvailability === void 0 ? void 0 : _existingAvailability[day]) || false;\n        return dayAcc;\n      }, {});\n      return acc;\n    }, {});\n  };\n  const handleAvailabilityChange = (shift, day) => {\n    setAvailability(prev => ({\n      ...prev,\n      [shift]: {\n        ...prev[shift],\n        [day]: !prev[shift][day]\n      }\n    }));\n  };\n  const handleDayColumnClick = day => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev)); // יצירת עותק עמוק\n      const allSelected = shifts.every(shift => {\n        var _updatedAvailability$;\n        return (_updatedAvailability$ = updatedAvailability[shift]) === null || _updatedAvailability$ === void 0 ? void 0 : _updatedAvailability$[day];\n      });\n      shifts.forEach(shift => {\n        updatedAvailability[shift][day] = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleShiftRowClick = shift => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev)); // יצירת עותק עמוק\n      const allSelected = daysOfWeek.every(day => {\n        var _updatedAvailability$2;\n        return (_updatedAvailability$2 = updatedAvailability[shift]) === null || _updatedAvailability$2 === void 0 ? void 0 : _updatedAvailability$2[day];\n      });\n      daysOfWeek.forEach(day => {\n        updatedAvailability[shift][day] = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleSelectAll = () => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev)); // יצירת עותק עמוק\n      const allSelected = shifts.every(shift => daysOfWeek.every(day => updatedAvailability[shift][day]));\n      shifts.forEach(shift => {\n        daysOfWeek.forEach(day => {\n          updatedAvailability[shift][day] = !allSelected;\n        });\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleWeekChange = direction => {\n    setCurrentWeek(prevWeek => prevWeek + direction);\n  };\n  const handleSubmit = async () => {\n    if (!selectedEmployeeId) {\n      alert('Please select an employee to save availability.');\n      return;\n    }\n    const companyId = userData.company.id;\n    const weekKey = calculateWeekKey(currentWeek);\n    try {\n      const dataToSave = {\n        ...availability,\n        notes\n      };\n      await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n      alert('Availability and notes saved successfully!');\n    } catch (error) {\n      console.error('Error saving availability or notes:', error);\n      alert('Failed to save availability or notes. Please try again.');\n    }\n  };\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"availability-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weekly Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), userData.user.role === 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employee-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"employeeDropdown\",\n        children: \"Select Employee:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"employeeDropdown\",\n        onChange: e => setSelectedEmployeeId(e.target.value),\n        value: selectedEmployeeId || '',\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select an employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: employee.id,\n          children: employee.name\n        }, employee.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }, this), selectedEmployeeId && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"navigation-button\",\n          onClick: () => handleWeekChange(-1),\n          children: \"Previous Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"week-range\",\n          children: calculateWeekRange(currentWeek)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"navigation-button\",\n          onClick: () => handleWeekChange(1),\n          children: \"Next Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"availability-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              onClick: handleSelectAll,\n              className: \"clickable\",\n              children: \"Select All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 33\n            }, this), daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n              onClick: () => handleDayColumnClick(day),\n              className: \"clickable\",\n              children: day\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: shifts.map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              onClick: () => handleShiftRowClick(shift),\n              className: \"clickable\",\n              children: shift\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 37\n            }, this), daysOfWeek.map(day => {\n              var _availability$shift;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: (availability === null || availability === void 0 ? void 0 : (_availability$shift = availability[shift]) === null || _availability$shift === void 0 ? void 0 : _availability$shift[day]) || false,\n                  onChange: () => handleAvailabilityChange(shift, day)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 45\n                }, this)\n              }, day, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 41\n              }, this);\n            })]\n          }, shift, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"notes-textarea\",\n        placeholder: \"Write weekly notes here...\",\n        value: notes,\n        onChange: e => setNotes(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n};\n_s(AvailabilityScreen, \"f/EYGdYwgxYBwKpYns1YTNFv/cc=\", false, function () {\n  return [useNavigate];\n});\n_c = AvailabilityScreen;\nexport default AvailabilityScreen;\nvar _c;\n$RefreshReg$(_c, \"AvailabilityScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Navbar","saveAvailability","getAvailability","getUsers","jsxDEV","_jsxDEV","Fragment","_Fragment","AvailabilityScreen","_s","daysOfWeek","shifts","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","availability","setAvailability","notes","setNotes","currentWeek","setCurrentWeek","userData","setUserData","navigate","loggedUser","JSON","parse","localStorage","getItem","user","role","fetchEmployees","usersData","companyId","company","id","filteredEmployees","Object","entries","map","filter","_user$companyIds","companyIds","some","error","console","fetchAvailability","weekKey","calculateWeekKey","fetchedAvailability","initializeAvailability","alert","weekOffset","today","Date","firstDayOfWeek","setDate","getDate","getDay","formatDate","date","getFullYear","String","getMonth","padStart","calculateWeekRange","lastDayOfWeek","day","month","year","existingAvailability","reduce","acc","shift","dayAcc","_existingAvailability","handleAvailabilityChange","prev","handleDayColumnClick","updatedAvailability","stringify","allSelected","every","_updatedAvailability$","forEach","handleShiftRowClick","_updatedAvailability$2","handleSelectAll","handleWeekChange","direction","prevWeek","handleSubmit","dataToSave","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","onChange","e","target","value","employee","name","onClick","_availability$shift","type","checked","placeholder","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { saveAvailability, getAvailability } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\n\nconst AvailabilityScreen = () => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n\n    const [employees, setEmployees] = useState([]);\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [availability, setAvailability] = useState(null);\n    const [notes, setNotes] = useState('');\n    const [currentWeek, setCurrentWeek] = useState(1);\n    const [userData, setUserData] = useState(null);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n\n            if (loggedUser.user.role === 'admin') {\n                const fetchEmployees = async () => {\n                    try {\n                        const usersData = await getUsers();\n                        const companyId = loggedUser.company.id;\n\n                        if (companyId) {\n                            const filteredEmployees = Object.entries(usersData)\n                                .map(([id, user]) => ({ id, ...user }))\n                                .filter((user) =>\n                                    user.companyIds?.some((company) => company.companyId === companyId)\n                                );\n\n                            setEmployees(filteredEmployees);\n                        }\n                    } catch (error) {\n                        console.error('Error fetching employees:', error);\n                    }\n                };\n\n                fetchEmployees();\n            } else {\n                setSelectedEmployeeId(loggedUser.id);\n            }\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchAvailability = async () => {\n            if (!selectedEmployeeId || !userData) return;\n\n            const companyId = userData.company.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            try {\n                const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n                setAvailability(initializeAvailability(fetchedAvailability || {}));\n                setNotes(fetchedAvailability?.notes || '');\n            } catch (error) {\n                console.error('Error fetching availability:', error);\n                alert('Failed to fetch availability. Please try again.');\n            }\n        };\n\n        fetchAvailability();\n    }, [currentWeek, selectedEmployeeId, userData]);\n\n    const calculateWeekKey = (weekOffset) => {\n        const today = new Date();\n        const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n        const formatDate = (date) => `${date.getFullYear()}_${String(date.getMonth() + 1).padStart(2, '0')}_${String(date.getDate()).padStart(2, '0')}`;\n        return `week_${formatDate(firstDayOfWeek)}`;\n    };\n\n    const calculateWeekRange = (weekOffset) => {\n        const today = new Date();\n        const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n        const lastDayOfWeek = new Date(firstDayOfWeek);\n        lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);\n\n        const formatDate = (date) => {\n            const day = String(date.getDate()).padStart(2, '0');\n            const month = String(date.getMonth() + 1).padStart(2, '0');\n            const year = date.getFullYear();\n            return `${day}/${month}/${year}`;\n        };\n\n        return `${formatDate(firstDayOfWeek)} - ${formatDate(lastDayOfWeek)}`;\n    };\n\n    const initializeAvailability = (existingAvailability) => {\n        return shifts.reduce((acc, shift) => {\n            acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n                dayAcc[day] = existingAvailability[shift]?.[day] || false;\n                return dayAcc;\n            }, {});\n            return acc;\n        }, {});\n    };\n\n    const handleAvailabilityChange = (shift, day) => {\n        setAvailability((prev) => ({\n            ...prev,\n            [shift]: {\n                ...prev[shift],\n                [day]: !prev[shift][day],\n            },\n        }));\n    };\n\n    const handleDayColumnClick = (day) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev)); // יצירת עותק עמוק\n            const allSelected = shifts.every((shift) => updatedAvailability[shift]?.[day]);\n\n            shifts.forEach((shift) => {\n                updatedAvailability[shift][day] = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleShiftRowClick = (shift) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev)); // יצירת עותק עמוק\n            const allSelected = daysOfWeek.every((day) => updatedAvailability[shift]?.[day]);\n\n            daysOfWeek.forEach((day) => {\n                updatedAvailability[shift][day] = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleSelectAll = () => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev)); // יצירת עותק עמוק\n            const allSelected = shifts.every((shift) =>\n                daysOfWeek.every((day) => updatedAvailability[shift][day])\n            );\n\n            shifts.forEach((shift) => {\n                daysOfWeek.forEach((day) => {\n                    updatedAvailability[shift][day] = !allSelected;\n                });\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleWeekChange = (direction) => {\n        setCurrentWeek((prevWeek) => prevWeek + direction);\n    };\n\n    const handleSubmit = async () => {\n        if (!selectedEmployeeId) {\n            alert('Please select an employee to save availability.');\n            return;\n        }\n\n        const companyId = userData.company.id;\n        const weekKey = calculateWeekKey(currentWeek);\n\n        try {\n            const dataToSave = {\n                ...availability,\n                notes,\n            };\n\n            await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n            alert('Availability and notes saved successfully!');\n        } catch (error) {\n            console.error('Error saving availability or notes:', error);\n            alert('Failed to save availability or notes. Please try again.');\n        }\n    };\n\n    if (!userData) {\n        return <p>Loading...</p>;\n    }\n\n    return (\n        <div className=\"availability-container\">\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div> {/* Add placeholder for Navbar */}\n            <h1>Weekly Availability</h1>\n            {userData.user.role === 'admin' && (\n                <div className=\"employee-selector\">\n                    <label htmlFor=\"employeeDropdown\">Select Employee:</label>\n                    <select\n                        id=\"employeeDropdown\"\n                        onChange={(e) => setSelectedEmployeeId(e.target.value)}\n                        value={selectedEmployeeId || ''}\n                    >\n                        <option value=\"\">Select an employee</option>\n                        {employees.map((employee) => (\n                            <option key={employee.id} value={employee.id}>\n                                {employee.name}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            )}\n            {selectedEmployeeId && (\n                <>\n                    <div className=\"week-navigation\">\n                        <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                            Previous Week\n                        </button>\n                        <h2 className=\"week-range\">{calculateWeekRange(currentWeek)}</h2>\n                        <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                            Next Week\n                        </button>\n                    </div>\n                    <table className=\"availability-table\">\n                        <thead>\n                            <tr>\n                                <th onClick={handleSelectAll} className=\"clickable\">Select All</th>\n                                {daysOfWeek.map((day) => (\n                                    <th key={day} onClick={() => handleDayColumnClick(day)} className=\"clickable\">\n                                        {day}\n                                    </th>\n                                ))}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {shifts.map((shift) => (\n                                <tr key={shift}>\n                                    <td onClick={() => handleShiftRowClick(shift)} className=\"clickable\">\n                                        {shift}\n                                    </td>\n                                    {daysOfWeek.map((day) => (\n                                        <td key={day}>\n                                            <input\n                                                type=\"checkbox\"\n                                                checked={availability?.[shift]?.[day] || false}\n                                                onChange={() => handleAvailabilityChange(shift, day)}\n                                            />\n                                        </td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                    <textarea\n                        className=\"notes-textarea\"\n                        placeholder=\"Write weekly notes here...\"\n                        value={notes}\n                        onChange={(e) => setNotes(e.target.value)}\n                    ></textarea>\n                    <button className=\"submit-button\" onClick={handleSubmit}>\n                        Submit\n                    </button>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default AvailabilityScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}