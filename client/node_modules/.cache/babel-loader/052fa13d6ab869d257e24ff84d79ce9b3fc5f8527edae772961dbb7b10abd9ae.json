{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { getAvailability, saveAvailability, updateAvailability, calculateWeekDates } from '../services/availabilityService';\nimport '../styles/AvailabilityScreen.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AvailabilityScreen = () => {\n  _s();\n  var _user$user, _user$company;\n  const [availability, setAvailability] = useState({});\n  const [weekDates, setWeekDates] = useState([]);\n  const [availabilityExists, setAvailabilityExists] = useState(false); // האם זמינות קיימת\n  const navigate = useNavigate();\n  const user = JSON.parse(localStorage.getItem('user'));\n  const userId = user === null || user === void 0 ? void 0 : (_user$user = user.user) === null || _user$user === void 0 ? void 0 : _user$user.id;\n  const companyId = user === null || user === void 0 ? void 0 : (_user$company = user.company) === null || _user$company === void 0 ? void 0 : _user$company.id;\n  useEffect(() => {\n    if (!userId || !companyId) {\n      navigate('/'); // אם המשתמש לא מחובר, ננווט למסך ההתחברות\n      return;\n    }\n\n    // חישוב תאריכי השבוע\n    const formattedDates = calculateWeekDates().map(date => {\n      const [year, month, day] = date.split('-');\n      return `${day}/${month}/${year}`; // שינוי לפורמט dd/mm/yyyy\n    });\n    setWeekDates(formattedDates);\n\n    // טעינת זמינות מהשרת\n    const loadAvailability = async () => {\n      const dateRange = `${weekDates[0]}_to_${weekDates[6]}`; // טווח תאריכים\n      try {\n        const data = await getAvailability(companyId, userId, dateRange);\n        if (data) {\n          setAvailability(data);\n          setAvailabilityExists(true);\n        }\n      } catch (error) {\n        console.error('Error fetching availability:', error);\n      }\n    };\n    loadAvailability();\n  }, [navigate, userId, companyId, weekDates]);\n  const handleAvailabilityChange = (date, shift, isAvailable) => {\n    setAvailability(prev => ({\n      ...prev,\n      [date]: {\n        ...prev[date],\n        [shift]: isAvailable\n      }\n    }));\n  };\n  const handleSave = async () => {\n    const dateRange = `${weekDates[0]}_to_${weekDates[6]}`;\n    try {\n      const response = availabilityExists ? await updateAvailability(companyId, userId, dateRange, availability) : await saveAvailability(companyId, userId, dateRange, availability);\n      alert(availabilityExists ? 'Availability updated successfully!' : 'Availability saved successfully!');\n      console.log('Saved/Updated Availability:', response);\n    } catch (error) {\n      console.error('Error saving/updating availability:', error);\n      alert('Failed to save/update availability. Please try again.');\n    }\n  };\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"availability-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Set Your Availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [weekDates[0], \" to \", weekDates[6]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"availability-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Shifts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), weekDates.map((date, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [daysOfWeek[index], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 56\n              }, this), date]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: shift\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this), weekDates.map(date => {\n              var _availability$date;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: ((_availability$date = availability[date]) === null || _availability$date === void 0 ? void 0 : _availability$date[shift]) || false,\n                  onChange: e => handleAvailabilityChange(date, shift, e.target.checked)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 41\n                }, this)\n              }, date, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this);\n            })]\n          }, shift, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        className: \"save-button\",\n        children: \"Save Availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(AvailabilityScreen, \"oQJdWR//q1TM0j9WuXQ7GFVdDeQ=\", false, function () {\n  return [useNavigate];\n});\n_c = AvailabilityScreen;\nexport default AvailabilityScreen;\nvar _c;\n$RefreshReg$(_c, \"AvailabilityScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Navbar","getAvailability","saveAvailability","updateAvailability","calculateWeekDates","jsxDEV","_jsxDEV","Fragment","_Fragment","AvailabilityScreen","_s","_user$user","_user$company","availability","setAvailability","weekDates","setWeekDates","availabilityExists","setAvailabilityExists","navigate","user","JSON","parse","localStorage","getItem","userId","id","companyId","company","formattedDates","map","date","year","month","day","split","loadAvailability","dateRange","data","error","console","handleAvailabilityChange","shift","isAvailable","prev","handleSave","response","alert","log","daysOfWeek","children","fileName","_jsxFileName","lineNumber","columnNumber","className","index","_availability$date","type","checked","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport {\n    getAvailability,\n    saveAvailability,\n    updateAvailability,\n    calculateWeekDates,\n} from '../services/availabilityService';\nimport '../styles/AvailabilityScreen.css';\n\nconst AvailabilityScreen = () => {\n    const [availability, setAvailability] = useState({});\n    const [weekDates, setWeekDates] = useState([]);\n    const [availabilityExists, setAvailabilityExists] = useState(false); // האם זמינות קיימת\n    const navigate = useNavigate();\n\n    const user = JSON.parse(localStorage.getItem('user'));\n    const userId = user?.user?.id;\n    const companyId = user?.company?.id;\n\n    useEffect(() => {\n        if (!userId || !companyId) {\n            navigate('/'); // אם המשתמש לא מחובר, ננווט למסך ההתחברות\n            return;\n        }\n\n        // חישוב תאריכי השבוע\n        const formattedDates = calculateWeekDates().map((date) => {\n            const [year, month, day] = date.split('-');\n            return `${day}/${month}/${year}`; // שינוי לפורמט dd/mm/yyyy\n        });\n        setWeekDates(formattedDates);\n\n        // טעינת זמינות מהשרת\n        const loadAvailability = async () => {\n            const dateRange = `${weekDates[0]}_to_${weekDates[6]}`; // טווח תאריכים\n            try {\n                const data = await getAvailability(companyId, userId, dateRange);\n                if (data) {\n                    setAvailability(data);\n                    setAvailabilityExists(true);\n                }\n            } catch (error) {\n                console.error('Error fetching availability:', error);\n            }\n        };\n\n        loadAvailability();\n    }, [navigate, userId, companyId, weekDates]);\n\n    const handleAvailabilityChange = (date, shift, isAvailable) => {\n        setAvailability((prev) => ({\n            ...prev,\n            [date]: {\n                ...prev[date],\n                [shift]: isAvailable,\n            },\n        }));\n    };\n\n    const handleSave = async () => {\n        const dateRange = `${weekDates[0]}_to_${weekDates[6]}`;\n        try {\n            const response = availabilityExists\n                ? await updateAvailability(companyId, userId, dateRange, availability)\n                : await saveAvailability(companyId, userId, dateRange, availability);\n\n            alert(availabilityExists ? 'Availability updated successfully!' : 'Availability saved successfully!');\n            console.log('Saved/Updated Availability:', response);\n        } catch (error) {\n            console.error('Error saving/updating availability:', error);\n            alert('Failed to save/update availability. Please try again.');\n        }\n    };\n\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n    return (\n        <>\n            <Navbar />\n            <div className=\"availability-container\">\n                <h2>Set Your Availability</h2>\n                <p>{weekDates[0]} to {weekDates[6]}</p>\n                <table className=\"availability-table\">\n                    <thead>\n                        <tr>\n                            <th>Shifts</th>\n                            {weekDates.map((date, index) => (\n                                <th key={date}>\n                                    {daysOfWeek[index]}<br />\n                                    {date}\n                                </th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                            <tr key={shift}>\n                                <td>{shift}</td>\n                                {weekDates.map((date) => (\n                                    <td key={date}>\n                                        <input\n                                            type=\"checkbox\"\n                                            checked={availability[date]?.[shift] || false}\n                                            onChange={(e) =>\n                                                handleAvailabilityChange(date, shift, e.target.checked)\n                                            }\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                <button onClick={handleSave} className=\"save-button\">Save Availability</button>\n            </div>\n        </>\n    );\n};\n\nexport default AvailabilityScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}