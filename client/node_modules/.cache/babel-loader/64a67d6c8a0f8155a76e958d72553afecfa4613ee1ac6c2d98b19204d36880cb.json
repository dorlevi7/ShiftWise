{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js\",\n  _s = $RefreshSig$();\n// React and core libraries\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Internal components and styles\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport '../styles/StatisticsScreen.css';\n\n// Services\nimport { getUsers } from '../services/userService';\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utils\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StatisticsScreen = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [mode, setMode] = useState('single'); // 'single' or 'compare'\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [secondEmployeeId, setSecondEmployeeId] = useState(null);\n  const [stats, setStats] = useState(null);\n  const [secondStats, setSecondStats] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const [weeksRange, setWeeksRange] = useState(1);\n  const navigate = useNavigate();\n  useEffect(() => {\n    window.scrollTo({\n      top: 0\n    });\n  }, []);\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      const fetchEmployees = async () => {\n        try {\n          const usersData = await getUsers();\n          const companyId = loggedUser.company.id;\n          const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n            id,\n            ...user\n          })).filter(user => {\n            var _user$companyIds;\n            return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(c => c.companyId === companyId);\n          });\n          setEmployees(filteredEmployees);\n        } catch (error) {\n          console.error('Error fetching employees:', error);\n        }\n      };\n      fetchEmployees();\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const fetchStats = async (employeeId, setter) => {\n      try {\n        const companyId = userData.company.id;\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = now.getMonth() + 1;\n        let totalNight = 0;\n        let totalShabbat = 0;\n        let totalRegular = 0;\n        for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n          const weekKey = calculateWeekKey(offset);\n          const data = await getWeeklyStats(companyId, year, month, weekKey, employeeId);\n          if (data) {\n            totalNight += data.nightShifts || 0;\n            totalShabbat += data.shabbatShifts || 0;\n            totalRegular += data.regularShifts || 0;\n          }\n        }\n        const totalAllShifts = totalNight + totalShabbat + totalRegular;\n        setter({\n          nightShifts: totalNight,\n          shabbatShifts: totalShabbat,\n          regularShifts: totalRegular,\n          avgNight: totalNight / weeksRange,\n          avgShabbat: totalShabbat / weeksRange,\n          avgRegular: totalRegular / weeksRange,\n          totalAll: totalAllShifts,\n          avgAll: totalAllShifts / weeksRange\n        });\n      } catch (error) {\n        console.error('Error fetching stats:', error);\n        toast.error('Failed to fetch statistics');\n      }\n    };\n    if (!userData) return;\n    if (mode === 'single' && selectedEmployeeId) {\n      fetchStats(selectedEmployeeId, setStats);\n    } else if (mode === 'compare' && selectedEmployeeId && secondEmployeeId) {\n      fetchStats(selectedEmployeeId, setStats);\n      fetchStats(secondEmployeeId, setSecondStats);\n    }\n  }, [userData, selectedEmployeeId, secondEmployeeId, weekOffset, weeksRange, mode]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prev => prev + direction);\n  };\n  const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"statistics-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Shift Statistics Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mode-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              value: \"single\",\n              checked: mode === 'single',\n              onChange: () => setMode('single')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), \" Single\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              value: \"compare\",\n              checked: mode === 'compare',\n              onChange: () => setMode('compare')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this), \" Compare\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), mode === 'compare' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-selector-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select First Employee:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              className: \"employee-dropdown\",\n              classNamePrefix: \"react-select\",\n              options: sortedEmployees.map(e => ({\n                value: e.id,\n                label: e.name\n              })),\n              onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n              value: sortedEmployees.map(e => ({\n                value: e.id,\n                label: e.name\n              })).find(o => o.value === selectedEmployeeId) || null,\n              placeholder: \"Choose employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select Second Employee:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              className: \"employee-dropdown\",\n              classNamePrefix: \"react-select\",\n              options: sortedEmployees.map(e => ({\n                value: e.id,\n                label: e.name\n              })),\n              onChange: option => setSecondEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n              value: sortedEmployees.map(e => ({\n                value: e.id,\n                label: e.name\n              })).find(o => o.value === secondEmployeeId) || null,\n              placeholder: \"Choose employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employee-selector-group\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select Employee:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              className: \"employee-dropdown\",\n              classNamePrefix: \"react-select\",\n              options: sortedEmployees.map(e => ({\n                value: e.id,\n                label: e.name\n              })),\n              onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n              value: sortedEmployees.map(e => ({\n                value: e.id,\n                label: e.name\n              })).find(o => o.value === selectedEmployeeId) || null,\n              placeholder: \"Choose employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this), mode === 'single' && selectedEmployeeId || mode === 'compare' && selectedEmployeeId && secondEmployeeId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weeks-range-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"weeksRange\",\n              children: \"Number of weeks to include:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              id: \"weeksRange\",\n              min: \"1\",\n              value: weeksRange,\n              onChange: e => {\n                const value = parseInt(e.target.value);\n                if (!isNaN(value) && value > 0) {\n                  setWeeksRange(value);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: mode === 'compare' ? 'comparison-container' : '',\n            children: [stats && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"statistics-summary\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Night Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 44\n                }, this), \" \", stats.nightShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Shabbat Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 44\n                }, this), \" \", stats.shabbatShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Regular Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 44\n                }, this), \" \", stats.regularShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total All Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 44\n                }, this), \" \", stats.totalAll]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Average per Week:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Night: \", stats.avgNight.toFixed(2), \" (\", (stats.nightShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Shabbat: \", stats.avgShabbat.toFixed(2), \" (\", (stats.shabbatShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Regular: \", stats.avgRegular.toFixed(2), \" (\", (stats.regularShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"All Shifts: \", stats.avgAll.toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 37\n            }, this), mode === 'compare' && secondStats && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"statistics-summary\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Night Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 44\n                }, this), \" \", secondStats.nightShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Shabbat Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 44\n                }, this), \" \", secondStats.shabbatShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Regular Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 44\n                }, this), \" \", secondStats.regularShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total All Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 44\n                }, this), \" \", secondStats.totalAll]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Average per Week:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Night: \", secondStats.avgNight.toFixed(2), \" (\", (secondStats.nightShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Shabbat: \", secondStats.avgShabbat.toFixed(2), \" (\", (secondStats.shabbatShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Regular: \", secondStats.avgRegular.toFixed(2), \" (\", (secondStats.regularShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"All Shifts: \", secondStats.avgAll.toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-stats-message\",\n          children: \"No statistics available for this period.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(StatisticsScreen, \"pfnsO/aX3XrWlTK3BTEJbWQpr28=\", false, function () {\n  return [useNavigate];\n});\n_c = StatisticsScreen;\nexport default StatisticsScreen;\nvar _c;\n$RefreshReg$(_c, \"StatisticsScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","toast","ToastContainer","Select","Navbar","Loader","BackgroundWrapper","getUsers","getWeeklyStats","calculateWeekKey","calculateWeekRange","jsxDEV","_jsxDEV","Fragment","_Fragment","StatisticsScreen","_s","userData","setUserData","employees","setEmployees","mode","setMode","selectedEmployeeId","setSelectedEmployeeId","secondEmployeeId","setSecondEmployeeId","stats","setStats","secondStats","setSecondStats","weekOffset","setWeekOffset","weeksRange","setWeeksRange","navigate","window","scrollTo","top","loggedUser","JSON","parse","localStorage","getItem","fetchEmployees","usersData","companyId","company","id","filteredEmployees","Object","entries","map","user","filter","_user$companyIds","companyIds","some","c","error","console","fetchStats","employeeId","setter","now","Date","year","getFullYear","month","getMonth","totalNight","totalShabbat","totalRegular","offset","weekKey","data","nightShifts","shabbatShifts","regularShifts","totalAllShifts","avgNight","avgShabbat","avgRegular","totalAll","avgAll","handleWeekChange","direction","prev","sortedEmployees","sort","a","b","name","localeCompare","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","value","checked","onChange","classNamePrefix","options","e","label","option","find","o","placeholder","htmlFor","min","parseInt","target","isNaN","toFixed","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js"],"sourcesContent":["// React and core libraries\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Internal components and styles\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport '../styles/StatisticsScreen.css';\n\n// Services\nimport { getUsers } from '../services/userService';\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utils\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\nconst StatisticsScreen = () => {\n    const [userData, setUserData] = useState(null);\n    const [employees, setEmployees] = useState([]);\n    const [mode, setMode] = useState('single'); // 'single' or 'compare'\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [secondEmployeeId, setSecondEmployeeId] = useState(null);\n    const [stats, setStats] = useState(null);\n    const [secondStats, setSecondStats] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n    const [weeksRange, setWeeksRange] = useState(1);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        window.scrollTo({ top: 0 });\n    }, []);\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n            const fetchEmployees = async () => {\n                try {\n                    const usersData = await getUsers();\n                    const companyId = loggedUser.company.id;\n                    const filteredEmployees = Object.entries(usersData)\n                        .map(([id, user]) => ({ id, ...user }))\n                        .filter((user) => user.companyIds?.some((c) => c.companyId === companyId));\n                    setEmployees(filteredEmployees);\n                } catch (error) {\n                    console.error('Error fetching employees:', error);\n                }\n            };\n            fetchEmployees();\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchStats = async (employeeId, setter) => {\n            try {\n                const companyId = userData.company.id;\n                const now = new Date();\n                const year = now.getFullYear();\n                const month = now.getMonth() + 1;\n\n                let totalNight = 0;\n                let totalShabbat = 0;\n                let totalRegular = 0;\n\n                for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n                    const weekKey = calculateWeekKey(offset);\n                    const data = await getWeeklyStats(companyId, year, month, weekKey, employeeId);\n\n                    if (data) {\n                        totalNight += data.nightShifts || 0;\n                        totalShabbat += data.shabbatShifts || 0;\n                        totalRegular += data.regularShifts || 0;\n                    }\n                }\n\n                const totalAllShifts = totalNight + totalShabbat + totalRegular;\n\n                setter({\n                    nightShifts: totalNight,\n                    shabbatShifts: totalShabbat,\n                    regularShifts: totalRegular,\n                    avgNight: totalNight / weeksRange,\n                    avgShabbat: totalShabbat / weeksRange,\n                    avgRegular: totalRegular / weeksRange,\n                    totalAll: totalAllShifts,\n                    avgAll: totalAllShifts / weeksRange\n                });\n            } catch (error) {\n                console.error('Error fetching stats:', error);\n                toast.error('Failed to fetch statistics');\n            }\n        };\n\n        if (!userData) return;\n\n        if (mode === 'single' && selectedEmployeeId) {\n            fetchStats(selectedEmployeeId, setStats);\n        } else if (mode === 'compare' && selectedEmployeeId && secondEmployeeId) {\n            fetchStats(selectedEmployeeId, setStats);\n            fetchStats(secondEmployeeId, setSecondStats);\n        }\n    }, [userData, selectedEmployeeId, secondEmployeeId, weekOffset, weeksRange, mode]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prev) => prev + direction);\n    };\n\n    const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n\n    return (\n        <BackgroundWrapper>\n            <div>\n                <Navbar />\n                <div className=\"navbar-placeholder\"></div>\n\n                <div className=\"statistics-container\">\n                    <h1>Shift Statistics Summary</h1>\n\n                    <div className=\"mode-toggle\">\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"single\"\n                                checked={mode === 'single'}\n                                onChange={() => setMode('single')}\n                            /> Single\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"compare\"\n                                checked={mode === 'compare'}\n                                onChange={() => setMode('compare')}\n                            /> Compare\n                        </label>\n                    </div>\n\n                    {mode === 'compare' ? (\n                        <div className=\"employee-selector-group\">\n                            <div className=\"employee-selector\">\n                                <label>Select First Employee:</label>\n                                <Select\n                                    className=\"employee-dropdown\"\n                                    classNamePrefix=\"react-select\"\n                                    options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                    onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                    value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                                    placeholder=\"Choose employee\"\n                                />\n                            </div>\n\n                            <div className=\"employee-selector\">\n                                <label>Select Second Employee:</label>\n                                <Select\n                                    className=\"employee-dropdown\"\n                                    classNamePrefix=\"react-select\"\n                                    options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                    onChange={(option) => setSecondEmployeeId(option?.value || '')}\n                                    value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === secondEmployeeId) || null}\n                                    placeholder=\"Choose employee\"\n                                />\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"employee-selector-group\">\n                            <div className=\"employee-selector\">\n                                <label>Select Employee:</label>\n                                <Select\n                                    className=\"employee-dropdown\"\n                                    classNamePrefix=\"react-select\"\n                                    options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                    onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                    value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                                    placeholder=\"Choose employee\"\n                                />\n                            </div>\n                        </div>\n                    )}\n\n\n                    {(mode === 'single' && selectedEmployeeId) || (mode === 'compare' && selectedEmployeeId && secondEmployeeId) ? (\n                        <>\n\n\n                            <div className=\"weeks-range-selector\">\n                                <label htmlFor=\"weeksRange\">Number of weeks to include:</label>\n                                <input\n                                    type=\"number\"\n                                    id=\"weeksRange\"\n                                    min=\"1\"\n                                    value={weeksRange}\n                                    onChange={(e) => {\n                                        const value = parseInt(e.target.value);\n                                        if (!isNaN(value) && value > 0) {\n                                            setWeeksRange(value);\n                                        }\n                                    }}\n                                />\n                            </div>\n\n                            <div className={mode === 'compare' ? 'comparison-container' : ''}>\n                                {stats && (\n                                    <div className=\"statistics-summary\">\n                                        <p><strong>Total Night Shifts:</strong> {stats.nightShifts}</p>\n                                        <p><strong>Total Shabbat Shifts:</strong> {stats.shabbatShifts}</p>\n                                        <p><strong>Total Regular Shifts:</strong> {stats.regularShifts}</p>\n                                        <p><strong>Total All Shifts:</strong> {stats.totalAll}</p>\n                                        <hr />\n                                        <p><strong>Average per Week:</strong></p>\n                                        <p>Night: {stats.avgNight.toFixed(2)} ({((stats.nightShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>Shabbat: {stats.avgShabbat.toFixed(2)} ({((stats.shabbatShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>Regular: {stats.avgRegular.toFixed(2)} ({((stats.regularShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>All Shifts: {stats.avgAll.toFixed(2)}</p>\n                                    </div>\n                                )}\n                                {mode === 'compare' && secondStats && (\n                                    <div className=\"statistics-summary\">\n                                        <p><strong>Total Night Shifts:</strong> {secondStats.nightShifts}</p>\n                                        <p><strong>Total Shabbat Shifts:</strong> {secondStats.shabbatShifts}</p>\n                                        <p><strong>Total Regular Shifts:</strong> {secondStats.regularShifts}</p>\n                                        <p><strong>Total All Shifts:</strong> {secondStats.totalAll}</p>\n                                        <hr />\n                                        <p><strong>Average per Week:</strong></p>\n                                        <p>Night: {secondStats.avgNight.toFixed(2)} ({((secondStats.nightShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>Shabbat: {secondStats.avgShabbat.toFixed(2)} ({((secondStats.shabbatShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>Regular: {secondStats.avgRegular.toFixed(2)} ({((secondStats.regularShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>All Shifts: {secondStats.avgAll.toFixed(2)}</p>\n                                    </div>\n                                )}\n                            </div>\n                        </>\n                    ) : (\n                        <p className=\"no-stats-message\">No statistics available for this period.</p>\n                    )}\n                </div>\n\n                <ToastContainer />\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default StatisticsScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}