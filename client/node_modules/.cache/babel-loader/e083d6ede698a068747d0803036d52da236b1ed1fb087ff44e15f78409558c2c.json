{"ast":null,"code":"// Import toast notifications\nimport { toast } from 'react-toastify';\n\n// Import user and company service functions\nimport { getUsers, updateUserCompanies, addUser } from '../services/userService';\nimport { removeUserFromCompany, addEmployeeToCompany } from '../services/companyService';\nimport { removeCompanyFromUser } from '../services/userService';\nimport { getPhotoDataUrl, findExistingUser, associateUserWithCompany, createAndAddNewEmployee, resetNewEmployeeForm } from '../utils/employeeUtils';\nexport const fetchEmployees = async (companyId, setEmployees, setError, setIsLoading) => {\n  try {\n    const data = await getUsers();\n    const usersWithIds = data ? Object.entries(data).map(([id, user]) => ({\n      id,\n      ...user\n    })) : [];\n    const filtered = usersWithIds.filter(user => {\n      var _user$companyIds;\n      return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(company => company.companyId === companyId);\n    });\n    setEmployees(filtered);\n  } catch (err) {\n    setError('Failed to fetch employees.');\n  } finally {\n    setIsLoading(false);\n  }\n};\nexport const handleLoadEmployeesFromJSON = async (loggedUser, setEmployees, setIsProcessing) => {\n  try {\n    if (!loggedUser || !loggedUser.company) {\n      toast.error('No company information found. Please try again.');\n      return;\n    }\n    setIsProcessing(true);\n    const companyId = loggedUser.company.id;\n    const allUsers = await getUsers();\n    const newEmployees = employeesData.filter(employee => {\n      var _existingUser$company;\n      const existingUser = Object.values(allUsers).find(user => user.email === employee.email);\n      if (!existingUser) {\n        return true;\n      }\n      const isInCompany = (_existingUser$company = existingUser.companyIds) === null || _existingUser$company === void 0 ? void 0 : _existingUser$company.some(company => company.companyId === companyId);\n      return !isInCompany;\n    });\n    for (const employee of newEmployees) {\n      const existingUser = Object.values(allUsers).find(user => user.email === employee.email);\n      if (existingUser) {\n        await updateUserCompanies(existingUser, loggedUser.company);\n        await addEmployeeToCompany(companyId, existingUser.id);\n      } else {\n        const addedEmployee = await addUser(employee);\n        await updateUserCompanies(addedEmployee, loggedUser.company);\n        await addEmployeeToCompany(companyId, addedEmployee.id);\n      }\n    }\n    const updatedUsers = await getUsers();\n    const usersWithIds = Object.entries(updatedUsers).map(([id, user]) => ({\n      id,\n      ...user\n    }));\n    const filteredEmployees = usersWithIds.filter(user => {\n      var _user$companyIds2;\n      return (_user$companyIds2 = user.companyIds) === null || _user$companyIds2 === void 0 ? void 0 : _user$companyIds2.some(company => company.companyId === companyId);\n    });\n    setEmployees(filteredEmployees);\n    toast.success(`${newEmployees.length} employees added successfully!`);\n  } catch (error) {\n    toast.error('Failed to load employees from JSON.');\n    console.error(error);\n  } finally {\n    setIsProcessing(false);\n  }\n};\nexport const handleDeleteConfirmed = async (employeeToDelete, loggedUser, employees, setEmployees, closeConfirmDeleteModal) => {\n  if (!employeeToDelete) return;\n  try {\n    var _loggedUser$company;\n    const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n    if (!companyId) {\n      toast.error('No company information found. Please try again.');\n      return;\n    }\n    await removeCompanyFromUser(employeeToDelete.id, companyId);\n    await removeUserFromCompany(companyId, employeeToDelete.id);\n    setEmployees(employees.filter(employee => employee.id !== employeeToDelete.id));\n    toast.success('Employee deleted successfully!');\n  } catch (err) {\n    toast.error('Failed to delete employee.');\n    console.error(err);\n  } finally {\n    closeConfirmDeleteModal();\n  }\n};\nexport const handleAddEmployee = async (e, newEmployee, loggedUser, employees, setEmployees, setNewEmployee, setIsAddEmployeeModalOpen) => {\n  e.preventDefault();\n  try {\n    const company = loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.company;\n    if (!company) return toast.error('No company information found.');\n    const photoDataUrl = await getPhotoDataUrl(newEmployee.photoFile);\n    const existingUser = await findExistingUser(newEmployee.email);\n    if (existingUser) {\n      await associateUserWithCompany(existingUser, company, employees, setEmployees);\n    } else {\n      await createAndAddNewEmployee(newEmployee, photoDataUrl, company, setEmployees);\n    }\n    resetNewEmployeeForm(setNewEmployee);\n    setIsAddEmployeeModalOpen(false);\n  } catch (err) {\n    toast.error('Failed to add employee.');\n    console.error(err);\n  }\n};\nexport const handleDeleteAllEmployees = async (loggedUser, employees, setEmployees, setIsProcessing) => {\n  try {\n    if (!loggedUser || !loggedUser.company) {\n      toast.error('No company information found. Please try again.');\n      return;\n    }\n    setIsProcessing(true);\n    const companyId = loggedUser.company.id;\n    const employeesToDelete = employees.filter(employee => employee.role !== 'admin');\n    if (employeesToDelete.length === 0) {\n      toast.info('No employees to delete.');\n      return;\n    }\n    for (const employee of employeesToDelete) {\n      await removeCompanyFromUser(employee.id, companyId);\n      await removeUserFromCompany(companyId, employee.id);\n    }\n    setEmployees(employees.filter(employee => employee.role === 'admin'));\n    toast.success(`${employeesToDelete.length} employees deleted successfully!`);\n  } catch (err) {\n    toast.error('Failed to delete employees.');\n    console.error(err);\n  } finally {\n    setIsProcessing(false);\n  }\n};","map":{"version":3,"names":["toast","getUsers","updateUserCompanies","addUser","removeUserFromCompany","addEmployeeToCompany","removeCompanyFromUser","getPhotoDataUrl","findExistingUser","associateUserWithCompany","createAndAddNewEmployee","resetNewEmployeeForm","fetchEmployees","companyId","setEmployees","setError","setIsLoading","data","usersWithIds","Object","entries","map","id","user","filtered","filter","_user$companyIds","companyIds","some","company","err","handleLoadEmployeesFromJSON","loggedUser","setIsProcessing","error","allUsers","newEmployees","employeesData","employee","_existingUser$company","existingUser","values","find","email","isInCompany","addedEmployee","updatedUsers","filteredEmployees","_user$companyIds2","success","length","console","handleDeleteConfirmed","employeeToDelete","employees","closeConfirmDeleteModal","_loggedUser$company","handleAddEmployee","e","newEmployee","setNewEmployee","setIsAddEmployeeModalOpen","preventDefault","photoDataUrl","photoFile","handleDeleteAllEmployees","employeesToDelete","role","info"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/utils/employeeHandlers.js"],"sourcesContent":["// Import toast notifications\nimport { toast } from 'react-toastify';\n\n// Import user and company service functions\nimport { getUsers, updateUserCompanies, addUser } from '../services/userService';\nimport { removeUserFromCompany, addEmployeeToCompany } from '../services/companyService';\nimport { removeCompanyFromUser } from '../services/userService';\nimport { getPhotoDataUrl, findExistingUser, associateUserWithCompany, createAndAddNewEmployee, resetNewEmployeeForm } from '../utils/employeeUtils';\n\nexport const fetchEmployees = async (companyId, setEmployees, setError, setIsLoading) => {\n    try {\n        const data = await getUsers();\n        const usersWithIds = data ? Object.entries(data).map(([id, user]) => ({ id, ...user })) : [];\n\n        const filtered = usersWithIds.filter((user) =>\n            user.companyIds?.some((company) => company.companyId === companyId)\n        );\n\n        setEmployees(filtered);\n    } catch (err) {\n        setError('Failed to fetch employees.');\n    } finally {\n        setIsLoading(false);\n    }\n};\n\nexport const handleLoadEmployeesFromJSON = async (loggedUser, setEmployees, setIsProcessing) => {\n    try {\n        if (!loggedUser || !loggedUser.company) {\n            toast.error('No company information found. Please try again.');\n            return;\n        }\n\n        setIsProcessing(true);\n\n        const companyId = loggedUser.company.id;\n        const allUsers = await getUsers();\n\n        const newEmployees = employeesData.filter((employee) => {\n            const existingUser = Object.values(allUsers).find((user) => user.email === employee.email);\n\n            if (!existingUser) {\n                return true;\n            }\n\n            const isInCompany = existingUser.companyIds?.some((company) => company.companyId === companyId);\n            return !isInCompany;\n        });\n\n        for (const employee of newEmployees) {\n            const existingUser = Object.values(allUsers).find((user) => user.email === employee.email);\n\n            if (existingUser) {\n                await updateUserCompanies(existingUser, loggedUser.company);\n                await addEmployeeToCompany(companyId, existingUser.id);\n            } else {\n                const addedEmployee = await addUser(employee);\n                await updateUserCompanies(addedEmployee, loggedUser.company);\n                await addEmployeeToCompany(companyId, addedEmployee.id);\n            }\n        }\n\n        const updatedUsers = await getUsers();\n        const usersWithIds = Object.entries(updatedUsers).map(([id, user]) => ({ id, ...user }));\n        const filteredEmployees = usersWithIds.filter((user) =>\n            user.companyIds?.some((company) => company.companyId === companyId)\n        );\n\n        setEmployees(filteredEmployees);\n        toast.success(`${newEmployees.length} employees added successfully!`);\n    } catch (error) {\n        toast.error('Failed to load employees from JSON.');\n        console.error(error);\n    } finally {\n        setIsProcessing(false);\n    }\n};\n\nexport const handleDeleteConfirmed = async (employeeToDelete, loggedUser, employees, setEmployees, closeConfirmDeleteModal) => {\n    if (!employeeToDelete) return;\n    try {\n        const companyId = loggedUser?.company?.id;\n        if (!companyId) {\n            toast.error('No company information found. Please try again.');\n            return;\n        }\n        await removeCompanyFromUser(employeeToDelete.id, companyId);\n        await removeUserFromCompany(companyId, employeeToDelete.id);\n        setEmployees(employees.filter((employee) => employee.id !== employeeToDelete.id));\n        toast.success('Employee deleted successfully!');\n    } catch (err) {\n        toast.error('Failed to delete employee.');\n        console.error(err);\n    } finally {\n        closeConfirmDeleteModal();\n    }\n};\n\nexport const handleAddEmployee = async (e, newEmployee, loggedUser, employees, setEmployees, setNewEmployee, setIsAddEmployeeModalOpen) => {\n    e.preventDefault();\n    try {\n        const company = loggedUser?.company;\n        if (!company) return toast.error('No company information found.');\n\n        const photoDataUrl = await getPhotoDataUrl(newEmployee.photoFile);\n        const existingUser = await findExistingUser(newEmployee.email);\n\n        if (existingUser) {\n            await associateUserWithCompany(existingUser, company, employees, setEmployees);\n        } else {\n            await createAndAddNewEmployee(newEmployee, photoDataUrl, company, setEmployees);\n        }\n\n        resetNewEmployeeForm(setNewEmployee);\n        setIsAddEmployeeModalOpen(false);\n    } catch (err) {\n        toast.error('Failed to add employee.');\n        console.error(err);\n    }\n};\n\nexport const handleDeleteAllEmployees = async (loggedUser, employees, setEmployees, setIsProcessing) => {\n    try {\n        if (!loggedUser || !loggedUser.company) {\n            toast.error('No company information found. Please try again.');\n            return;\n        }\n\n        setIsProcessing(true);\n\n        const companyId = loggedUser.company.id;\n        const employeesToDelete = employees.filter(employee => employee.role !== 'admin');\n\n        if (employeesToDelete.length === 0) {\n            toast.info('No employees to delete.');\n            return;\n        }\n\n        for (const employee of employeesToDelete) {\n            await removeCompanyFromUser(employee.id, companyId);\n            await removeUserFromCompany(companyId, employee.id);\n        }\n\n        setEmployees(employees.filter(employee => employee.role === 'admin'));\n        toast.success(`${employeesToDelete.length} employees deleted successfully!`);\n    } catch (err) {\n        toast.error('Failed to delete employees.');\n        console.error(err);\n    } finally {\n        setIsProcessing(false);\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}