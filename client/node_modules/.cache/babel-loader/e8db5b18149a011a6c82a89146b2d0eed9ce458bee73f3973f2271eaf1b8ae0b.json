{"ast":null,"code":"import { toast } from 'react-toastify';\nimport { getUsers, updateUserCompanies, addUser } from '../services/userService';\nimport employeesData from '../data/emps.json'; // יש לוודא שהקובץ נמצא בתיקייה data\nimport { removeUserFromCompany, addEmployeeToCompany } from '../services/companyService';\nexport const fetchEmployees = async (companyId, setEmployees, setError, setIsLoading) => {\n  try {\n    const data = await getUsers();\n    const usersWithIds = data ? Object.entries(data).map(([id, user]) => ({\n      id,\n      ...user\n    })) : [];\n    const filtered = usersWithIds.filter(user => {\n      var _user$companyIds;\n      return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(company => company.companyId === companyId);\n    });\n    setEmployees(filtered);\n  } catch (err) {\n    setError('Failed to fetch employees.');\n  } finally {\n    setIsLoading(false);\n  }\n};\nexport const handleLoadEmployeesFromJSON = async (loggedUser, setEmployees, setIsProcessing) => {\n  try {\n    if (!loggedUser || !loggedUser.company) {\n      toast.error('No company information found. Please try again.');\n      return;\n    }\n    setIsProcessing(true); // הפעלת process\n\n    const companyId = loggedUser.company.id;\n    const allUsers = await getUsers();\n    const newEmployees = employeesData.filter(employee => {\n      var _existingUser$company;\n      const existingUser = Object.values(allUsers).find(user => user.email === employee.email);\n      if (!existingUser) {\n        return true; // משתמש לא קיים כלל - נוסיף אותו\n      }\n      const isInCompany = (_existingUser$company = existingUser.companyIds) === null || _existingUser$company === void 0 ? void 0 : _existingUser$company.some(company => company.companyId === companyId);\n      return !isInCompany; // אם הוא לא משויך לחברה, נוסיף אותו שוב\n    });\n    for (const employee of newEmployees) {\n      const existingUser = Object.values(allUsers).find(user => user.email === employee.email);\n      if (existingUser) {\n        await updateUserCompanies(existingUser, loggedUser.company);\n        await addEmployeeToCompany(companyId, existingUser.id);\n      } else {\n        const addedEmployee = await addUser(employee);\n        await updateUserCompanies(addedEmployee, loggedUser.company);\n        await addEmployeeToCompany(companyId, addedEmployee.id);\n      }\n    }\n    const updatedUsers = await getUsers();\n    const usersWithIds = Object.entries(updatedUsers).map(([id, user]) => ({\n      id,\n      ...user\n    }));\n    const filteredEmployees = usersWithIds.filter(user => {\n      var _user$companyIds2;\n      return (_user$companyIds2 = user.companyIds) === null || _user$companyIds2 === void 0 ? void 0 : _user$companyIds2.some(company => company.companyId === companyId);\n    });\n    setEmployees(filteredEmployees);\n    toast.success(`${newEmployees.length} employees added successfully!`);\n  } catch (error) {\n    toast.error('Failed to load employees from JSON.');\n    console.error(error);\n  } finally {\n    setIsProcessing(false); // סיום process\n  }\n};","map":{"version":3,"names":["toast","getUsers","updateUserCompanies","addUser","employeesData","removeUserFromCompany","addEmployeeToCompany","fetchEmployees","companyId","setEmployees","setError","setIsLoading","data","usersWithIds","Object","entries","map","id","user","filtered","filter","_user$companyIds","companyIds","some","company","err","handleLoadEmployeesFromJSON","loggedUser","setIsProcessing","error","allUsers","newEmployees","employee","_existingUser$company","existingUser","values","find","email","isInCompany","addedEmployee","updatedUsers","filteredEmployees","_user$companyIds2","success","length","console"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/utils/employeeHandlers.js"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { getUsers, updateUserCompanies, addUser } from '../services/userService';\nimport employeesData from '../data/emps.json'; // יש לוודא שהקובץ נמצא בתיקייה data\nimport { removeUserFromCompany, addEmployeeToCompany } from '../services/companyService';\n\nexport const fetchEmployees = async (companyId, setEmployees, setError, setIsLoading) => {\n    try {\n        const data = await getUsers();\n        const usersWithIds = data ? Object.entries(data).map(([id, user]) => ({ id, ...user })) : [];\n\n        const filtered = usersWithIds.filter((user) =>\n            user.companyIds?.some((company) => company.companyId === companyId)\n        );\n\n        setEmployees(filtered);\n    } catch (err) {\n        setError('Failed to fetch employees.');\n    } finally {\n        setIsLoading(false);\n    }\n};\n\nexport const handleLoadEmployeesFromJSON = async (loggedUser, setEmployees, setIsProcessing) => {\n    try {\n        if (!loggedUser || !loggedUser.company) {\n            toast.error('No company information found. Please try again.');\n            return;\n        }\n\n        setIsProcessing(true);  // הפעלת process\n\n        const companyId = loggedUser.company.id;\n        const allUsers = await getUsers();\n\n        const newEmployees = employeesData.filter((employee) => {\n            const existingUser = Object.values(allUsers).find((user) => user.email === employee.email);\n\n            if (!existingUser) {\n                return true; // משתמש לא קיים כלל - נוסיף אותו\n            }\n\n            const isInCompany = existingUser.companyIds?.some((company) => company.companyId === companyId);\n            return !isInCompany; // אם הוא לא משויך לחברה, נוסיף אותו שוב\n        });\n\n        for (const employee of newEmployees) {\n            const existingUser = Object.values(allUsers).find((user) => user.email === employee.email);\n\n            if (existingUser) {\n                await updateUserCompanies(existingUser, loggedUser.company);\n                await addEmployeeToCompany(companyId, existingUser.id);\n            } else {\n                const addedEmployee = await addUser(employee);\n                await updateUserCompanies(addedEmployee, loggedUser.company);\n                await addEmployeeToCompany(companyId, addedEmployee.id);\n            }\n        }\n\n        const updatedUsers = await getUsers();\n        const usersWithIds = Object.entries(updatedUsers).map(([id, user]) => ({ id, ...user }));\n        const filteredEmployees = usersWithIds.filter((user) =>\n            user.companyIds?.some((company) => company.companyId === companyId)\n        );\n\n        setEmployees(filteredEmployees);\n        toast.success(`${newEmployees.length} employees added successfully!`);\n    } catch (error) {\n        toast.error('Failed to load employees from JSON.');\n        console.error(error);\n    } finally {\n        setIsProcessing(false);  // סיום process\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}