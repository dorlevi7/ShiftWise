{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n  const [currentCompany, setCurrentCompany] = useState(null);\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת זמינות ומשתמשים\n        const [availabilityData, usersData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers()]);\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = status => {\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const calculatePreviousDay = currentDay => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentIndex = daysOfWeek.indexOf(currentDay);\n    return currentIndex > 0 ? daysOfWeek[currentIndex - 1] : daysOfWeek[6];\n  };\n  const calculateNextDay = currentDay => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentIndex = daysOfWeek.indexOf(currentDay);\n    return currentIndex < 6 ? daysOfWeek[currentIndex + 1] : daysOfWeek[0];\n  };\n  const calculateWeekDates = () => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentDate = new Date();\n    const firstDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + weekOffset * 7));\n    return daysOfWeek.map((dayName, index) => {\n      const date = new Date(firstDayOfWeek);\n      date.setDate(firstDayOfWeek.getDate() + index);\n      return {\n        dayName,\n        date: date.toLocaleDateString('en-GB') // פורמט תאריך DD/MM/YYYY\n      };\n    });\n  };\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n\n      // Update the current shift's status to 'selected' or 'default'\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        // Disable other shifts on the same day\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n\n        // Handle unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          var _updatedAvailability$, _updatedAvailability$2;\n          const previousDay = calculatePreviousDay(day);\n          if ((_updatedAvailability$ = updatedAvailability[userId]) !== null && _updatedAvailability$ !== void 0 && (_updatedAvailability$2 = _updatedAvailability$['Night']) !== null && _updatedAvailability$2 !== void 0 && _updatedAvailability$2[previousDay]) {\n            updatedAvailability[userId]['Night'][previousDay].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'disabled');\n          }\n        } else if (shift === 'Night') {\n          var _updatedAvailability$3, _updatedAvailability$4, _updatedAvailability$5, _updatedAvailability$6;\n          const nextDay = calculateNextDay(day);\n          if ((_updatedAvailability$3 = updatedAvailability[userId]) !== null && _updatedAvailability$3 !== void 0 && (_updatedAvailability$4 = _updatedAvailability$3['Morning']) !== null && _updatedAvailability$4 !== void 0 && _updatedAvailability$4[nextDay]) {\n            updatedAvailability[userId]['Morning'][nextDay].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'disabled');\n          }\n          if ((_updatedAvailability$5 = updatedAvailability[userId]) !== null && _updatedAvailability$5 !== void 0 && (_updatedAvailability$6 = _updatedAvailability$5['Noon']) !== null && _updatedAvailability$6 !== void 0 && _updatedAvailability$6[nextDay]) {\n            updatedAvailability[userId]['Noon'][nextDay].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'disabled');\n          }\n        }\n      } else {\n        // Undo selection and revert unique rules\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n            updatedAvailability[userId][otherShift][day].status = 'default';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n          }\n        }\n\n        // Revert unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          var _updatedAvailability$7, _updatedAvailability$8, _updatedAvailability$9;\n          const previousDay = calculatePreviousDay(day);\n          if (((_updatedAvailability$7 = updatedAvailability[userId]) === null || _updatedAvailability$7 === void 0 ? void 0 : (_updatedAvailability$8 = _updatedAvailability$7['Night']) === null || _updatedAvailability$8 === void 0 ? void 0 : (_updatedAvailability$9 = _updatedAvailability$8[previousDay]) === null || _updatedAvailability$9 === void 0 ? void 0 : _updatedAvailability$9.status) === 'disabled') {\n            updatedAvailability[userId]['Night'][previousDay].status = 'default';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'default');\n          }\n        } else if (shift === 'Night') {\n          var _updatedAvailability$10, _updatedAvailability$11, _updatedAvailability$12, _updatedAvailability$13, _updatedAvailability$14, _updatedAvailability$15;\n          const nextDay = calculateNextDay(day);\n          if (((_updatedAvailability$10 = updatedAvailability[userId]) === null || _updatedAvailability$10 === void 0 ? void 0 : (_updatedAvailability$11 = _updatedAvailability$10['Morning']) === null || _updatedAvailability$11 === void 0 ? void 0 : (_updatedAvailability$12 = _updatedAvailability$11[nextDay]) === null || _updatedAvailability$12 === void 0 ? void 0 : _updatedAvailability$12.status) === 'disabled') {\n            updatedAvailability[userId]['Morning'][nextDay].status = 'default';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'default');\n          }\n          if (((_updatedAvailability$13 = updatedAvailability[userId]) === null || _updatedAvailability$13 === void 0 ? void 0 : (_updatedAvailability$14 = _updatedAvailability$13['Noon']) === null || _updatedAvailability$14 === void 0 ? void 0 : (_updatedAvailability$15 = _updatedAvailability$14[nextDay]) === null || _updatedAvailability$15 === void 0 ? void 0 : _updatedAvailability$15.status) === 'disabled') {\n            updatedAvailability[userId]['Noon'][nextDay].status = 'default';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'default');\n          }\n        }\n      }\n\n      // Update state with the modified availability\n      setAvailability(updatedAvailability);\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(-1),\n          children: \"Previous Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"week-range\",\n          children: calculateWeekRange(weekOffset)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(1),\n          children: \"Next Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading schedule...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"schedule-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Shift\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 33\n            }, this), calculateWeekDates().map(({\n              dayName,\n              date\n            }) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [dayName, \" (\", date, \")\"]\n            }, dayName, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: shift\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 37\n            }, this), calculateWeekDates().map(({\n              dayName\n            }) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: Object.entries(availability).map(([userId, userData]) => {\n                var _userData$shift;\n                const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[dayName];\n                if (availabilityInfo !== null && availabilityInfo !== void 0 && availabilityInfo.isAvailable) {\n                  var _users$userId;\n                  const statusClass = getStatusClass(availabilityInfo.status);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `availability-entry ${statusClass}`,\n                    onClick: () => handleStatusUpdate(userId, shift, dayName, availabilityInfo.status),\n                    children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                  }, userId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 57\n                  }, this);\n                }\n                return null;\n              })\n            }, dayName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 41\n            }, this))]\n          }, shift, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"PwF98lVza8iGyhWE51Wp6odJWQA=\");\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","getAllAvailabilities","getUsers","calculateWeekKey","calculateWeekRange","updateAvailabilityStatus","Navbar","jsxDEV","_jsxDEV","ScheduleScreen","_s","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","JSON","parse","localStorage","getItem","companyId","company","id","weekKey","availabilityData","usersData","Promise","all","err","console","handleWeekChange","direction","prevOffset","getStatusClass","status","calculatePreviousDay","currentDay","daysOfWeek","currentIndex","indexOf","calculateNextDay","calculateWeekDates","currentDate","Date","firstDayOfWeek","setDate","getDate","getDay","map","dayName","index","date","toLocaleDateString","handleStatusUpdate","userId","shift","day","currentStatus","newStatus","updatedAvailability","otherShift","_updatedAvailability$","_updatedAvailability$2","previousDay","_updatedAvailability$3","_updatedAvailability$4","_updatedAvailability$5","_updatedAvailability$6","nextDay","_updatedAvailability$7","_updatedAvailability$8","_updatedAvailability$9","_updatedAvailability$10","_updatedAvailability$11","_updatedAvailability$12","_updatedAvailability$13","_updatedAvailability$14","_updatedAvailability$15","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","Object","entries","userData","_userData$shift","availabilityInfo","isAvailable","_users$userId","statusClass","name","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n    const [currentCompany, setCurrentCompany] = useState(null);\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת זמינות ומשתמשים\n                const [availabilityData, usersData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers()\n                ]);\n\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status) => {\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const calculatePreviousDay = (currentDay) => {\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = daysOfWeek.indexOf(currentDay);\n        return currentIndex > 0 ? daysOfWeek[currentIndex - 1] : daysOfWeek[6];\n    };\n\n    const calculateNextDay = (currentDay) => {\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = daysOfWeek.indexOf(currentDay);\n        return currentIndex < 6 ? daysOfWeek[currentIndex + 1] : daysOfWeek[0];\n    };\n\n    const calculateWeekDates = () => {\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentDate = new Date();\n        const firstDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + weekOffset * 7));\n        return daysOfWeek.map((dayName, index) => {\n            const date = new Date(firstDayOfWeek);\n            date.setDate(firstDayOfWeek.getDate() + index);\n            return {\n                dayName,\n                date: date.toLocaleDateString('en-GB'), // פורמט תאריך DD/MM/YYYY\n            };\n        });\n    };\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            // Update the current shift's status to 'selected' or 'default'\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                // Disable other shifts on the same day\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                // Handle unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    const previousDay = calculatePreviousDay(day);\n                    if (updatedAvailability[userId]?.['Night']?.[previousDay]) {\n                        updatedAvailability[userId]['Night'][previousDay].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'disabled');\n                    }\n                } else if (shift === 'Night') {\n                    const nextDay = calculateNextDay(day);\n                    if (updatedAvailability[userId]?.['Morning']?.[nextDay]) {\n                        updatedAvailability[userId]['Morning'][nextDay].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'disabled');\n                    }\n                    if (updatedAvailability[userId]?.['Noon']?.[nextDay]) {\n                        updatedAvailability[userId]['Noon'][nextDay].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'disabled');\n                    }\n                }\n            } else {\n                // Undo selection and revert unique rules\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n                        updatedAvailability[userId][otherShift][day].status = 'default';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                    }\n                }\n\n                // Revert unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    const previousDay = calculatePreviousDay(day);\n                    if (updatedAvailability[userId]?.['Night']?.[previousDay]?.status === 'disabled') {\n                        updatedAvailability[userId]['Night'][previousDay].status = 'default';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'default');\n                    }\n                } else if (shift === 'Night') {\n                    const nextDay = calculateNextDay(day);\n                    if (updatedAvailability[userId]?.['Morning']?.[nextDay]?.status === 'disabled') {\n                        updatedAvailability[userId]['Morning'][nextDay].status = 'default';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Morning', nextDay, 'default');\n                    }\n                    if (updatedAvailability[userId]?.['Noon']?.[nextDay]?.status === 'disabled') {\n                        updatedAvailability[userId]['Noon'][nextDay].status = 'default';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Noon', nextDay, 'default');\n                    }\n                }\n            }\n\n            // Update state with the modified availability\n            setAvailability(updatedAvailability);\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div> {/* רווח לניווט */}\n\n            <div className=\"schedule-container\">\n                <h2>Weekly Schedule</h2>\n                <div className=\"week-navigation\">\n                    <button onClick={() => handleWeekChange(-1)}>Previous Week</button>\n                    <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                    <button onClick={() => handleWeekChange(1)}>Next Week</button>\n                </div>\n\n                {isLoading ? (\n                    <p>Loading schedule...</p>\n                ) : error ? (\n                    <p className=\"error\">{error}</p>\n                ) : (\n                    <table className=\"schedule-table\">\n                        <thead>\n                            <tr>\n                                <th>Shift</th>\n                                {calculateWeekDates().map(({ dayName, date }) => (\n                                    <th key={dayName}>\n                                        {dayName} ({date})\n                                    </th>\n                                ))}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                <tr key={shift}>\n                                    <td>{shift}</td>\n                                    {calculateWeekDates().map(({ dayName }) => (\n                                        <td key={dayName}>\n                                            {Object.entries(availability).map(([userId, userData]) => {\n                                                const availabilityInfo = userData?.[shift]?.[dayName];\n                                                if (availabilityInfo?.isAvailable) {\n                                                    const statusClass = getStatusClass(availabilityInfo.status);\n                                                    return (\n                                                        <div\n                                                            key={userId}\n                                                            className={`availability-entry ${statusClass}`}\n                                                            onClick={() =>\n                                                                handleStatusUpdate(\n                                                                    userId,\n                                                                    shift,\n                                                                    dayName,\n                                                                    availabilityInfo.status\n                                                                )\n                                                            }\n                                                        >\n                                                            {users[userId]?.name || 'Unknown'}\n                                                        </div>\n                                                    );\n                                                }\n                                                return null;\n                                            })}\n                                        </td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default ScheduleScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}