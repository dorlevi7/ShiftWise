{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js\",\n  _s = $RefreshSig$();\n// React and core libraries\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Internal components and styles\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport '../styles/StatisticsScreen.css';\n\n// Services\nimport { getUsers } from '../services/userService';\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utils\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatisticsScreen = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [mode, setMode] = useState('single'); // 'single' or 'compare'\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [secondEmployeeId, setSecondEmployeeId] = useState(null);\n  const [stats, setStats] = useState(null);\n  const [secondStats, setSecondStats] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const [weeksRange, setWeeksRange] = useState(1);\n  const navigate = useNavigate();\n  useEffect(() => {\n    window.scrollTo({\n      top: 0\n    });\n  }, []);\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      const fetchEmployees = async () => {\n        try {\n          const usersData = await getUsers();\n          const companyId = loggedUser.company.id;\n          const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n            id,\n            ...user\n          })).filter(user => {\n            var _user$companyIds;\n            return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(c => c.companyId === companyId);\n          });\n          setEmployees(filteredEmployees);\n        } catch (error) {\n          console.error('Error fetching employees:', error);\n        }\n      };\n      fetchEmployees();\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const fetchStats = async (employeeId, setter) => {\n      try {\n        const companyId = userData.company.id;\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = now.getMonth() + 1;\n        let totalNight = 0;\n        let totalShabbat = 0;\n        let totalRegular = 0;\n        for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n          const weekKey = calculateWeekKey(offset);\n          const data = await getWeeklyStats(companyId, year, month, weekKey, employeeId);\n          if (data) {\n            totalNight += data.nightShifts || 0;\n            totalShabbat += data.shabbatShifts || 0;\n            totalRegular += data.regularShifts || 0;\n          }\n        }\n        const totalAllShifts = totalNight + totalShabbat + totalRegular;\n        setter({\n          nightShifts: totalNight,\n          shabbatShifts: totalShabbat,\n          regularShifts: totalRegular,\n          avgNight: totalNight / weeksRange,\n          avgShabbat: totalShabbat / weeksRange,\n          avgRegular: totalRegular / weeksRange,\n          totalAll: totalAllShifts,\n          avgAll: totalAllShifts / weeksRange\n        });\n      } catch (error) {\n        console.error('Error fetching stats:', error);\n        toast.error('Failed to fetch statistics');\n      }\n    };\n    if (!userData) return;\n    if (mode === 'single' && selectedEmployeeId) {\n      fetchStats(selectedEmployeeId, setStats);\n    } else if (mode === 'compare' && selectedEmployeeId && secondEmployeeId) {\n      fetchStats(selectedEmployeeId, setStats);\n      fetchStats(secondEmployeeId, setSecondStats);\n    }\n  }, [userData, selectedEmployeeId, secondEmployeeId, weekOffset, weeksRange, mode]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prev => prev + direction);\n  };\n  const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"statistics-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Shift Statistics Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week-navigation centered-navigation\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"navigation-button\",\n            onClick: () => handleWeekChange(-1),\n            children: \"Previous Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"week-range\",\n            children: weeksRange === 1 ? `Week: ${calculateWeekRange(weekOffset)}` : `Weeks: ${calculateWeekRange(weekOffset - weeksRange + 1)} To ${calculateWeekRange(weekOffset)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"navigation-button\",\n            onClick: () => handleWeekChange(1),\n            children: \"Next Week\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weeks-range-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"weeksRange\",\n            children: \"Number of weeks to include:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"weeksRange\",\n            min: \"1\",\n            value: weeksRange,\n            onChange: e => {\n              const value = parseInt(e.target.value);\n              if (!isNaN(value) && value > 0) {\n                setWeeksRange(value);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mode-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              value: \"single\",\n              checked: mode === 'single',\n              onChange: () => setMode('single')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this), \" Single\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              value: \"compare\",\n              checked: mode === 'compare',\n              onChange: () => setMode('compare')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this), \" Compare\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-box\",\n          children: mode === 'compare' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comparison-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"employee-comparison-box\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employee-selector\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Select First Employee:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  className: \"employee-dropdown\",\n                  classNamePrefix: \"react-select\",\n                  options: sortedEmployees.map(e => ({\n                    value: e.id,\n                    label: e.name\n                  })),\n                  onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                  value: sortedEmployees.map(e => ({\n                    value: e.id,\n                    label: e.name\n                  })).find(o => o.value === selectedEmployeeId) || null,\n                  placeholder: \"Choose employee\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 37\n              }, this), stats && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"statistics-summary\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total Night Shifts:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 48\n                  }, this), \" \", stats.nightShifts]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total Shabbat Shifts:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 48\n                  }, this), \" \", stats.shabbatShifts]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total Regular Shifts:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 48\n                  }, this), \" \", stats.regularShifts]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total All Shifts:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 48\n                  }, this), \" \", stats.totalAll]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Average per Week:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 48\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Night: \", stats.avgNight.toFixed(2), \" (\", (stats.nightShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Shabbat: \", stats.avgShabbat.toFixed(2), \" (\", (stats.shabbatShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Regular: \", stats.avgRegular.toFixed(2), \" (\", (stats.regularShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"All Shifts: \", stats.avgAll.toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"employee-comparison-box\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employee-selector\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Select Second Employee:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  className: \"employee-dropdown\",\n                  classNamePrefix: \"react-select\",\n                  options: sortedEmployees.map(e => ({\n                    value: e.id,\n                    label: e.name\n                  })),\n                  onChange: option => setSecondEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                  value: sortedEmployees.map(e => ({\n                    value: e.id,\n                    label: e.name\n                  })).find(o => o.value === secondEmployeeId) || null,\n                  placeholder: \"Choose employee\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 37\n              }, this), secondStats && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"statistics-summary\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total Night Shifts:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 48\n                  }, this), \" \", secondStats.nightShifts]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total Shabbat Shifts:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 48\n                  }, this), \" \", secondStats.shabbatShifts]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total Regular Shifts:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 48\n                  }, this), \" \", secondStats.regularShifts]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total All Shifts:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 224,\n                    columnNumber: 48\n                  }, this), \" \", secondStats.totalAll]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Average per Week:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 48\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Night: \", secondStats.avgNight.toFixed(2), \" (\", (secondStats.nightShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Shabbat: \", secondStats.avgShabbat.toFixed(2), \" (\", (secondStats.shabbatShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Regular: \", secondStats.avgRegular.toFixed(2), \" (\", (secondStats.regularShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"All Shifts: \", secondStats.avgAll.toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee-comparison-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"employee-selector\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Select Employee:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                className: \"employee-dropdown\",\n                classNamePrefix: \"react-select\",\n                options: sortedEmployees.map(e => ({\n                  value: e.id,\n                  label: e.name\n                })),\n                onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                value: sortedEmployees.map(e => ({\n                  value: e.id,\n                  label: e.name\n                })).find(o => o.value === selectedEmployeeId) || null,\n                placeholder: \"Choose employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 33\n            }, this), stats && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"statistics-summary\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Night Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 44\n                }, this), \" \", stats.nightShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Shabbat Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 44\n                }, this), \" \", stats.shabbatShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total Regular Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 44\n                }, this), \" \", stats.regularShifts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total All Shifts:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 44\n                }, this), \" \", stats.totalAll]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Average per Week:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Night: \", stats.avgNight.toFixed(2), \" (\", (stats.nightShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Shabbat: \", stats.avgShabbat.toFixed(2), \" (\", (stats.shabbatShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Regular: \", stats.avgRegular.toFixed(2), \" (\", (stats.regularShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"All Shifts: \", stats.avgAll.toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(StatisticsScreen, \"pfnsO/aX3XrWlTK3BTEJbWQpr28=\", false, function () {\n  return [useNavigate];\n});\n_c = StatisticsScreen;\nexport default StatisticsScreen;\nvar _c;\n$RefreshReg$(_c, \"StatisticsScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","toast","ToastContainer","Select","Navbar","Loader","BackgroundWrapper","getUsers","getWeeklyStats","calculateWeekKey","calculateWeekRange","jsxDEV","_jsxDEV","StatisticsScreen","_s","userData","setUserData","employees","setEmployees","mode","setMode","selectedEmployeeId","setSelectedEmployeeId","secondEmployeeId","setSecondEmployeeId","stats","setStats","secondStats","setSecondStats","weekOffset","setWeekOffset","weeksRange","setWeeksRange","navigate","window","scrollTo","top","loggedUser","JSON","parse","localStorage","getItem","fetchEmployees","usersData","companyId","company","id","filteredEmployees","Object","entries","map","user","filter","_user$companyIds","companyIds","some","c","error","console","fetchStats","employeeId","setter","now","Date","year","getFullYear","month","getMonth","totalNight","totalShabbat","totalRegular","offset","weekKey","data","nightShifts","shabbatShifts","regularShifts","totalAllShifts","avgNight","avgShabbat","avgRegular","totalAll","avgAll","handleWeekChange","direction","prev","sortedEmployees","sort","a","b","name","localeCompare","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","htmlFor","type","min","value","onChange","e","parseInt","target","isNaN","checked","classNamePrefix","options","label","option","find","o","placeholder","toFixed","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js"],"sourcesContent":["// React and core libraries\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Internal components and styles\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport '../styles/StatisticsScreen.css';\n\n// Services\nimport { getUsers } from '../services/userService';\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utils\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\nconst StatisticsScreen = () => {\n    const [userData, setUserData] = useState(null);\n    const [employees, setEmployees] = useState([]);\n    const [mode, setMode] = useState('single'); // 'single' or 'compare'\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [secondEmployeeId, setSecondEmployeeId] = useState(null);\n    const [stats, setStats] = useState(null);\n    const [secondStats, setSecondStats] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n    const [weeksRange, setWeeksRange] = useState(1);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        window.scrollTo({ top: 0 });\n    }, []);\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n            const fetchEmployees = async () => {\n                try {\n                    const usersData = await getUsers();\n                    const companyId = loggedUser.company.id;\n                    const filteredEmployees = Object.entries(usersData)\n                        .map(([id, user]) => ({ id, ...user }))\n                        .filter((user) => user.companyIds?.some((c) => c.companyId === companyId));\n                    setEmployees(filteredEmployees);\n                } catch (error) {\n                    console.error('Error fetching employees:', error);\n                }\n            };\n            fetchEmployees();\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchStats = async (employeeId, setter) => {\n            try {\n                const companyId = userData.company.id;\n                const now = new Date();\n                const year = now.getFullYear();\n                const month = now.getMonth() + 1;\n\n                let totalNight = 0;\n                let totalShabbat = 0;\n                let totalRegular = 0;\n\n                for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n                    const weekKey = calculateWeekKey(offset);\n                    const data = await getWeeklyStats(companyId, year, month, weekKey, employeeId);\n\n                    if (data) {\n                        totalNight += data.nightShifts || 0;\n                        totalShabbat += data.shabbatShifts || 0;\n                        totalRegular += data.regularShifts || 0;\n                    }\n                }\n\n                const totalAllShifts = totalNight + totalShabbat + totalRegular;\n\n                setter({\n                    nightShifts: totalNight,\n                    shabbatShifts: totalShabbat,\n                    regularShifts: totalRegular,\n                    avgNight: totalNight / weeksRange,\n                    avgShabbat: totalShabbat / weeksRange,\n                    avgRegular: totalRegular / weeksRange,\n                    totalAll: totalAllShifts,\n                    avgAll: totalAllShifts / weeksRange\n                });\n            } catch (error) {\n                console.error('Error fetching stats:', error);\n                toast.error('Failed to fetch statistics');\n            }\n        };\n\n        if (!userData) return;\n\n        if (mode === 'single' && selectedEmployeeId) {\n            fetchStats(selectedEmployeeId, setStats);\n        } else if (mode === 'compare' && selectedEmployeeId && secondEmployeeId) {\n            fetchStats(selectedEmployeeId, setStats);\n            fetchStats(secondEmployeeId, setSecondStats);\n        }\n    }, [userData, selectedEmployeeId, secondEmployeeId, weekOffset, weeksRange, mode]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prev) => prev + direction);\n    };\n\n    const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n\n    return (\n        <BackgroundWrapper>\n            <div>\n                <Navbar />\n                <div className=\"navbar-placeholder\"></div>\n\n                <div className=\"statistics-container\">\n                    <h1>Shift Statistics Summary</h1>\n\n                    <div className=\"week-navigation centered-navigation\">\n                        <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                            Previous Week\n                        </button>\n                        <h2 className=\"week-range\">\n                            {weeksRange === 1\n                                ? `Week: ${calculateWeekRange(weekOffset)}`\n                                : `Weeks: ${calculateWeekRange(weekOffset - weeksRange + 1)} To ${calculateWeekRange(weekOffset)}`}\n                        </h2>\n                        <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                            Next Week\n                        </button>\n                    </div>\n\n                    <div className=\"weeks-range-selector\">\n                        <label htmlFor=\"weeksRange\">Number of weeks to include:</label>\n                        <input\n                            type=\"number\"\n                            id=\"weeksRange\"\n                            min=\"1\"\n                            value={weeksRange}\n                            onChange={(e) => {\n                                const value = parseInt(e.target.value);\n                                if (!isNaN(value) && value > 0) {\n                                    setWeeksRange(value);\n                                }\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"mode-toggle\">\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"single\"\n                                checked={mode === 'single'}\n                                onChange={() => setMode('single')}\n                            /> Single\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"compare\"\n                                checked={mode === 'compare'}\n                                onChange={() => setMode('compare')}\n                            /> Compare\n                        </label>\n                    </div>\n\n                    <div className=\"stats-box\">\n                        {mode === 'compare' ? (\n                            <div className=\"comparison-container\">\n                                <div className=\"employee-comparison-box\">\n                                    <div className=\"employee-selector\">\n                                        <label>Select First Employee:</label>\n                                        <Select\n                                            className=\"employee-dropdown\"\n                                            classNamePrefix=\"react-select\"\n                                            options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                            onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                            value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                                            placeholder=\"Choose employee\"\n                                        />\n                                    </div>\n                                    {stats && (\n                                        <div className=\"statistics-summary\">\n                                            <p><strong>Total Night Shifts:</strong> {stats.nightShifts}</p>\n                                            <p><strong>Total Shabbat Shifts:</strong> {stats.shabbatShifts}</p>\n                                            <p><strong>Total Regular Shifts:</strong> {stats.regularShifts}</p>\n                                            <p><strong>Total All Shifts:</strong> {stats.totalAll}</p>\n                                            <hr />\n                                            <p><strong>Average per Week:</strong></p>\n                                            <p>Night: {stats.avgNight.toFixed(2)} ({((stats.nightShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Shabbat: {stats.avgShabbat.toFixed(2)} ({((stats.shabbatShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Regular: {stats.avgRegular.toFixed(2)} ({((stats.regularShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>All Shifts: {stats.avgAll.toFixed(2)}</p>\n                                        </div>\n                                    )}\n                                </div>\n\n                                <div className=\"employee-comparison-box\">\n                                    <div className=\"employee-selector\">\n                                        <label>Select Second Employee:</label>\n                                        <Select\n                                            className=\"employee-dropdown\"\n                                            classNamePrefix=\"react-select\"\n                                            options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                            onChange={(option) => setSecondEmployeeId(option?.value || '')}\n                                            value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === secondEmployeeId) || null}\n                                            placeholder=\"Choose employee\"\n                                        />\n                                    </div>\n                                    {secondStats && (\n                                        <div className=\"statistics-summary\">\n                                            <p><strong>Total Night Shifts:</strong> {secondStats.nightShifts}</p>\n                                            <p><strong>Total Shabbat Shifts:</strong> {secondStats.shabbatShifts}</p>\n                                            <p><strong>Total Regular Shifts:</strong> {secondStats.regularShifts}</p>\n                                            <p><strong>Total All Shifts:</strong> {secondStats.totalAll}</p>\n                                            <hr />\n                                            <p><strong>Average per Week:</strong></p>\n                                            <p>Night: {secondStats.avgNight.toFixed(2)} ({((secondStats.nightShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Shabbat: {secondStats.avgShabbat.toFixed(2)} ({((secondStats.shabbatShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Regular: {secondStats.avgRegular.toFixed(2)} ({((secondStats.regularShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>All Shifts: {secondStats.avgAll.toFixed(2)}</p>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        ) : (\n                            <div className=\"employee-comparison-box\">\n                                <div className=\"employee-selector\">\n                                    <label>Select Employee:</label>\n                                    <Select\n                                        className=\"employee-dropdown\"\n                                        classNamePrefix=\"react-select\"\n                                        options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                        onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                        value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                                        placeholder=\"Choose employee\"\n                                    />\n                                </div>\n                                {stats && (\n                                    <div className=\"statistics-summary\">\n                                        <p><strong>Total Night Shifts:</strong> {stats.nightShifts}</p>\n                                        <p><strong>Total Shabbat Shifts:</strong> {stats.shabbatShifts}</p>\n                                        <p><strong>Total Regular Shifts:</strong> {stats.regularShifts}</p>\n                                        <p><strong>Total All Shifts:</strong> {stats.totalAll}</p>\n                                        <hr />\n                                        <p><strong>Average per Week:</strong></p>\n                                        <p>Night: {stats.avgNight.toFixed(2)} ({((stats.nightShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>Shabbat: {stats.avgShabbat.toFixed(2)} ({((stats.shabbatShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>Regular: {stats.avgRegular.toFixed(2)} ({((stats.regularShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                        <p>All Shifts: {stats.avgAll.toFixed(2)}</p>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                    </div>\n                </div>\n\n                <ToastContainer />\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default StatisticsScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}