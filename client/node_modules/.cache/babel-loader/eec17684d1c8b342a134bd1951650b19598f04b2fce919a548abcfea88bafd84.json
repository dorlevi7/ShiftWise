{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for chat-related API calls\nconst API_URL = 'http://localhost:5000/api/chat';\n\n// Send a message to the group chat\nexport const sendGroupMessage = async (companyId, messageData) => {\n  try {\n    const response = await axios.post(`${API_URL}/${companyId}/group`, messageData);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending group message:', error.message);\n    throw error;\n  }\n};\n\n// Get all group messages for a company\nexport const getGroupMessages = async companyId => {\n  try {\n    const response = await axios.get(`${API_URL}/${companyId}/group`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching group messages:', error.message);\n    throw error;\n  }\n};\n\n// Send a private message between two users\nexport const sendPrivateMessage = async (companyId, user1Id, user2Id, messageData) => {\n  try {\n    const response = await axios.post(`${API_URL}/${companyId}/private/${user1Id}/${user2Id}`, messageData);\n    return response.data;\n  } catch (error) {\n    console.error('Error sending private message:', error.message);\n    throw error;\n  }\n};\n\n// Get all private messages between two users\nexport const getPrivateMessages = async (companyId, user1Id, user2Id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${companyId}/private/${user1Id}/${user2Id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching private messages:', error.message);\n    throw error;\n  }\n};\nexport const markPrivateSeen = async (companyId, user1Id, user2Id, viewerId) => {\n  try {\n    const response = await axios.post(`${API_URL}/${companyId}/private/${user1Id}/${user2Id}/seen/${viewerId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error marking private messages as seen:', error.message);\n    throw error;\n  }\n};\nexport const getPrivateLastSeen = async (companyId, user1Id, user2Id, viewerId) => {\n  try {\n    var _response$data;\n    const response = await axios.get(`${API_URL}/${companyId}/private/${user1Id}/${user2Id}/last-seen/${viewerId}`);\n    return ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.lastSeen) || 0;\n  } catch (error) {\n    console.error('Error getting last seen:', error.message);\n    return 0;\n  }\n};","map":{"version":3,"names":["axios","API_URL","sendGroupMessage","companyId","messageData","response","post","data","error","console","message","getGroupMessages","get","sendPrivateMessage","user1Id","user2Id","getPrivateMessages","markPrivateSeen","viewerId","getPrivateLastSeen","_response$data","lastSeen"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/services/chatService.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for chat-related API calls\nconst API_URL = 'http://localhost:5000/api/chat';\n\n// Send a message to the group chat\nexport const sendGroupMessage = async (companyId, messageData) => {\n    try {\n        const response = await axios.post(`${API_URL}/${companyId}/group`, messageData);\n        return response.data;\n    } catch (error) {\n        console.error('Error sending group message:', error.message);\n        throw error;\n    }\n};\n\n// Get all group messages for a company\nexport const getGroupMessages = async (companyId) => {\n    try {\n        const response = await axios.get(`${API_URL}/${companyId}/group`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching group messages:', error.message);\n        throw error;\n    }\n};\n\n// Send a private message between two users\nexport const sendPrivateMessage = async (companyId, user1Id, user2Id, messageData) => {\n    try {\n        const response = await axios.post(`${API_URL}/${companyId}/private/${user1Id}/${user2Id}`, messageData);\n        return response.data;\n    } catch (error) {\n        console.error('Error sending private message:', error.message);\n        throw error;\n    }\n};\n\n// Get all private messages between two users\nexport const getPrivateMessages = async (companyId, user1Id, user2Id) => {\n    try {\n        const response = await axios.get(`${API_URL}/${companyId}/private/${user1Id}/${user2Id}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching private messages:', error.message);\n        throw error;\n    }\n};\n\nexport const markPrivateSeen = async (companyId, user1Id, user2Id, viewerId) => {\n    try {\n        const response = await axios.post(`${API_URL}/${companyId}/private/${user1Id}/${user2Id}/seen/${viewerId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error marking private messages as seen:', error.message);\n        throw error;\n    }\n};\n\nexport const getPrivateLastSeen = async (companyId, user1Id, user2Id, viewerId) => {\n    try {\n        const response = await axios.get(`${API_URL}/${companyId}/private/${user1Id}/${user2Id}/last-seen/${viewerId}`);\n        return response.data?.lastSeen || 0;\n    } catch (error) {\n        console.error('Error getting last seen:', error.message);\n        return 0;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}