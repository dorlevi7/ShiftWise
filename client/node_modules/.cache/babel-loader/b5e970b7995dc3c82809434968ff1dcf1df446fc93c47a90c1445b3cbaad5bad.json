{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { saveAvailability, getAvailability } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport '../styles/AvailabilityScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AvailabilityScreen = () => {\n  _s();\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n  const [availability, setAvailability] = useState(null);\n  const [notes, setNotes] = useState('');\n  const [currentWeek, setCurrentWeek] = useState(1);\n  const [userData, setUserData] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null); // עובד שנבחר על ידי המנהל\n  const navigate = useNavigate();\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n    }\n  }, [navigate]);\n  useEffect(() => {\n    var _userData$user;\n    if ((userData === null || userData === void 0 ? void 0 : (_userData$user = userData.user) === null || _userData$user === void 0 ? void 0 : _userData$user.role) === 'admin') {\n      const fetchEmployees = async () => {\n        try {\n          const data = await getUsers();\n          const usersWithIds = data ? Object.entries(data).map(([id, user]) => ({\n            id,\n            ...user\n          })) : [];\n          setEmployees(usersWithIds);\n        } catch (error) {\n          console.error('Error fetching employees:', error);\n        }\n      };\n      fetchEmployees();\n    }\n  }, [userData]);\n  useEffect(() => {\n    const fetchAvailability = async () => {\n      var _userData$company, _userData$user2;\n      const companyId = userData === null || userData === void 0 ? void 0 : (_userData$company = userData.company) === null || _userData$company === void 0 ? void 0 : _userData$company.id;\n      const userId = selectedUser ? selectedUser.id : userData === null || userData === void 0 ? void 0 : (_userData$user2 = userData.user) === null || _userData$user2 === void 0 ? void 0 : _userData$user2.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      if (companyId && userId) {\n        try {\n          const fetchedAvailability = await getAvailability(companyId, weekKey, userId);\n          setAvailability(initializeAvailability(fetchedAvailability || {}));\n          setNotes((fetchedAvailability === null || fetchedAvailability === void 0 ? void 0 : fetchedAvailability.notes) || '');\n        } catch (error) {\n          console.error('Error fetching availability:', error);\n          alert('Failed to fetch availability. Please try again.');\n        }\n      }\n    };\n    if (userData) {\n      fetchAvailability();\n    }\n  }, [currentWeek, userData, selectedUser]);\n  const calculateWeekKey = weekOffset => {\n    const today = new Date();\n    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n    const formatDate = date => `${date.getFullYear()}_${String(date.getMonth() + 1).padStart(2, '0')}_${String(date.getDate()).padStart(2, '0')}`;\n    return `week_${formatDate(firstDayOfWeek)}`;\n  };\n  const calculateWeekRange = weekOffset => {\n    const today = new Date();\n    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n    const lastDayOfWeek = new Date(firstDayOfWeek);\n    lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);\n    const formatDate = date => {\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    };\n    return `${formatDate(firstDayOfWeek)} - ${formatDate(lastDayOfWeek)}`;\n  };\n  const initializeAvailability = existingAvailability => {\n    return shifts.reduce((acc, shift) => {\n      acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n        var _existingAvailability;\n        dayAcc[day] = ((_existingAvailability = existingAvailability[shift]) === null || _existingAvailability === void 0 ? void 0 : _existingAvailability[day]) || false;\n        return dayAcc;\n      }, {});\n      return acc;\n    }, {});\n  };\n  const handleAvailabilityChange = (shift, day) => {\n    setAvailability(prev => ({\n      ...prev,\n      [shift]: {\n        ...prev[shift],\n        [day]: !prev[shift][day]\n      }\n    }));\n  };\n  const handleWeekChange = direction => {\n    setCurrentWeek(prevWeek => prevWeek + direction);\n  };\n  const handleSubmit = async () => {\n    const companyId = userData.company.id;\n    const userId = selectedUser ? selectedUser.id : userData.user.id;\n    const weekKey = calculateWeekKey(currentWeek);\n    try {\n      const dataToSave = {\n        ...availability,\n        notes\n      };\n      await saveAvailability(companyId, weekKey, userId, dataToSave);\n      alert('Availability and notes saved successfully!');\n    } catch (error) {\n      console.error('Error saving availability or notes:', error);\n      alert('Failed to save availability or notes. Please try again.');\n    }\n  };\n  if (!userData || !availability) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"availability-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weekly Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), userData.user.role === 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employee-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"employeeSelect\",\n        children: \"Select Employee:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"employeeSelect\",\n        onChange: e => setSelectedUser(employees.find(emp => emp.id === e.target.value)),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Myself\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: employee.id,\n          children: employee.name\n        }, employee.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"week-navigation\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleWeekChange(-1),\n        children: \"Previous Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: calculateWeekRange(currentWeek)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleWeekChange(1),\n        children: \"Next Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"availability-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Shift\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: shifts.map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: shift\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this), daysOfWeek.map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: availability[shift][day],\n              onChange: () => handleAvailabilityChange(shift, day)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 37\n            }, this)\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 33\n          }, this))]\n        }, shift, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"notes-textarea\",\n      placeholder: \"Write weekly notes here...\",\n      value: notes,\n      onChange: e => setNotes(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n_s(AvailabilityScreen, \"REp1gycagrpj4k96UsSfdVKPKGw=\", false, function () {\n  return [useNavigate];\n});\n_c = AvailabilityScreen;\nexport default AvailabilityScreen;\nvar _c;\n$RefreshReg$(_c, \"AvailabilityScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Navbar","saveAvailability","getAvailability","getUsers","jsxDEV","_jsxDEV","AvailabilityScreen","_s","daysOfWeek","shifts","availability","setAvailability","notes","setNotes","currentWeek","setCurrentWeek","userData","setUserData","employees","setEmployees","selectedUser","setSelectedUser","navigate","loggedUser","JSON","parse","localStorage","getItem","_userData$user","user","role","fetchEmployees","data","usersWithIds","Object","entries","map","id","error","console","fetchAvailability","_userData$company","_userData$user2","companyId","company","userId","weekKey","calculateWeekKey","fetchedAvailability","initializeAvailability","alert","weekOffset","today","Date","firstDayOfWeek","setDate","getDate","getDay","formatDate","date","getFullYear","String","getMonth","padStart","calculateWeekRange","lastDayOfWeek","day","month","year","existingAvailability","reduce","acc","shift","dayAcc","_existingAvailability","handleAvailabilityChange","prev","handleWeekChange","direction","prevWeek","handleSubmit","dataToSave","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","onChange","e","find","emp","target","value","employee","name","onClick","type","checked","placeholder","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport { saveAvailability, getAvailability } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport '../styles/AvailabilityScreen.css';\n\nconst AvailabilityScreen = () => {\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n\n    const [availability, setAvailability] = useState(null);\n    const [notes, setNotes] = useState('');\n    const [currentWeek, setCurrentWeek] = useState(1);\n    const [userData, setUserData] = useState(null);\n    const [employees, setEmployees] = useState([]);\n    const [selectedUser, setSelectedUser] = useState(null); // עובד שנבחר על ידי המנהל\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        if (userData?.user?.role === 'admin') {\n            const fetchEmployees = async () => {\n                try {\n                    const data = await getUsers();\n                    const usersWithIds = data\n                        ? Object.entries(data).map(([id, user]) => ({ id, ...user }))\n                        : [];\n                    setEmployees(usersWithIds);\n                } catch (error) {\n                    console.error('Error fetching employees:', error);\n                }\n            };\n            fetchEmployees();\n        }\n    }, [userData]);\n\n    useEffect(() => {\n        const fetchAvailability = async () => {\n            const companyId = userData?.company?.id;\n            const userId = selectedUser ? selectedUser.id : userData?.user?.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            if (companyId && userId) {\n                try {\n                    const fetchedAvailability = await getAvailability(companyId, weekKey, userId);\n                    setAvailability(\n                        initializeAvailability(fetchedAvailability || {})\n                    );\n                    setNotes(fetchedAvailability?.notes || '');\n                } catch (error) {\n                    console.error('Error fetching availability:', error);\n                    alert('Failed to fetch availability. Please try again.');\n                }\n            }\n        };\n\n        if (userData) {\n            fetchAvailability();\n        }\n    }, [currentWeek, userData, selectedUser]);\n\n    const calculateWeekKey = (weekOffset) => {\n        const today = new Date();\n        const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n        const formatDate = (date) => `${date.getFullYear()}_${String(date.getMonth() + 1).padStart(2, '0')}_${String(date.getDate()).padStart(2, '0')}`;\n        return `week_${formatDate(firstDayOfWeek)}`;\n    };\n\n    const calculateWeekRange = (weekOffset) => {\n        const today = new Date();\n        const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + weekOffset * 7));\n        const lastDayOfWeek = new Date(firstDayOfWeek);\n        lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);\n\n        const formatDate = (date) => {\n            const day = String(date.getDate()).padStart(2, '0');\n            const month = String(date.getMonth() + 1).padStart(2, '0');\n            const year = date.getFullYear();\n            return `${day}/${month}/${year}`;\n        };\n\n        return `${formatDate(firstDayOfWeek)} - ${formatDate(lastDayOfWeek)}`;\n    };\n\n    const initializeAvailability = (existingAvailability) => {\n        return shifts.reduce((acc, shift) => {\n            acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n                dayAcc[day] = existingAvailability[shift]?.[day] || false;\n                return dayAcc;\n            }, {});\n            return acc;\n        }, {});\n    };\n\n    const handleAvailabilityChange = (shift, day) => {\n        setAvailability((prev) => ({\n            ...prev,\n            [shift]: {\n                ...prev[shift],\n                [day]: !prev[shift][day],\n            },\n        }));\n    };\n\n    const handleWeekChange = (direction) => {\n        setCurrentWeek((prevWeek) => prevWeek + direction);\n    };\n\n    const handleSubmit = async () => {\n        const companyId = userData.company.id;\n        const userId = selectedUser ? selectedUser.id : userData.user.id;\n        const weekKey = calculateWeekKey(currentWeek);\n\n        try {\n            const dataToSave = {\n                ...availability,\n                notes,\n            };\n\n            await saveAvailability(companyId, weekKey, userId, dataToSave);\n            alert('Availability and notes saved successfully!');\n        } catch (error) {\n            console.error('Error saving availability or notes:', error);\n            alert('Failed to save availability or notes. Please try again.');\n        }\n    };\n\n    if (!userData || !availability) {\n        return <p>Loading...</p>;\n    }\n\n    return (\n        <div className=\"availability-container\">\n            <Navbar />\n            <h1>Weekly Availability</h1>\n\n            {userData.user.role === 'admin' && (\n                <div className=\"employee-selector\">\n                    <label htmlFor=\"employeeSelect\">Select Employee:</label>\n                    <select\n                        id=\"employeeSelect\"\n                        onChange={(e) =>\n                            setSelectedUser(employees.find((emp) => emp.id === e.target.value))\n                        }\n                    >\n                        <option value=\"\">Myself</option>\n                        {employees.map((employee) => (\n                            <option key={employee.id} value={employee.id}>\n                                {employee.name}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            )}\n\n            <div className=\"week-navigation\">\n                <button onClick={() => handleWeekChange(-1)}>Previous Week</button>\n                <h2>{calculateWeekRange(currentWeek)}</h2>\n                <button onClick={() => handleWeekChange(1)}>Next Week</button>\n            </div>\n\n            <table className=\"availability-table\">\n                <thead>\n                    <tr>\n                        <th>Shift</th>\n                        {daysOfWeek.map((day) => (\n                            <th key={day}>{day}</th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {shifts.map((shift) => (\n                        <tr key={shift}>\n                            <td>{shift}</td>\n                            {daysOfWeek.map((day) => (\n                                <td key={day}>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={availability[shift][day]}\n                                        onChange={() => handleAvailabilityChange(shift, day)}\n                                    />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n\n            <textarea\n                className=\"notes-textarea\"\n                placeholder=\"Write weekly notes here...\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n            ></textarea>\n            <button className=\"submit-button\" onClick={handleSubmit}>\n                Submit\n            </button>\n        </div>\n    );\n};\n\nexport default AvailabilityScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}