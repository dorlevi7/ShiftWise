{"ast":null,"code":"// utils/employeeUtils.js\nimport { fileToBase64 } from './fileUtils';\nimport { getUsers, addUser, updateUserCompanies } from '../services/userService';\nimport { addEmployeeToCompany } from '../services/companyService';\nimport { toast } from 'react-toastify';\nexport const getPhotoDataUrl = async file => {\n  return file ? await fileToBase64(file) : '';\n};\nexport const findExistingUser = async email => {\n  const allUsers = await getUsers();\n  return Object.values(allUsers).find(user => user.email === email);\n};\nexport const associateUserWithCompany = async (user, company, employees, setEmployees) => {\n  await updateUserCompanies(user, company);\n  await addEmployeeToCompany(company.id, user.id);\n  const alreadyInUI = employees.some(emp => emp.id === user.id);\n  if (!alreadyInUI) {\n    setEmployees(prev => [...prev, user]);\n  }\n  toast.info('User already exists, added to the company.');\n};\nexport const createAndAddNewEmployee = async (data, photoData, company, setEmployees) => {\n  const added = await addUser({\n    ...data,\n    photoData\n  });\n  await updateUserCompanies(added, company);\n  await addEmployeeToCompany(company.id, added.id);\n  setEmployees(prev => [...prev, {\n    id: added.id,\n    ...added\n  }]);\n  toast.success('New user added successfully!');\n};\nexport const resetNewEmployeeForm = setNewEmployee => {\n  setNewEmployee({\n    name: '',\n    email: '',\n    phone: '',\n    role: 'employee',\n    password: '',\n    photoFile: null\n  });\n};\nexport const filterEmployees = (employees, searchQuery, filterRole) => {\n  return employees.filter(employee => {\n    return (employee.name.toLowerCase().startsWith(searchQuery.toLowerCase()) || employee.email.toLowerCase().startsWith(searchQuery.toLowerCase())) && (filterRole === 'all' || employee.role === filterRole);\n  });\n};","map":{"version":3,"names":["fileToBase64","getUsers","addUser","updateUserCompanies","addEmployeeToCompany","toast","getPhotoDataUrl","file","findExistingUser","email","allUsers","Object","values","find","user","associateUserWithCompany","company","employees","setEmployees","id","alreadyInUI","some","emp","prev","info","createAndAddNewEmployee","data","photoData","added","success","resetNewEmployeeForm","setNewEmployee","name","phone","role","password","photoFile","filterEmployees","searchQuery","filterRole","filter","employee","toLowerCase","startsWith"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/utils/employeeUtils.js"],"sourcesContent":["// utils/employeeUtils.js\nimport { fileToBase64 } from './fileUtils';\nimport { getUsers, addUser, updateUserCompanies } from '../services/userService';\nimport { addEmployeeToCompany } from '../services/companyService';\nimport { toast } from 'react-toastify';\n\nexport const getPhotoDataUrl = async (file) => {\n    return file ? await fileToBase64(file) : '';\n};\n\nexport const findExistingUser = async (email) => {\n    const allUsers = await getUsers();\n    return Object.values(allUsers).find((user) => user.email === email);\n};\n\nexport const associateUserWithCompany = async (user, company, employees, setEmployees) => {\n    await updateUserCompanies(user, company);\n    await addEmployeeToCompany(company.id, user.id);\n\n    const alreadyInUI = employees.some((emp) => emp.id === user.id);\n    if (!alreadyInUI) {\n        setEmployees((prev) => [...prev, user]);\n    }\n\n    toast.info('User already exists, added to the company.');\n};\n\nexport const createAndAddNewEmployee = async (data, photoData, company, setEmployees) => {\n    const added = await addUser({ ...data, photoData });\n    await updateUserCompanies(added, company);\n    await addEmployeeToCompany(company.id, added.id);\n    setEmployees((prev) => [...prev, { id: added.id, ...added }]);\n    toast.success('New user added successfully!');\n};\n\nexport const resetNewEmployeeForm = (setNewEmployee) => {\n    setNewEmployee({\n        name: '', email: '', phone: '', role: 'employee', password: '', photoFile: null\n    });\n};\n\nexport const filterEmployees = (employees, searchQuery, filterRole) => {\n    return employees.filter((employee) => {\n        return (\n            (employee.name.toLowerCase().startsWith(searchQuery.toLowerCase()) ||\n                employee.email.toLowerCase().startsWith(searchQuery.toLowerCase())) &&\n            (filterRole === 'all' || employee.role === filterRole)\n        );\n    });\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,aAAa;AAC1C,SAASC,QAAQ,EAAEC,OAAO,EAAEC,mBAAmB,QAAQ,yBAAyB;AAChF,SAASC,oBAAoB,QAAQ,4BAA4B;AACjE,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,MAAMC,eAAe,GAAG,MAAOC,IAAI,IAAK;EAC3C,OAAOA,IAAI,GAAG,MAAMP,YAAY,CAACO,IAAI,CAAC,GAAG,EAAE;AAC/C,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC7C,MAAMC,QAAQ,GAAG,MAAMT,QAAQ,CAAC,CAAC;EACjC,OAAOU,MAAM,CAACC,MAAM,CAACF,QAAQ,CAAC,CAACG,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACL,KAAK,KAAKA,KAAK,CAAC;AACvE,CAAC;AAED,OAAO,MAAMM,wBAAwB,GAAG,MAAAA,CAAOD,IAAI,EAAEE,OAAO,EAAEC,SAAS,EAAEC,YAAY,KAAK;EACtF,MAAMf,mBAAmB,CAACW,IAAI,EAAEE,OAAO,CAAC;EACxC,MAAMZ,oBAAoB,CAACY,OAAO,CAACG,EAAE,EAAEL,IAAI,CAACK,EAAE,CAAC;EAE/C,MAAMC,WAAW,GAAGH,SAAS,CAACI,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACH,EAAE,KAAKL,IAAI,CAACK,EAAE,CAAC;EAC/D,IAAI,CAACC,WAAW,EAAE;IACdF,YAAY,CAAEK,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAET,IAAI,CAAC,CAAC;EAC3C;EAEAT,KAAK,CAACmB,IAAI,CAAC,4CAA4C,CAAC;AAC5D,CAAC;AAED,OAAO,MAAMC,uBAAuB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,SAAS,EAAEX,OAAO,EAAEE,YAAY,KAAK;EACrF,MAAMU,KAAK,GAAG,MAAM1B,OAAO,CAAC;IAAE,GAAGwB,IAAI;IAAEC;EAAU,CAAC,CAAC;EACnD,MAAMxB,mBAAmB,CAACyB,KAAK,EAAEZ,OAAO,CAAC;EACzC,MAAMZ,oBAAoB,CAACY,OAAO,CAACG,EAAE,EAAES,KAAK,CAACT,EAAE,CAAC;EAChDD,YAAY,CAAEK,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;IAAEJ,EAAE,EAAES,KAAK,CAACT,EAAE;IAAE,GAAGS;EAAM,CAAC,CAAC,CAAC;EAC7DvB,KAAK,CAACwB,OAAO,CAAC,8BAA8B,CAAC;AACjD,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAIC,cAAc,IAAK;EACpDA,cAAc,CAAC;IACXC,IAAI,EAAE,EAAE;IAAEvB,KAAK,EAAE,EAAE;IAAEwB,KAAK,EAAE,EAAE;IAAEC,IAAI,EAAE,UAAU;IAAEC,QAAQ,EAAE,EAAE;IAAEC,SAAS,EAAE;EAC/E,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACpB,SAAS,EAAEqB,WAAW,EAAEC,UAAU,KAAK;EACnE,OAAOtB,SAAS,CAACuB,MAAM,CAAEC,QAAQ,IAAK;IAClC,OACI,CAACA,QAAQ,CAACT,IAAI,CAACU,WAAW,CAAC,CAAC,CAACC,UAAU,CAACL,WAAW,CAACI,WAAW,CAAC,CAAC,CAAC,IAC9DD,QAAQ,CAAChC,KAAK,CAACiC,WAAW,CAAC,CAAC,CAACC,UAAU,CAACL,WAAW,CAACI,WAAW,CAAC,CAAC,CAAC,MACrEH,UAAU,KAAK,KAAK,IAAIE,QAAQ,CAACP,IAAI,KAAKK,UAAU,CAAC;EAE9D,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}