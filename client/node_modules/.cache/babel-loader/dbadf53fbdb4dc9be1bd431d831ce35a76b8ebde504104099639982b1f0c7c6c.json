{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, calculatePreviousDay, calculateNextDay } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת זמינות ומשתמשים\n        const [availabilityData, usersData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers()]);\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n\n        // חישוב תאריכים לשבוע הנוכחי\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = status => {\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n\n      // Update the current shift's status to 'selected' or 'default'\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        // Disable other shifts on the same day\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n\n        // Handle unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        // Undo selection and revert unique rules\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n            if (otherShift === 'Morning' || otherShift === 'Noon') {\n              var _updatedAvailability$, _updatedAvailability$2, _updatedAvailability$3;\n              // Check if the previous night's shift is not selected\n              const previousDay = calculatePreviousDay(day);\n              if (((_updatedAvailability$ = updatedAvailability[userId]) === null || _updatedAvailability$ === void 0 ? void 0 : (_updatedAvailability$2 = _updatedAvailability$['Night']) === null || _updatedAvailability$2 === void 0 ? void 0 : (_updatedAvailability$3 = _updatedAvailability$2[previousDay]) === null || _updatedAvailability$3 === void 0 ? void 0 : _updatedAvailability$3.status) !== 'selected') {\n                updatedAvailability[userId][otherShift][day].status = 'default';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n              }\n            } else if (otherShift === 'Night') {\n              var _updatedAvailability$4, _updatedAvailability$5, _updatedAvailability$6, _updatedAvailability$7, _updatedAvailability$8, _updatedAvailability$9;\n              // Check if none of the next day's morning or noon shifts are selected\n              const nextDay = calculateNextDay(day);\n              if (!(((_updatedAvailability$4 = updatedAvailability[userId]) === null || _updatedAvailability$4 === void 0 ? void 0 : (_updatedAvailability$5 = _updatedAvailability$4['Morning']) === null || _updatedAvailability$5 === void 0 ? void 0 : (_updatedAvailability$6 = _updatedAvailability$5[nextDay]) === null || _updatedAvailability$6 === void 0 ? void 0 : _updatedAvailability$6.status) === 'selected' || ((_updatedAvailability$7 = updatedAvailability[userId]) === null || _updatedAvailability$7 === void 0 ? void 0 : (_updatedAvailability$8 = _updatedAvailability$7['Noon']) === null || _updatedAvailability$8 === void 0 ? void 0 : (_updatedAvailability$9 = _updatedAvailability$8[nextDay]) === null || _updatedAvailability$9 === void 0 ? void 0 : _updatedAvailability$9.status) === 'selected')) {\n                updatedAvailability[userId][otherShift][day].status = 'default';\n                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n              }\n            } else {\n              updatedAvailability[userId][otherShift][day].status = 'default';\n              await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n            }\n          }\n        }\n\n        // Revert unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n\n      // Update state with the modified availability\n      setAvailability(updatedAvailability);\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(-1),\n          children: \"Previous Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"week-range\",\n          children: calculateWeekRange(weekOffset)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(1),\n          children: \"Next Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading schedule...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"schedule-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Shift\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 33\n            }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 51\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"date\",\n                children: weekDates[index]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 45\n              }, this)]\n            }, day, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: shift\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 37\n            }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: Object.entries(availability).map(([userId, userData]) => {\n                var _userData$shift;\n                const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n                if (availabilityInfo !== null && availabilityInfo !== void 0 && availabilityInfo.isAvailable) {\n                  var _users$userId;\n                  const statusClass = getStatusClass(availabilityInfo.status);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `availability-entry ${statusClass}`,\n                    onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                    style: {\n                      backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ecf0f1',\n                      color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                      pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                      cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                    },\n                    children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                  }, userId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 61\n                  }, this);\n                }\n                return null;\n              })\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 45\n            }, this))]\n          }, shift, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"LKVZQ73zzDjLcbfagMCmzpo06i4=\");\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","getAllAvailabilities","getUsers","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","calculatePreviousDay","calculateNextDay","updateAvailabilityStatus","Navbar","jsxDEV","_jsxDEV","ScheduleScreen","_s","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","JSON","parse","localStorage","getItem","companyId","company","id","weekKey","availabilityData","usersData","Promise","all","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","console","handleWeekChange","direction","prevOffset","getStatusClass","status","handleStatusUpdate","userId","shift","day","currentStatus","newStatus","updatedAvailability","otherShift","_updatedAvailability$","_updatedAvailability$2","_updatedAvailability$3","previousDay","_updatedAvailability$4","_updatedAvailability$5","_updatedAvailability$6","_updatedAvailability$7","_updatedAvailability$8","_updatedAvailability$9","nextDay","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","index","Object","entries","userData","_userData$shift","availabilityInfo","isAvailable","_users$userId","statusClass","style","backgroundColor","color","pointerEvents","cursor","name","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, calculatePreviousDay, calculateNextDay } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n\n\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת זמינות ומשתמשים\n                const [availabilityData, usersData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers()\n                ]);\n\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n\n                // חישוב תאריכים לשבוע הנוכחי\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n                });\n                setWeekDates(dates);\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status) => {\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            // Update the current shift's status to 'selected' or 'default'\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                // Disable other shifts on the same day\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                // Handle unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                // Undo selection and revert unique rules\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n                        if (otherShift === 'Morning' || otherShift === 'Noon') {\n                            // Check if the previous night's shift is not selected\n                            const previousDay = calculatePreviousDay(day);\n                            if (\n                                updatedAvailability[userId]?.['Night']?.[previousDay]?.status !== 'selected'\n                            ) {\n                                updatedAvailability[userId][otherShift][day].status = 'default';\n                                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                            }\n                        } else if (otherShift === 'Night') {\n                            // Check if none of the next day's morning or noon shifts are selected\n                            const nextDay = calculateNextDay(day);\n                            if (\n                                !(\n                                    updatedAvailability[userId]?.['Morning']?.[nextDay]?.status === 'selected' ||\n                                    updatedAvailability[userId]?.['Noon']?.[nextDay]?.status === 'selected'\n                                )\n                            ) {\n                                updatedAvailability[userId][otherShift][day].status = 'default';\n                                await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                            }\n                        } else {\n                            updatedAvailability[userId][otherShift][day].status = 'default';\n                            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                        }\n                    }\n                }\n\n                // Revert unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            // Update state with the modified availability\n            setAvailability(updatedAvailability);\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div> {/* רווח לניווט */}\n\n            <div className=\"schedule-container\">\n                <h2>Weekly Schedule</h2>\n                <div className=\"week-navigation\">\n                    <button onClick={() => handleWeekChange(-1)}>Previous Week</button>\n                    <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                    <button onClick={() => handleWeekChange(1)}>Next Week</button>\n                </div>\n\n                {isLoading ? (\n                    <p>Loading schedule...</p>\n                ) : error ? (\n                    <p className=\"error\">{error}</p>\n                ) : (\n                    <table className=\"schedule-table\">\n                        <thead>\n                            <tr>\n                                <th>Shift</th>\n                                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                    (day, index) => (\n                                        <th key={day}>\n                                            {day} <br />\n                                            <span className=\"date\">{weekDates[index]}</span>\n                                        </th>\n                                    )\n                                )}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                <tr key={shift}>\n                                    <td>{shift}</td>\n                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                        (day) => (\n                                            <td key={day}>\n                                                {Object.entries(availability).map(([userId, userData]) => {\n                                                    const availabilityInfo = userData?.[shift]?.[day];\n                                                    if (availabilityInfo?.isAvailable) {\n                                                        const statusClass = getStatusClass(availabilityInfo.status);\n                                                        return (\n                                                            <div\n                                                                key={userId}\n                                                                className={`availability-entry ${statusClass}`}\n                                                                onClick={() =>\n                                                                    handleStatusUpdate(\n                                                                        userId,\n                                                                        shift,\n                                                                        day,\n                                                                        availabilityInfo.status\n                                                                    )\n                                                                }\n                                                                style={{\n                                                                    backgroundColor:\n                                                                        availabilityInfo.status === 'selected'\n                                                                            ? '#2ecc71'\n                                                                            : availabilityInfo.status === 'disabled'\n                                                                                ? '#e74c3c'\n                                                                                : '#ecf0f1',\n                                                                    color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                    pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                    cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                }}\n                                                            >\n                                                                {users[userId]?.name || 'Unknown'}\n                                                            </div>\n                                                        );\n                                                    }\n                                                    return null;\n                                                })}\n                                            </td>\n                                        )\n                                    )}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default ScheduleScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}