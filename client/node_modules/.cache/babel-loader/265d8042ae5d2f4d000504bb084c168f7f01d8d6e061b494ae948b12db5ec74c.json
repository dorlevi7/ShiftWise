{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ChatScreen.js\",\n  _s = $RefreshSig$();\n// React functions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getPrivateLastSeen, markPrivateSeen, getGroupMessages, sendGroupMessage, getPrivateMessages, sendPrivateMessage } from '../services/chatService';\nimport { getUsers } from '../services/userService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    recipientId\n  } = useParams();\n  const [userData, setUserData] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const messagesEndRef = useRef(null);\n  const [companyUsers, setCompanyUsers] = useState([]);\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n    }\n  }, [navigate]);\n  useEffect(() => {\n    var _userData$company;\n    if (userData !== null && userData !== void 0 && (_userData$company = userData.company) !== null && _userData$company !== void 0 && _userData$company.id) {\n      fetchMessages();\n    }\n  }, [userData, recipientId]);\n  useEffect(() => {\n    var _userData$company2;\n    if (userData !== null && userData !== void 0 && (_userData$company2 = userData.company) !== null && _userData$company2 !== void 0 && _userData$company2.id) {\n      fetchCompanyUsers();\n    }\n  }, [userData]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    if (messages.length > 0) {\n      scrollToBottom();\n    }\n  }, [messages]);\n  const fetchCompanyUsers = async () => {\n    try {\n      var _userData$company3, _userData$user;\n      const companyId = userData === null || userData === void 0 ? void 0 : (_userData$company3 = userData.company) === null || _userData$company3 === void 0 ? void 0 : _userData$company3.id;\n      const currentUserId = userData === null || userData === void 0 ? void 0 : (_userData$user = userData.user) === null || _userData$user === void 0 ? void 0 : _userData$user.id;\n      if (companyId) {\n        const allUsers = await getUsers();\n        const filtered = Object.entries(allUsers).map(([id, user]) => ({\n          id,\n          ...user\n        })).filter(user => {\n          var _user$companyIds;\n          return ((_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(comp => comp.companyId === companyId)) && user.id !== currentUserId;\n        });\n        setCompanyUsers(filtered);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const companyId = userData.company.id;\n      const userId = userData.user.id;\n      let data;\n      if (recipientId) {\n        data = await getPrivateMessages(companyId, userId, recipientId);\n\n        // ✅ סימון הודעות כנקראו:\n        await markPrivateSeen(companyId, userId, recipientId, userId);\n      } else {\n        data = await getGroupMessages(companyId);\n      }\n      const messagesArray = data ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp) : [];\n      setMessages(messagesArray);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      toast.error('Failed to load messages.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    const messageData = {\n      senderId: userData.user.id,\n      senderName: userData.user.name || 'Unknown',\n      content: newMessage.trim(),\n      timestamp: Date.now()\n    };\n    try {\n      const companyId = userData.company.id;\n      const userId = userData.user.id;\n      if (recipientId) {\n        await sendPrivateMessage(companyId, userId, recipientId, messageData);\n      } else {\n        await sendGroupMessage(companyId, messageData);\n      }\n      setMessages(prev => [...prev, messageData]);\n      setNewMessage('');\n    } catch (error) {\n      toast.error('Failed to send message.');\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n  const isSameDate = (timestamp1, timestamp2) => {\n    const date1 = new Date(timestamp1);\n    const date2 = new Date(timestamp2);\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  };\n  const getUserNameById = id => {\n    const user = companyUsers.find(u => u.id === id);\n    return user ? user.name : 'User';\n  };\n  if (!userData) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCAC Chats\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: `chat-link ${!recipientId ? 'active-chat' : ''}`,\n            onClick: () => navigate('/chat'),\n            children: \"\\uD83D\\uDFE2 Group Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), companyUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `chat-link ${recipientId === user.id ? 'active-chat' : ''}`,\n            onClick: () => navigate(`/private-chat/${user.id}`),\n            children: user.name\n          }, user.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: recipientId ? `Chat with ${getUserNameById(recipientId)}` : 'Group Chat'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-messages\",\n            children: [messages.map((msg, index) => {\n              const currentDate = new Date(msg.timestamp);\n              const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n              const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [showDate && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"date-header-wrapper\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"date-header\",\n                    children: currentDate.toLocaleDateString('he-IL', {\n                      weekday: 'short',\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric'\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-right' : 'align-left'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-sender\",\n                      children: msg.senderName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 224,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-content\",\n                      children: msg.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 225,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"chat-time\",\n                      children: new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 226,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 45\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 41\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: messagesEndRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type a message...\",\n              value: newMessage,\n              onChange: e => setNewMessage(e.target.value),\n              onKeyDown: handleKeyPress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleSendMessage,\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatScreen, \"89G25XRd9WyZ1VAIBAE1PG9JE6M=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ChatScreen;\nexport default ChatScreen;\nvar _c;\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","toast","ToastContainer","getPrivateLastSeen","markPrivateSeen","getGroupMessages","sendGroupMessage","getPrivateMessages","sendPrivateMessage","getUsers","Navbar","Loader","BackgroundWrapper","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatScreen","_s","navigate","recipientId","userData","setUserData","messages","setMessages","newMessage","setNewMessage","isLoading","setIsLoading","messagesEndRef","companyUsers","setCompanyUsers","loggedUser","JSON","parse","localStorage","getItem","_userData$company","company","id","fetchMessages","_userData$company2","fetchCompanyUsers","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","length","_userData$company3","_userData$user","companyId","currentUserId","user","allUsers","filtered","Object","entries","map","filter","_user$companyIds","companyIds","some","comp","error","console","userId","data","messagesArray","values","sort","a","b","timestamp","handleSendMessage","trim","messageData","senderId","senderName","name","content","Date","now","prev","handleKeyPress","e","key","isSameDate","timestamp1","timestamp2","date1","date2","getFullYear","getMonth","getDate","getUserNameById","find","u","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onClick","msg","index","currentDate","prevDate","showDate","toLocaleDateString","weekday","day","month","year","toLocaleTimeString","hour","minute","ref","type","placeholder","value","onChange","target","onKeyDown","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ChatScreen.js"],"sourcesContent":["// React functions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\n\n// Styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/ChatScreen.css';\nimport '../styles/Navbar.css';\n\n// Services\nimport { getPrivateLastSeen, markPrivateSeen, getGroupMessages, sendGroupMessage, getPrivateMessages, sendPrivateMessage } from '../services/chatService';\nimport { getUsers } from '../services/userService';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Loader';\nimport BackgroundWrapper from './BackgroundWrapper';\n\nconst ChatScreen = () => {\n    const navigate = useNavigate();\n    const { recipientId } = useParams();\n\n    const [userData, setUserData] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n\n    const messagesEndRef = useRef(null);\n    const [companyUsers, setCompanyUsers] = useState([]);\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        if (userData?.company?.id) {\n            fetchMessages();\n        }\n    }, [userData, recipientId]);\n\n    useEffect(() => {\n        if (userData?.company?.id) {\n            fetchCompanyUsers();\n        }\n    }, [userData]);\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    useEffect(() => {\n        if (messages.length > 0) {\n            scrollToBottom();\n        }\n    }, [messages]);\n\n    const fetchCompanyUsers = async () => {\n        try {\n            const companyId = userData?.company?.id;\n            const currentUserId = userData?.user?.id;\n\n            if (companyId) {\n                const allUsers = await getUsers();\n                const filtered = Object.entries(allUsers)\n                    .map(([id, user]) => ({ id, ...user }))\n                    .filter((user) =>\n                        user.companyIds?.some((comp) => comp.companyId === companyId) &&\n                        user.id !== currentUserId\n                    );\n                setCompanyUsers(filtered);\n            }\n        } catch (error) {\n            console.error('Error fetching users:', error);\n        }\n    };\n\n    const fetchMessages = async () => {\n        try {\n            const companyId = userData.company.id;\n            const userId = userData.user.id;\n\n            let data;\n            if (recipientId) {\n                data = await getPrivateMessages(companyId, userId, recipientId);\n\n                // ✅ סימון הודעות כנקראו:\n                await markPrivateSeen(companyId, userId, recipientId, userId);\n            } else {\n                data = await getGroupMessages(companyId);\n            }\n\n            const messagesArray = data\n                ? Object.values(data).sort((a, b) => a.timestamp - b.timestamp)\n                : [];\n\n            setMessages(messagesArray);\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n            toast.error('Failed to load messages.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleSendMessage = async () => {\n        if (!newMessage.trim()) return;\n\n        const messageData = {\n            senderId: userData.user.id,\n            senderName: userData.user.name || 'Unknown',\n            content: newMessage.trim(),\n            timestamp: Date.now(),\n        };\n\n        try {\n            const companyId = userData.company.id;\n            const userId = userData.user.id;\n\n            if (recipientId) {\n                await sendPrivateMessage(companyId, userId, recipientId, messageData);\n            } else {\n                await sendGroupMessage(companyId, messageData);\n            }\n\n            setMessages((prev) => [...prev, messageData]);\n            setNewMessage('');\n        } catch (error) {\n            toast.error('Failed to send message.');\n        }\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleSendMessage();\n        }\n    };\n\n    const isSameDate = (timestamp1, timestamp2) => {\n        const date1 = new Date(timestamp1);\n        const date2 = new Date(timestamp2);\n        return (\n            date1.getFullYear() === date2.getFullYear() &&\n            date1.getMonth() === date2.getMonth() &&\n            date1.getDate() === date2.getDate()\n        );\n    };\n\n    const getUserNameById = (id) => {\n        const user = companyUsers.find((u) => u.id === id);\n        return user ? user.name : 'User';\n    };\n\n    if (!userData) return <Loader />;\n\n    return (\n        <BackgroundWrapper>\n            <Navbar />\n\n            <div className=\"navbar-placeholder\"></div>\n\n            <div className=\"chat-layout\">\n                {/* Sidebar with user list */}\n                <div className=\"chat-sidebar\">\n                    <h3>💬 Chats</h3>\n                    <ul>\n                        <li\n                            className={`chat-link ${!recipientId ? 'active-chat' : ''}`}\n                            onClick={() => navigate('/chat')}\n                        >\n                            🟢 Group Chat\n                        </li>\n\n                        {companyUsers.map((user) => (\n                            <li\n                                key={user.id}\n                                className={`chat-link ${recipientId === user.id ? 'active-chat' : ''}`}\n                                onClick={() => navigate(`/private-chat/${user.id}`)}\n                            >\n                                {user.name}\n                            </li>\n                        ))}\n                    </ul>\n\n                </div>\n\n                {/* Main chat area */}\n                <div className=\"chat-main\">\n                    <h1>{recipientId ? `Chat with ${getUserNameById(recipientId)}` : 'Group Chat'}</h1>\n\n                    {isLoading ? (\n                        <Loader />\n                    ) : (\n                        <>\n                            <div className=\"chat-messages\">\n                                {messages.map((msg, index) => {\n                                    const currentDate = new Date(msg.timestamp);\n                                    const prevDate = index > 0 ? new Date(messages[index - 1].timestamp) : null;\n                                    const showDate = index === 0 || !isSameDate(currentDate, prevDate);\n\n                                    return (\n                                        <React.Fragment key={index}>\n                                            {showDate && (\n                                                <div className=\"date-header-wrapper\">\n                                                    <div className=\"date-header\">\n                                                        {currentDate.toLocaleDateString('he-IL', {\n                                                            weekday: 'short',\n                                                            day: '2-digit',\n                                                            month: '2-digit',\n                                                            year: 'numeric',\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            )}\n                                            <div className={`chat-message-wrapper ${msg.senderId === userData.user.id ? 'align-right' : 'align-left'}`}>\n                                                <div className={`chat-message ${msg.senderId === userData.user.id ? 'my-message' : 'other-message'}`}>\n                                                    <div className=\"chat-sender\">{msg.senderName}</div>\n                                                    <div className=\"chat-content\">{msg.content}</div>\n                                                    <div className=\"chat-time\">\n                                                        {new Date(msg.timestamp).toLocaleTimeString('he-IL', {\n                                                            hour: '2-digit',\n                                                            minute: '2-digit',\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </React.Fragment>\n                                    );\n                                })}\n                                <div ref={messagesEndRef} />\n                            </div>\n\n                            <div className=\"chat-input\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Type a message...\"\n                                    value={newMessage}\n                                    onChange={(e) => setNewMessage(e.target.value)}\n                                    onKeyDown={handleKeyPress}\n                                />\n                                <button onClick={handleSendMessage}>Send</button>\n                            </div>\n                        </>\n                    )}\n                </div>\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default ChatScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}