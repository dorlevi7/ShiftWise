{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/availability';\n\n// קבלת זמינות של משתמש מסוים לשבוע הנוכחי\nexport const getAvailabilityByUserId = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching availability:', error);\n    throw error;\n  }\n};\n\n// שמירת זמינות עבור משתמש לשבוע הנוכחי\nexport const saveAvailability = async (userId, availabilityData) => {\n  try {\n    const response = await axios.post(`${API_URL}/${userId}`, availabilityData);\n    return response.data;\n  } catch (error) {\n    console.error('Error saving availability:', error);\n    throw error;\n  }\n};\n\n// עדכון זמינות של משתמש\nexport const updateAvailability = async (userId, availabilityData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${userId}`, availabilityData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating availability:', error);\n    throw error;\n  }\n};\n\n// מחיקת זמינות של משתמש מסוים\nexport const deleteAvailability = async userId => {\n  try {\n    const response = await axios.delete(`${API_URL}/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting availability:', error);\n    throw error;\n  }\n};\n\n// חישוב תאריכי השבוע הנוכחי\nexport const calculateWeekDates = () => {\n  const now = new Date();\n  const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay())); // יום ראשון\n  return Array.from({\n    length: 7\n  }).map((_, index) => {\n    const date = new Date(startOfWeek);\n    date.setDate(startOfWeek.getDate() + index);\n    return date.toISOString().split('T')[0]; // פורמט YYYY-MM-DD\n  });\n};","map":{"version":3,"names":["axios","API_URL","getAvailabilityByUserId","userId","response","get","data","error","console","saveAvailability","availabilityData","post","updateAvailability","put","deleteAvailability","delete","calculateWeekDates","now","Date","startOfWeek","setDate","getDate","getDay","Array","from","length","map","_","index","date","toISOString","split"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/services/availabilityService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/availability';\n\n// קבלת זמינות של משתמש מסוים לשבוע הנוכחי\nexport const getAvailabilityByUserId = async (userId) => {\n    try {\n        const response = await axios.get(`${API_URL}/${userId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching availability:', error);\n        throw error;\n    }\n};\n\n// שמירת זמינות עבור משתמש לשבוע הנוכחי\nexport const saveAvailability = async (userId, availabilityData) => {\n    try {\n        const response = await axios.post(`${API_URL}/${userId}`, availabilityData);\n        return response.data;\n    } catch (error) {\n        console.error('Error saving availability:', error);\n        throw error;\n    }\n};\n\n// עדכון זמינות של משתמש\nexport const updateAvailability = async (userId, availabilityData) => {\n    try {\n        const response = await axios.put(`${API_URL}/${userId}`, availabilityData);\n        return response.data;\n    } catch (error) {\n        console.error('Error updating availability:', error);\n        throw error;\n    }\n};\n\n// מחיקת זמינות של משתמש מסוים\nexport const deleteAvailability = async (userId) => {\n    try {\n        const response = await axios.delete(`${API_URL}/${userId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error deleting availability:', error);\n        throw error;\n    }\n};\n\n// חישוב תאריכי השבוע הנוכחי\nexport const calculateWeekDates = () => {\n    const now = new Date();\n    const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay())); // יום ראשון\n    return Array.from({ length: 7 }).map((_, index) => {\n        const date = new Date(startOfWeek);\n        date.setDate(startOfWeek.getDate() + index);\n        return date.toISOString().split('T')[0]; // פורמט YYYY-MM-DD\n    });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,wCAAwC;;AAExD;AACA,OAAO,MAAMC,uBAAuB,GAAG,MAAOC,MAAM,IAAK;EACrD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,OAAO,IAAIE,MAAM,EAAE,CAAC;IACxD,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAON,MAAM,EAAEO,gBAAgB,KAAK;EAChE,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACW,IAAI,CAAC,GAAGV,OAAO,IAAIE,MAAM,EAAE,EAAEO,gBAAgB,CAAC;IAC3E,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,kBAAkB,GAAG,MAAAA,CAAOT,MAAM,EAAEO,gBAAgB,KAAK;EAClE,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,IAAIE,MAAM,EAAE,EAAEO,gBAAgB,CAAC;IAC1E,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMO,kBAAkB,GAAG,MAAOX,MAAM,IAAK;EAChD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACe,MAAM,CAAC,GAAGd,OAAO,IAAIE,MAAM,EAAE,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,kBAAkB,GAAGA,CAAA,KAAM;EACpC,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAMC,WAAW,GAAG,IAAID,IAAI,CAACD,GAAG,CAACG,OAAO,CAACH,GAAG,CAACI,OAAO,CAAC,CAAC,GAAGJ,GAAG,CAACK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzE,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;IAC/C,MAAMC,IAAI,GAAG,IAAIX,IAAI,CAACC,WAAW,CAAC;IAClCU,IAAI,CAACT,OAAO,CAACD,WAAW,CAACE,OAAO,CAAC,CAAC,GAAGO,KAAK,CAAC;IAC3C,OAAOC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}