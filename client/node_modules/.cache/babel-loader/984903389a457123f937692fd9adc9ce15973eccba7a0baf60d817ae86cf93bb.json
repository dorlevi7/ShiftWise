{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, calculatePreviousDay, calculateNextDay, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  var _users$highlightedUse;\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n  const [highlightedUser, setHighlightedUser] = useState(null);\n  const [selectedUserNotes, setSelectedUserNotes] = useState('');\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת זמינות ומשתמשים\n        const [availabilityData, usersData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers()]);\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n\n        // חישוב תאריכים לשבוע הנוכחי\n        const startOfWeek = new Date();\n        startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n        const dates = Array.from({\n          length: 7\n        }, (_, i) => {\n          const date = new Date(startOfWeek);\n          date.setDate(startOfWeek.getDate() + i);\n          return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n        });\n        setWeekDates(dates);\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = (status, userId) => {\n    if (highlightedUser === userId) return 'highlighted-user'; // הדגשת משתמש\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleEmployeeClick = async userId => {\n    if (highlightedUser === userId) {\n      setHighlightedUser(null);\n      setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n      return;\n    }\n    setHighlightedUser(userId);\n    if (currentCompany && userId) {\n      try {\n        var _availabilityData$use;\n        const weekKey = calculateWeekKey(weekOffset);\n        const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n        const userNotes = (availabilityData === null || availabilityData === void 0 ? void 0 : (_availabilityData$use = availabilityData[userId]) === null || _availabilityData$use === void 0 ? void 0 : _availabilityData$use.notes) || 'No notes available.';\n        setSelectedUserNotes(userNotes);\n      } catch (err) {\n        console.error('Failed to fetch notes:', err);\n        setSelectedUserNotes('Error fetching notes.');\n      }\n    }\n  };\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n      const updatedAvailability = {\n        ...availability\n      };\n\n      // Update the current shift's status to 'selected' or 'default'\n      updatedAvailability[userId][shift][day].status = newStatus;\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      if (newStatus === 'selected') {\n        // Disable other shifts on the same day\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n\n        // Handle unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        } else if (shift === 'Night') {\n          await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      } else {\n        // Undo selection and revert unique rules\n        await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n        // Revert unique rules for specific shifts\n        if (shift === 'Morning' || shift === 'Noon') {\n          await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n        } else if (shift === 'Night') {\n          await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n        }\n      }\n\n      // Update state with the modified availability\n      setAvailability(updatedAvailability);\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  const employeesWithAvailability = Object.entries(users).filter(([userId]) => availability[userId] && Object.values(availability[userId]).some(shifts => Object.values(shifts).some(shift => shift.status === 'selected' || shift.status === 'default')));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(-1),\n          children: \"Previous Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"week-range\",\n          children: calculateWeekRange(weekOffset)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(1),\n          children: \"Next Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading schedule...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"schedule-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"schedule-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Shift\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [day, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 55\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"date\",\n                  children: weekDates[index]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 49\n                }, this)]\n              }, day, true, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 45\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: shift\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 49\n              }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => {\n                const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                  var _userData$shift;\n                  const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n                  return (availabilityInfo === null || availabilityInfo === void 0 ? void 0 : availabilityInfo.status) === 'selected';\n                }).length;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    min: \"0\",\n                    className: \"necessary-employees-input\",\n                    placeholder: \"0\",\n                    onChange: e => console.log(`Shift: ${shift}, Day: ${day}, Value: ${e.target.value}`)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 61\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"selected-employees-indicator\",\n                    children: [selectedEmployeesCount, \" Selected\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 61\n                  }, this), Object.entries(availability).map(([userId, userData]) => {\n                    var _userData$shift2;\n                    const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift2 = userData[shift]) === null || _userData$shift2 === void 0 ? void 0 : _userData$shift2[day];\n                    if (availabilityInfo !== null && availabilityInfo !== void 0 && availabilityInfo.isAvailable) {\n                      var _users$userId;\n                      const statusClass = getStatusClass(availabilityInfo.status, userId);\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: `availability-entry ${statusClass}`,\n                        onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                        style: {\n                          backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ecf0f1',\n                          color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                          pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                          cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                        },\n                        children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                      }, userId, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 224,\n                        columnNumber: 73\n                      }, this);\n                    }\n                    return null;\n                  })]\n                }, day, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 57\n                }, this);\n              })]\n            }, shift, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"employees-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Employees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: employeesWithAvailability.map(([userId, user]) => /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => handleEmployeeClick(userId),\n              style: {\n                backgroundColor: highlightedUser === userId ? '#ffeb3b' : 'transparent',\n                cursor: 'pointer'\n              },\n              children: user.name\n            }, userId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 37\n          }, this), highlightedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee-notes\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Notes for \", ((_users$highlightedUse = users[highlightedUser]) === null || _users$highlightedUse === void 0 ? void 0 : _users$highlightedUse.name) || 'Employee', \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: selectedUserNotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"OyEMhtbBo8e82vZeHBme7+JBPzI=\");\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","getAllAvailabilities","getUsers","calculateWeekKey","calculateWeekRange","selectMorningOrNoonShift","selectNightShift","deselectMorningOrNoonShift","deselectNightShift","calculatePreviousDay","calculateNextDay","handleOtherShiftsOfDayWhenDeselectAShift","updateAvailabilityStatus","Navbar","jsxDEV","_jsxDEV","ScheduleScreen","_s","_users$highlightedUse","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","weekDates","setWeekDates","highlightedUser","setHighlightedUser","selectedUserNotes","setSelectedUserNotes","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","JSON","parse","localStorage","getItem","companyId","company","id","weekKey","availabilityData","usersData","Promise","all","startOfWeek","Date","setDate","getDate","getDay","dates","Array","from","length","_","i","date","toLocaleDateString","err","console","handleWeekChange","direction","prevOffset","getStatusClass","status","userId","handleEmployeeClick","_availabilityData$use","userNotes","notes","handleStatusUpdate","shift","day","currentStatus","newStatus","updatedAvailability","otherShift","employeesWithAvailability","Object","entries","filter","values","some","shifts","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","index","selectedEmployeesCount","userData","_userData$shift","availabilityInfo","type","min","placeholder","onChange","e","log","target","value","_userData$shift2","isAvailable","_users$userId","statusClass","style","backgroundColor","color","pointerEvents","cursor","name","user","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange, selectMorningOrNoonShift, selectNightShift, deselectMorningOrNoonShift, deselectNightShift, calculatePreviousDay, calculateNextDay, handleOtherShiftsOfDayWhenDeselectAShift } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n    const [currentCompany, setCurrentCompany] = useState(null);\n    const [weekDates, setWeekDates] = useState([]); // תאריכים לכל הימים בשבוע\n    const [highlightedUser, setHighlightedUser] = useState(null);\n    const [selectedUserNotes, setSelectedUserNotes] = useState('');\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת זמינות ומשתמשים\n                const [availabilityData, usersData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers()\n                ]);\n\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n\n                // חישוב תאריכים לשבוע הנוכחי\n                const startOfWeek = new Date();\n                startOfWeek.setDate(startOfWeek.getDate() + weekOffset * 7 - startOfWeek.getDay());\n                const dates = Array.from({ length: 7 }, (_, i) => {\n                    const date = new Date(startOfWeek);\n                    date.setDate(startOfWeek.getDate() + i);\n                    return date.toLocaleDateString('en-GB'); // פורמט DD/MM/YYYY\n                });\n                setWeekDates(dates);\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status, userId) => {\n        if (highlightedUser === userId) return 'highlighted-user'; // הדגשת משתמש\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n\n    const handleEmployeeClick = async (userId) => {\n        if (highlightedUser === userId) {\n            setHighlightedUser(null);\n            setSelectedUserNotes(''); // איפוס הערות כאשר לוחצים שוב\n            return;\n        }\n\n        setHighlightedUser(userId);\n\n        if (currentCompany && userId) {\n            try {\n                const weekKey = calculateWeekKey(weekOffset);\n                const availabilityData = await getAllAvailabilities(currentCompany, weekKey);\n\n                const userNotes = availabilityData?.[userId]?.notes || 'No notes available.';\n                setSelectedUserNotes(userNotes);\n            } catch (err) {\n                console.error('Failed to fetch notes:', err);\n                setSelectedUserNotes('Error fetching notes.');\n            }\n        }\n    };\n\n\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        if (currentStatus === 'disabled') return; // Disable click for disabled status\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            const updatedAvailability = { ...availability };\n\n            // Update the current shift's status to 'selected' or 'default'\n            updatedAvailability[userId][shift][day].status = newStatus;\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            if (newStatus === 'selected') {\n                // Disable other shifts on the same day\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                // Handle unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await selectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                } else if (shift === 'Night') {\n                    await selectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            } else {\n                // Undo selection and revert unique rules\n                await handleOtherShiftsOfDayWhenDeselectAShift(userId, day, shift, updatedAvailability, weekKey, currentCompany);\n\n                // Revert unique rules for specific shifts\n                if (shift === 'Morning' || shift === 'Noon') {\n                    await deselectMorningOrNoonShift(userId, day, updatedAvailability, weekKey, currentCompany);\n                } else if (shift === 'Night') {\n                    await deselectNightShift(userId, day, updatedAvailability, weekKey, weekOffset, currentCompany);\n                }\n            }\n\n            // Update state with the modified availability\n            setAvailability(updatedAvailability);\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    const employeesWithAvailability = Object.entries(users).filter(([userId]) =>\n        availability[userId] && Object.values(availability[userId]).some((shifts) =>\n            Object.values(shifts).some((shift) => shift.status === 'selected' || shift.status === 'default')\n        )\n    );\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div> {/* רווח לניווט */}\n\n            <div className=\"schedule-container\">\n                <h2>Weekly Schedule</h2>\n                <div className=\"week-navigation\">\n                    <button onClick={() => handleWeekChange(-1)}>Previous Week</button>\n                    <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                    <button onClick={() => handleWeekChange(1)}>Next Week</button>\n                </div>\n\n                {isLoading ? (\n                    <p>Loading schedule...</p>\n                ) : error ? (\n                    <p className=\"error\">{error}</p>\n                ) : (\n                    <div className=\"schedule-content\">\n                        <table className=\"schedule-table\">\n                            <thead>\n                                <tr>\n                                    <th>Shift</th>\n                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                        (day, index) => (\n                                            <th key={day}>\n                                                {day} <br />\n                                                <span className=\"date\">{weekDates[index]}</span>\n                                            </th>\n                                        )\n                                    )}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                        {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                            <tr key={shift}>\n                                                <td>{shift}</td>\n                                                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day) => {\n                                                    const selectedEmployeesCount = Object.entries(availability).filter(([userId, userData]) => {\n                                                        const availabilityInfo = userData?.[shift]?.[day];\n                                                        return availabilityInfo?.status === 'selected';\n                                                    }).length;\n\n                                                    return (\n                                                        <td key={day}>\n                                                            {/* Input field for necessary employees */}\n                                                            <input\n                                                                type=\"number\"\n                                                                min=\"0\"\n                                                                className=\"necessary-employees-input\"\n                                                                placeholder=\"0\"\n                                                                onChange={(e) =>\n                                                                    console.log(`Shift: ${shift}, Day: ${day}, Value: ${e.target.value}`)\n                                                                }\n                                                            />\n                                                            {/* Indicator for selected employees */}\n                                                            <div className=\"selected-employees-indicator\">\n                                                                {selectedEmployeesCount} Selected\n                                                            </div>\n                                                            {Object.entries(availability).map(([userId, userData]) => {\n                                                                const availabilityInfo = userData?.[shift]?.[day];\n                                                                if (availabilityInfo?.isAvailable) {\n                                                                    const statusClass = getStatusClass(availabilityInfo.status, userId);\n                                                                    return (\n                                                                        <div\n                                                                            key={userId}\n                                                                            className={`availability-entry ${statusClass}`}\n                                                                            onClick={() =>\n                                                                                handleStatusUpdate(\n                                                                                    userId,\n                                                                                    shift,\n                                                                                    day,\n                                                                                    availabilityInfo.status\n                                                                                )\n                                                                            }\n                                                                            style={{\n                                                                                backgroundColor:\n                                                                                    availabilityInfo.status === 'selected'\n                                                                                        ? '#2ecc71'\n                                                                                        : availabilityInfo.status === 'disabled'\n                                                                                            ? '#e74c3c'\n                                                                                            : '#ecf0f1',\n                                                                                color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                                pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                                cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                            }}\n                                                                        >\n                                                                            {users[userId]?.name || 'Unknown'}\n                                                                        </div>\n                                                                    );\n                                                                }\n                                                                return null;\n                                                            })}\n                                                        </td>\n                                                    );\n                                                })}\n                                            </tr>\n                                        ))}\n\n\n                            </tbody>\n                        </table>\n\n                        {/* רשימת העובדים */}\n                                <div className=\"employees-list\">\n                                    <h3>Employees</h3>\n                                    <ul>\n                                        {employeesWithAvailability.map(([userId, user]) => (\n                                            <li\n                                                key={userId}\n                                                onClick={() => handleEmployeeClick(userId)}\n                                                style={{\n                                                    backgroundColor: highlightedUser === userId ? '#ffeb3b' : 'transparent',\n                                                    cursor: 'pointer',\n                                                }}\n                                            >\n                                                {user.name}\n                                            </li>\n                                        ))}\n                                    </ul>\n                                    {/* הצגת ההערות של העובד */}\n                                    {highlightedUser && (\n                                        <div className=\"employee-notes\">\n                                            <h4>Notes for {users[highlightedUser]?.name || 'Employee'}:</h4>\n                                            <p>{selectedUserNotes}</p>\n                                        </div>\n                                    )}\n                                </div>\n\n\n\n\n                    </div>\n                )}\n            </div>\n\n        </div>\n    );\n}\n\nexport default ScheduleScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}