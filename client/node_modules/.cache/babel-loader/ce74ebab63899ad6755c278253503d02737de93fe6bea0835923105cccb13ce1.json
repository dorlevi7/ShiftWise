{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScheduleScreen() {\n  _s();\n  const [availability, setAvailability] = useState({});\n  const [users, setUsers] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n  const [currentCompany, setCurrentCompany] = useState(null);\n  useEffect(() => {\n    const fetchAvailabilityAndUsers = async () => {\n      try {\n        var _loggedUser$company;\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        const companyId = loggedUser === null || loggedUser === void 0 ? void 0 : (_loggedUser$company = loggedUser.company) === null || _loggedUser$company === void 0 ? void 0 : _loggedUser$company.id;\n        if (!companyId) {\n          setError('No company information found.');\n          return;\n        }\n        setCurrentCompany(companyId);\n        const weekKey = calculateWeekKey(weekOffset);\n\n        // שליפת זמינות ומשתמשים\n        const [availabilityData, usersData] = await Promise.all([getAllAvailabilities(companyId, weekKey), getUsers()]);\n        setAvailability(availabilityData || {});\n        setUsers(usersData || {});\n      } catch (err) {\n        setError('Failed to fetch data.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchAvailabilityAndUsers();\n  }, [weekOffset]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  const getStatusClass = status => {\n    switch (status) {\n      case 'selected':\n        return 'status-selected';\n      case 'disabled':\n        return 'status-disabled';\n      case 'default':\n      default:\n        return 'status-default';\n    }\n  };\n  const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n    if (currentStatus === 'disabled') return;\n    try {\n      const weekKey = calculateWeekKey(weekOffset);\n      const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n      // Update the selected shift status\n      await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n      const updatedAvailability = {\n        ...availability\n      };\n      if (newStatus === 'selected') {\n        // Disable other shifts of the same day\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift) {\n            updatedAvailability[userId][otherShift][day].status = 'disabled';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n          }\n        }\n\n        // Disable Night shift of the previous day\n        const previousDay = getPreviousDay(day);\n        if (shift === 'Morning' && previousDay) {\n          updatedAvailability[userId]['Night'][previousDay].status = 'disabled';\n          await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'disabled');\n        }\n      } else {\n        // Reset other shifts of the same day to 'default'\n        for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n          if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n            updatedAvailability[userId][otherShift][day].status = 'default';\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n          }\n        }\n\n        // Reset Night shift of the previous day to 'default'\n        const previousDay = getPreviousDay(day);\n        if (shift === 'Morning' && previousDay) {\n          updatedAvailability[userId]['Night'][previousDay].status = 'default';\n          await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'default');\n        }\n      }\n\n      // Update the availability state\n      setAvailability(updatedAvailability);\n    } catch (error) {\n      console.error('Failed to update status:', error);\n    }\n  };\n  const getPreviousDay = currentDay => {\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentIndex = days.indexOf(currentDay);\n    return currentIndex > 0 ? days[currentIndex - 1] : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-placeholder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(-1),\n          children: \"Previous Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"week-range\",\n          children: calculateWeekRange(weekOffset)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleWeekChange(1),\n          children: \"Next Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading schedule...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"schedule-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Shift\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 33\n            }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: day\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ['Morning', 'Noon', 'Evening', 'Night'].map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: shift\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 37\n            }, this), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: Object.entries(availability).map(([userId, userData]) => {\n                var _userData$shift;\n                const availabilityInfo = userData === null || userData === void 0 ? void 0 : (_userData$shift = userData[shift]) === null || _userData$shift === void 0 ? void 0 : _userData$shift[day];\n                if (availabilityInfo !== null && availabilityInfo !== void 0 && availabilityInfo.isAvailable) {\n                  var _users$userId;\n                  const statusClass = getStatusClass(availabilityInfo.status);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `availability-entry ${statusClass}`,\n                    onClick: () => handleStatusUpdate(userId, shift, day, availabilityInfo.status),\n                    style: {\n                      backgroundColor: availabilityInfo.status === 'selected' ? '#2ecc71' : availabilityInfo.status === 'disabled' ? '#e74c3c' : '#ecf0f1',\n                      color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                      pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                      cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer'\n                    },\n                    children: ((_users$userId = users[userId]) === null || _users$userId === void 0 ? void 0 : _users$userId.name) || 'Unknown'\n                  }, userId, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 61\n                  }, this);\n                }\n                return null;\n              })\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 45\n            }, this))]\n          }, shift, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n_s(ScheduleScreen, \"PwF98lVza8iGyhWE51Wp6odJWQA=\");\n_c = ScheduleScreen;\nexport default ScheduleScreen;\nvar _c;\n$RefreshReg$(_c, \"ScheduleScreen\");","map":{"version":3,"names":["React","useState","useEffect","getAllAvailabilities","getUsers","calculateWeekKey","calculateWeekRange","updateAvailabilityStatus","Navbar","jsxDEV","_jsxDEV","ScheduleScreen","_s","availability","setAvailability","users","setUsers","isLoading","setIsLoading","error","setError","weekOffset","setWeekOffset","currentCompany","setCurrentCompany","fetchAvailabilityAndUsers","_loggedUser$company","loggedUser","JSON","parse","localStorage","getItem","companyId","company","id","weekKey","availabilityData","usersData","Promise","all","err","console","handleWeekChange","direction","prevOffset","getStatusClass","status","handleStatusUpdate","userId","shift","day","currentStatus","newStatus","updatedAvailability","otherShift","previousDay","getPreviousDay","currentDay","days","currentIndex","indexOf","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","Object","entries","userData","_userData$shift","availabilityInfo","isAvailable","_users$userId","statusClass","style","backgroundColor","color","pointerEvents","cursor","name","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/ScheduleScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllAvailabilities } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { updateAvailabilityStatus } from '../services/availabilityService';\nimport Navbar from '../components/Navbar';\nimport '../styles/ScheduleScreen.css';\n\nfunction ScheduleScreen() {\n    const [availability, setAvailability] = useState({});\n    const [users, setUsers] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [weekOffset, setWeekOffset] = useState(0); // Offset לשבוע הנוכחי\n    const [currentCompany, setCurrentCompany] = useState(null);\n\n    useEffect(() => {\n        const fetchAvailabilityAndUsers = async () => {\n            try {\n                const loggedUser = JSON.parse(localStorage.getItem('user'));\n                const companyId = loggedUser?.company?.id;\n\n                if (!companyId) {\n                    setError('No company information found.');\n                    return;\n                }\n\n                setCurrentCompany(companyId);\n\n                const weekKey = calculateWeekKey(weekOffset);\n\n                // שליפת זמינות ומשתמשים\n                const [availabilityData, usersData] = await Promise.all([\n                    getAllAvailabilities(companyId, weekKey),\n                    getUsers()\n                ]);\n\n                setAvailability(availabilityData || {});\n                setUsers(usersData || {});\n            } catch (err) {\n                setError('Failed to fetch data.');\n                console.error(err);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchAvailabilityAndUsers();\n    }, [weekOffset]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    const getStatusClass = (status) => {\n        switch (status) {\n            case 'selected':\n                return 'status-selected';\n            case 'disabled':\n                return 'status-disabled';\n            case 'default':\n            default:\n                return 'status-default';\n        }\n    };\n\n    const handleStatusUpdate = async (userId, shift, day, currentStatus) => {\n        if (currentStatus === 'disabled') return;\n\n        try {\n            const weekKey = calculateWeekKey(weekOffset);\n            const newStatus = currentStatus === 'default' ? 'selected' : 'default';\n\n            // Update the selected shift status\n            await updateAvailabilityStatus(currentCompany, weekKey, userId, shift, day, newStatus);\n\n            const updatedAvailability = { ...availability };\n\n            if (newStatus === 'selected') {\n                // Disable other shifts of the same day\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift) {\n                        updatedAvailability[userId][otherShift][day].status = 'disabled';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'disabled');\n                    }\n                }\n\n                // Disable Night shift of the previous day\n                const previousDay = getPreviousDay(day);\n                if (shift === 'Morning' && previousDay) {\n                    updatedAvailability[userId]['Night'][previousDay].status = 'disabled';\n                    await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'disabled');\n                }\n            } else {\n                // Reset other shifts of the same day to 'default'\n                for (const otherShift of ['Morning', 'Noon', 'Evening', 'Night']) {\n                    if (otherShift !== shift && updatedAvailability[userId][otherShift][day].status === 'disabled') {\n                        updatedAvailability[userId][otherShift][day].status = 'default';\n                        await updateAvailabilityStatus(currentCompany, weekKey, userId, otherShift, day, 'default');\n                    }\n                }\n\n                // Reset Night shift of the previous day to 'default'\n                const previousDay = getPreviousDay(day);\n                if (shift === 'Morning' && previousDay) {\n                    updatedAvailability[userId]['Night'][previousDay].status = 'default';\n                    await updateAvailabilityStatus(currentCompany, weekKey, userId, 'Night', previousDay, 'default');\n                }\n            }\n\n            // Update the availability state\n            setAvailability(updatedAvailability);\n        } catch (error) {\n            console.error('Failed to update status:', error);\n        }\n    };\n\n    const getPreviousDay = (currentDay) => {\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentIndex = days.indexOf(currentDay);\n        return currentIndex > 0 ? days[currentIndex - 1] : null;\n    };\n\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"navbar-placeholder\"></div> {/* רווח לניווט */}\n\n            <div className=\"schedule-container\">\n                <h2>Weekly Schedule</h2>\n                <div className=\"week-navigation\">\n                    <button onClick={() => handleWeekChange(-1)}>Previous Week</button>\n                    <span className=\"week-range\">{calculateWeekRange(weekOffset)}</span>\n                    <button onClick={() => handleWeekChange(1)}>Next Week</button>\n                </div>\n\n                {isLoading ? (\n                    <p>Loading schedule...</p>\n                ) : error ? (\n                    <p className=\"error\">{error}</p>\n                ) : (\n                    <table className=\"schedule-table\">\n                        <thead>\n                            <tr>\n                                <th>Shift</th>\n                                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                    (day) => (\n                                        <th key={day}>{day}</th>\n                                    )\n                                )}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {['Morning', 'Noon', 'Evening', 'Night'].map((shift) => (\n                                <tr key={shift}>\n                                    <td>{shift}</td>\n                                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(\n                                        (day) => (\n                                            <td key={day}>\n                                                {Object.entries(availability).map(([userId, userData]) => {\n                                                    const availabilityInfo = userData?.[shift]?.[day];\n                                                    if (availabilityInfo?.isAvailable) {\n                                                        const statusClass = getStatusClass(availabilityInfo.status);\n                                                        return (\n                                                            <div\n                                                                key={userId}\n                                                                className={`availability-entry ${statusClass}`}\n                                                                onClick={() =>\n                                                                    handleStatusUpdate(\n                                                                        userId,\n                                                                        shift,\n                                                                        day,\n                                                                        availabilityInfo.status\n                                                                    )\n                                                                }\n                                                                style={{\n                                                                    backgroundColor:\n                                                                        availabilityInfo.status === 'selected'\n                                                                            ? '#2ecc71'\n                                                                            : availabilityInfo.status === 'disabled'\n                                                                                ? '#e74c3c'\n                                                                                : '#ecf0f1',\n                                                                    color: availabilityInfo.status === 'disabled' ? 'white' : '#2c3e50',\n                                                                    pointerEvents: availabilityInfo.status === 'disabled' ? 'none' : 'auto',\n                                                                    cursor: availabilityInfo.status === 'disabled' ? 'not-allowed' : 'pointer',\n                                                                }}\n                                                            >\n                                                                {users[userId]?.name || 'Unknown'}\n                                                            </div>\n                                                        );\n                                                    }\n                                                    return null;\n                                                })}\n                                            </td>\n                                        )\n                                    )}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default ScheduleScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}