{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js\",\n  _s = $RefreshSig$();\n// React core hooks\nimport React, { useState, useEffect } from 'react';\n\n// Navigation hook from React Router\nimport { useNavigate } from 'react-router-dom';\n\n// Toast notification and modal libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport Modal from 'react-modal';\n\n// Import external styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\n\n// Services for handling availability, users, and notifications\nimport { saveAvailability, getAvailability, saveNecessaryEmployees, getNecessaryEmployees, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { sendNotification } from '../services/notificationService';\nimport { saveVacationRequest } from '../services/availabilityService';\n\n// Utility functions\nimport { formatDate } from '../utils/utils';\nimport { getWeekDateObjects, calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\n// UUID generator\nimport { v4 as uuidv4 } from 'uuid';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport VacationRequestModal from '../components/Modals/VacationRequestModal';\n\n// Set root element for modal accessibility\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst AvailabilityScreen = () => {\n  _s();\n  const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [availability, setAvailability] = useState(null);\n  const [notes, setNotes] = useState('');\n  const [currentWeek, setCurrentWeek] = useState(1);\n  const [userData, setUserData] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const [isEditAllowed, setIsEditAllowed] = useState(true);\n  const [vacationModalOpen, setVacationModalOpen] = useState(false);\n  const [vacationStartDate, setVacationStartDate] = useState(null);\n  const [vacationEndDate, setVacationEndDate] = useState(null);\n  const navigate = useNavigate();\n  const [weekDays, setWeekDays] = useState([]);\n  const [textDirection, setTextDirection] = useState('rtl');\n\n  // Scroll to top of the page on component mount\n  useEffect(() => {\n    window.scrollTo({\n      top: 0\n    });\n  }, []);\n\n  // Fetch edit permission status for the current week based on the logged-in user's company\n  useEffect(() => {\n    const fetchEditStatusForWeek = async () => {\n      // If user data is not available, do nothing\n      if (!userData) return;\n      const companyId = userData.company.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      try {\n        var _status$isEditAllowed;\n        // Retrieve edit status for the selected week\n        const status = await fetchEditStatus(companyId, weekKey);\n        // Set edit permission based on fetched status (default to false if not available)\n        setIsEditAllowed((_status$isEditAllowed = status === null || status === void 0 ? void 0 : status.isEditAllowed) !== null && _status$isEditAllowed !== void 0 ? _status$isEditAllowed : false);\n      } catch (error) {\n        // Log error and prevent editing\n        console.error('Failed to fetch edit status:', error);\n        setIsEditAllowed(false);\n      }\n    };\n    fetchEditStatusForWeek();\n  }, [userData, currentWeek]);\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      if (loggedUser.user.role === 'admin') {\n        const fetchEmployees = async () => {\n          try {\n            const usersData = await getUsers();\n            const companyId = loggedUser.company.id;\n            if (companyId) {\n              const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n                id,\n                ...user\n              })).filter(user => {\n                var _user$companyIds;\n                return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(company => company.companyId === companyId);\n              });\n              setEmployees(filteredEmployees);\n            }\n          } catch (error) {\n            console.error('Error fetching employees:', error);\n          }\n        };\n        fetchEmployees();\n      } else {\n        setUserData(loggedUser);\n        if (loggedUser.user.role === 'admin') {} else {\n          setSelectedEmployeeId(loggedUser.user.id);\n          const fetchCurrentUserData = async () => {\n            try {\n              const usersData = await getUsers();\n              const userFromDB = usersData[loggedUser.user.id];\n              if (userFromDB) {\n                setEmployees([{\n                  id: loggedUser.user.id,\n                  ...userFromDB\n                }]);\n              }\n            } catch (error) {\n              console.error(\"Error fetching current user data:\", error);\n            }\n          };\n          fetchCurrentUserData();\n        }\n      }\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const fetchAvailability = async () => {\n      if (!selectedEmployeeId || !userData) return;\n      const companyId = userData.company.id;\n      const weekKey = calculateWeekKey(currentWeek);\n      try {\n        const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n        setAvailability(initializeAvailability(fetchedAvailability || {}));\n        setNotes((fetchedAvailability === null || fetchedAvailability === void 0 ? void 0 : fetchedAvailability.notes) || '');\n      } catch (error) {\n        console.error('Error fetching availability:', error);\n        alert('Failed to fetch availability. Please try again.');\n      }\n    };\n    fetchAvailability();\n  }, [currentWeek, selectedEmployeeId, userData]);\n  useEffect(() => {\n    const newWeek = weekOffset + 1;\n    setCurrentWeek(newWeek);\n    setWeekDays(getWeekDateObjects(newWeek));\n  }, [weekOffset]);\n  const initializeAvailability = existingAvailability => {\n    return shifts.reduce((acc, shift) => {\n      acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n        var _existingAvailability, _existingAvailability2, _existingAvailability3, _existingAvailability4;\n        dayAcc[day] = {\n          isAvailable: ((_existingAvailability = existingAvailability[shift]) === null || _existingAvailability === void 0 ? void 0 : (_existingAvailability2 = _existingAvailability[day]) === null || _existingAvailability2 === void 0 ? void 0 : _existingAvailability2.isAvailable) || false,\n          status: ((_existingAvailability3 = existingAvailability[shift]) === null || _existingAvailability3 === void 0 ? void 0 : (_existingAvailability4 = _existingAvailability3[day]) === null || _existingAvailability4 === void 0 ? void 0 : _existingAvailability4.status) || 'default'\n        };\n        return dayAcc;\n      }, {});\n      return acc;\n    }, {});\n  };\n  const handleAvailabilityChange = (shift, day) => {\n    setAvailability(prev => ({\n      ...prev,\n      [shift]: {\n        ...prev[shift],\n        [day]: {\n          ...prev[shift][day],\n          isAvailable: !prev[shift][day].isAvailable\n        }\n      }\n    }));\n  };\n  const handleDayColumnClick = day => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = shifts.every(shift => {\n        var _updatedAvailability$, _updatedAvailability$2;\n        return (_updatedAvailability$ = updatedAvailability[shift]) === null || _updatedAvailability$ === void 0 ? void 0 : (_updatedAvailability$2 = _updatedAvailability$[day]) === null || _updatedAvailability$2 === void 0 ? void 0 : _updatedAvailability$2.isAvailable;\n      });\n      shifts.forEach(shift => {\n        updatedAvailability[shift][day].isAvailable = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleShiftRowClick = shift => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = daysOfWeek.every(day => {\n        var _updatedAvailability$3, _updatedAvailability$4;\n        return (_updatedAvailability$3 = updatedAvailability[shift]) === null || _updatedAvailability$3 === void 0 ? void 0 : (_updatedAvailability$4 = _updatedAvailability$3[day]) === null || _updatedAvailability$4 === void 0 ? void 0 : _updatedAvailability$4.isAvailable;\n      });\n      daysOfWeek.forEach(day => {\n        updatedAvailability[shift][day].isAvailable = !allSelected;\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleSelectAll = () => {\n    setAvailability(prev => {\n      const updatedAvailability = JSON.parse(JSON.stringify(prev));\n      const allSelected = shifts.every(shift => daysOfWeek.every(day => updatedAvailability[shift][day].isAvailable));\n      shifts.forEach(shift => {\n        daysOfWeek.forEach(day => {\n          updatedAvailability[shift][day].isAvailable = !allSelected;\n        });\n      });\n      return updatedAvailability;\n    });\n  };\n  const handleSubmit = async () => {\n    if (!selectedEmployeeId) {\n      toast.error('Please select an employee to save availability.');\n      return;\n    }\n    const companyId = userData.company.id;\n    const weekKey = calculateWeekKey(currentWeek);\n    try {\n      const editStatus = await fetchEditStatus(companyId, weekKey);\n      if (!(editStatus !== null && editStatus !== void 0 && editStatus.isEditAllowed)) {\n        toast.error('Editing availability is currently locked for this week.');\n        return;\n      }\n      const dataToSave = {\n        ...availability,\n        notes\n      };\n      await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n      let necessaryEmployees = await getNecessaryEmployees(companyId, weekKey);\n      if (!necessaryEmployees || Object.keys(necessaryEmployees).length === 0) {\n        necessaryEmployees = daysOfWeek.reduce((acc, day) => {\n          acc[day] = {\n            Morning: 0,\n            Noon: 0,\n            Evening: 0,\n            Night: 0\n          };\n          return acc;\n        }, {});\n        await saveNecessaryEmployees(companyId, weekKey, necessaryEmployees);\n      }\n      toast.success('Availability and notes saved successfully!');\n    } catch (error) {\n      console.error('Error saving availability or necessary employees:', error);\n      toast.error('Failed to save data. Please try again.');\n    }\n  };\n  const handleVacationRequestSubmit = async e => {\n    e.preventDefault();\n    if (!vacationStartDate || !vacationEndDate) {\n      toast.error('Please select valid dates');\n      return;\n    }\n    try {\n      const companyId = userData.company.id;\n      const userId = selectedEmployeeId;\n      const requestId = uuidv4();\n      const employee = employees.find(e => e.id === userId);\n      const employeeName = (employee === null || employee === void 0 ? void 0 : employee.name) || 'Unknown';\n      await saveVacationRequest(companyId, userId, requestId, {\n        startDate: vacationStartDate.toISOString(),\n        endDate: vacationEndDate.toISOString(),\n        status: 'pending',\n        requestedBy: {\n          id: userId,\n          name: employeeName\n        }\n      });\n      const allUsers = await getUsers();\n      const companyAdmin = Object.entries(allUsers).find(([, user]) => {\n        var _user$companyIds2;\n        return user.role === 'admin' && ((_user$companyIds2 = user.companyIds) === null || _user$companyIds2 === void 0 ? void 0 : _user$companyIds2.some(c => c.companyId === companyId));\n      });\n      if (companyAdmin) {\n        const adminId = companyAdmin[0];\n        await sendNotification(companyId, adminId, `${employeeName} requested vacation from ${formatDate(vacationStartDate)} to ${formatDate(vacationEndDate)}. Please approve or decline the request.`, '/admin/vacation-requests', {\n          vacationUserId: userId,\n          vacationRequestId: requestId\n        });\n      }\n      toast.success('Vacation request sent successfully');\n      setVacationModalOpen(false);\n      setVacationStartDate(null);\n      setVacationEndDate(null);\n    } catch (error) {\n      console.error('Vacation request error:', error);\n      toast.error('Error submitting vacation request');\n    }\n  };\n  const handleWeekChange = direction => {\n    setWeekOffset(prevOffset => prevOffset + direction);\n  };\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 16\n    }, this);\n  }\n  const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he', {\n    sensitivity: 'base'\n  }));\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"availability-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"availability-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"availability-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Weekly Availability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/images/ShiftWise_Owl_Availability.png\",\n              alt: \"ShiftWise Owl\",\n              className: \"availability-logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 25\n          }, this), userData.user.role === 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"employeeDropdown\",\n                children: \"Select Employee:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                className: \"employee-dropdown\",\n                classNamePrefix: \"react-select\",\n                options: sortedEmployees.map(e => ({\n                  value: e.id,\n                  label: e.name\n                })),\n                onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                placeholder: \"Select an employee\",\n                menuPlacement: \"bottom\",\n                value: sortedEmployees.map(e => ({\n                  value: e.id,\n                  label: e.name\n                })).find(o => o.value === selectedEmployeeId) || null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 33\n            }, this), selectedEmployeeId && (() => {\n              const selected = employees.find(emp => emp.id === selectedEmployeeId);\n              return /*#__PURE__*/_jsxDEV(\"img\", {\n                src: (selected === null || selected === void 0 ? void 0 : selected.photoData) || '/images/Profile.jpeg',\n                alt: `${(selected === null || selected === void 0 ? void 0 : selected.name) || 'Employee'}'s profile`,\n                className: \"employee-photo-preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 41\n              }, this);\n            })()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 29\n          }, this), userData.user.role !== 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"employee-selector\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"employee-photo-wrapper\",\n              children: (() => {\n                const currentUser = employees.find(emp => emp.id === selectedEmployeeId);\n                return /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.photoData) || '/images/Profile.jpeg',\n                  alt: `${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) || 'Your'} profile`,\n                  className: \"employee-photo-preview\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 45\n                }, this);\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 29\n          }, this), selectedEmployeeId && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"week-navigation\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"navigation-button\",\n                onClick: () => handleWeekChange(-1),\n                children: \"Previous Week\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"week-range\",\n                children: calculateWeekRange(currentWeek)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"navigation-button\",\n                onClick: () => handleWeekChange(1),\n                children: \"Next Week\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"availability-table\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    onClick: handleSelectAll,\n                    className: \"clickable\",\n                    children: \"Select All\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 431,\n                    columnNumber: 45\n                  }, this), weekDays.map(({\n                    name,\n                    date\n                  }) => /*#__PURE__*/_jsxDEV(\"th\", {\n                    onClick: () => handleDayColumnClick(name),\n                    className: \"clickable\",\n                    children: [name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 435,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      style: {\n                        fontSize: '0.85em',\n                        color: '#555'\n                      },\n                      children: date\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 436,\n                      columnNumber: 53\n                    }, this)]\n                  }, name, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 433,\n                    columnNumber: 49\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: shifts.map(shift => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    onClick: () => handleShiftRowClick(shift),\n                    className: \"clickable\",\n                    children: shift\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 445,\n                    columnNumber: 49\n                  }, this), weekDays.map(({\n                    name\n                  }) => {\n                    var _availability$shift, _availability$shift$n;\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"checkbox\",\n                        checked: (availability === null || availability === void 0 ? void 0 : (_availability$shift = availability[shift]) === null || _availability$shift === void 0 ? void 0 : (_availability$shift$n = _availability$shift[name]) === null || _availability$shift$n === void 0 ? void 0 : _availability$shift$n.isAvailable) || false,\n                        onChange: () => handleAvailabilityChange(shift, name)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 450,\n                        columnNumber: 57\n                      }, this)\n                    }, name, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 449,\n                      columnNumber: 53\n                    }, this);\n                  })]\n                }, shift, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"direction-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"textDirection\",\n                children: \"Text direction:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                id: \"textDirection\",\n                className: \"employee-dropdown\",\n                classNamePrefix: \"react-select\",\n                options: [{\n                  value: 'rtl',\n                  label: 'RTL (Hebrew)'\n                }, {\n                  value: 'ltr',\n                  label: 'LTR (English)'\n                }],\n                value: [{\n                  value: 'rtl',\n                  label: 'RTL (Hebrew)'\n                }, {\n                  value: 'ltr',\n                  label: 'LTR (English)'\n                }].find(option => option.value === textDirection),\n                onChange: selectedOption => setTextDirection(selectedOption.value),\n                placeholder: \"Select direction\",\n                menuPlacement: \"bottom\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"notes-textarea\",\n              placeholder: textDirection === 'rtl' ? 'כתוב כאן את ההערות השבועיות...' : 'Write weekly notes here...',\n              dir: textDirection,\n              style: {\n                textAlign: textDirection === 'rtl' ? 'right' : 'left'\n              },\n              value: notes,\n              onChange: e => setNotes(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                textAlign: 'center',\n                color: isEditAllowed ? 'green' : 'red',\n                fontWeight: 'bold'\n              },\n              children: isEditAllowed ? 'Availability editing is currently open.' : 'Availability editing is currently locked.'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              onClick: handleSubmit,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              style: {\n                marginTop: '10px'\n              },\n              onClick: () => setVacationModalOpen(true),\n              children: \"Request Vacation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(VacationRequestModal, {\n        isOpen: vacationModalOpen,\n        onClose: () => setVacationModalOpen(false),\n        vacationStartDate: vacationStartDate,\n        vacationEndDate: vacationEndDate,\n        setVacationStartDate: setVacationStartDate,\n        setVacationEndDate: setVacationEndDate,\n        handleVacationRequestSubmit: handleVacationRequestSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 9\n  }, this);\n};\n_s(AvailabilityScreen, \"J03s9sNwGe83ooU2X597e3ng1mk=\", false, function () {\n  return [useNavigate];\n});\n_c = AvailabilityScreen;\nexport default AvailabilityScreen;\nvar _c;\n$RefreshReg$(_c, \"AvailabilityScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","toast","ToastContainer","Select","Modal","saveAvailability","getAvailability","saveNecessaryEmployees","getNecessaryEmployees","fetchEditStatus","getUsers","sendNotification","saveVacationRequest","formatDate","getWeekDateObjects","calculateWeekKey","calculateWeekRange","v4","uuidv4","Navbar","Loader","BackgroundWrapper","VacationRequestModal","jsxDEV","_jsxDEV","Fragment","_Fragment","setAppElement","AvailabilityScreen","_s","daysOfWeek","shifts","employees","setEmployees","selectedEmployeeId","setSelectedEmployeeId","availability","setAvailability","notes","setNotes","currentWeek","setCurrentWeek","userData","setUserData","weekOffset","setWeekOffset","isEditAllowed","setIsEditAllowed","vacationModalOpen","setVacationModalOpen","vacationStartDate","setVacationStartDate","vacationEndDate","setVacationEndDate","navigate","weekDays","setWeekDays","textDirection","setTextDirection","window","scrollTo","top","fetchEditStatusForWeek","companyId","company","id","weekKey","_status$isEditAllowed","status","error","console","loggedUser","JSON","parse","localStorage","getItem","user","role","fetchEmployees","usersData","filteredEmployees","Object","entries","map","filter","_user$companyIds","companyIds","some","fetchCurrentUserData","userFromDB","fetchAvailability","fetchedAvailability","initializeAvailability","alert","newWeek","existingAvailability","reduce","acc","shift","dayAcc","day","_existingAvailability","_existingAvailability2","_existingAvailability3","_existingAvailability4","isAvailable","handleAvailabilityChange","prev","handleDayColumnClick","updatedAvailability","stringify","allSelected","every","_updatedAvailability$","_updatedAvailability$2","forEach","handleShiftRowClick","_updatedAvailability$3","_updatedAvailability$4","handleSelectAll","handleSubmit","editStatus","dataToSave","necessaryEmployees","keys","length","Morning","Noon","Evening","Night","success","handleVacationRequestSubmit","e","preventDefault","userId","requestId","employee","find","employeeName","name","startDate","toISOString","endDate","requestedBy","allUsers","companyAdmin","_user$companyIds2","c","adminId","vacationUserId","vacationRequestId","handleWeekChange","direction","prevOffset","fileName","_jsxFileName","lineNumber","columnNumber","sortedEmployees","sort","a","b","localeCompare","sensitivity","children","className","src","alt","htmlFor","classNamePrefix","options","value","label","onChange","option","placeholder","menuPlacement","o","selected","emp","photoData","currentUser","onClick","date","style","fontSize","color","_availability$shift","_availability$shift$n","type","checked","selectedOption","dir","textAlign","target","fontWeight","marginTop","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/AvailabilityScreen.js"],"sourcesContent":["// React core hooks\nimport React, { useState, useEffect } from 'react';\n\n// Navigation hook from React Router\nimport { useNavigate } from 'react-router-dom';\n\n// Toast notification and modal libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport Modal from 'react-modal';\n\n// Import external styles\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/AvailabilityScreen.css';\nimport '../styles/Navbar.css';\n\n// Services for handling availability, users, and notifications\nimport { saveAvailability, getAvailability, saveNecessaryEmployees, getNecessaryEmployees, fetchEditStatus } from '../services/availabilityService';\nimport { getUsers } from '../services/userService';\nimport { sendNotification } from '../services/notificationService';\nimport { saveVacationRequest } from '../services/availabilityService';\n\n// Utility functions\nimport { formatDate } from '../utils/utils';\nimport { getWeekDateObjects, calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\n// UUID generator\nimport { v4 as uuidv4 } from 'uuid';\n\n// Internal components\nimport Navbar from './Navbar';\nimport Loader from './Common/Loader';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport VacationRequestModal from '../components/Modals/VacationRequestModal';\n\n// Set root element for modal accessibility\nModal.setAppElement('#root');\n\nconst AvailabilityScreen = () => {\n\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const shifts = ['Morning', 'Noon', 'Evening', 'Night'];\n    const [employees, setEmployees] = useState([]);\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [availability, setAvailability] = useState(null);\n    const [notes, setNotes] = useState('');\n    const [currentWeek, setCurrentWeek] = useState(1);\n    const [userData, setUserData] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n    const [isEditAllowed, setIsEditAllowed] = useState(true);\n    const [vacationModalOpen, setVacationModalOpen] = useState(false);\n    const [vacationStartDate, setVacationStartDate] = useState(null);\n    const [vacationEndDate, setVacationEndDate] = useState(null);\n    const navigate = useNavigate();\n    const [weekDays, setWeekDays] = useState([]);\n    const [textDirection, setTextDirection] = useState('rtl');\n\n    // Scroll to top of the page on component mount\n    useEffect(() => {\n        window.scrollTo({ top: 0 });\n    }, []);\n\n    // Fetch edit permission status for the current week based on the logged-in user's company\n    useEffect(() => {\n        const fetchEditStatusForWeek = async () => {\n\n            // If user data is not available, do nothing\n            if (!userData) return;\n\n            const companyId = userData.company.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            try {\n                // Retrieve edit status for the selected week\n                const status = await fetchEditStatus(companyId, weekKey);\n                // Set edit permission based on fetched status (default to false if not available)\n                setIsEditAllowed(status?.isEditAllowed ?? false);\n            } catch (error) {\n                // Log error and prevent editing\n                console.error('Failed to fetch edit status:', error);\n                setIsEditAllowed(false);\n            }\n        };\n\n        fetchEditStatusForWeek();\n    }, [userData, currentWeek]);\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n\n            if (loggedUser.user.role === 'admin') {\n                const fetchEmployees = async () => {\n                    try {\n                        const usersData = await getUsers();\n                        const companyId = loggedUser.company.id;\n\n                        if (companyId) {\n                            const filteredEmployees = Object.entries(usersData)\n                                .map(([id, user]) => ({ id, ...user }))\n                                .filter((user) =>\n                                    user.companyIds?.some((company) => company.companyId === companyId)\n                                );\n\n                            setEmployees(filteredEmployees);\n                        }\n                    } catch (error) {\n                        console.error('Error fetching employees:', error);\n                    }\n                };\n\n                fetchEmployees();\n            } else {\n                setUserData(loggedUser);\n\n                if (loggedUser.user.role === 'admin') {\n                } else {\n                    setSelectedEmployeeId(loggedUser.user.id);\n\n                    const fetchCurrentUserData = async () => {\n                        try {\n                            const usersData = await getUsers();\n                            const userFromDB = usersData[loggedUser.user.id];\n                            if (userFromDB) {\n                                setEmployees([{ id: loggedUser.user.id, ...userFromDB }]);\n                            }\n                        } catch (error) {\n                            console.error(\"Error fetching current user data:\", error);\n                        }\n                    };\n\n                    fetchCurrentUserData();\n                }\n            }\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchAvailability = async () => {\n            if (!selectedEmployeeId || !userData) return;\n\n            const companyId = userData.company.id;\n            const weekKey = calculateWeekKey(currentWeek);\n\n            try {\n                const fetchedAvailability = await getAvailability(companyId, weekKey, selectedEmployeeId);\n                setAvailability(initializeAvailability(fetchedAvailability || {}));\n                setNotes(fetchedAvailability?.notes || '');\n            } catch (error) {\n                console.error('Error fetching availability:', error);\n                alert('Failed to fetch availability. Please try again.');\n            }\n        };\n\n        fetchAvailability();\n    }, [currentWeek, selectedEmployeeId, userData]);\n\n    useEffect(() => {\n        const newWeek = weekOffset + 1;\n        setCurrentWeek(newWeek);\n        setWeekDays(getWeekDateObjects(newWeek));\n    }, [weekOffset]);\n\n    const initializeAvailability = (existingAvailability) => {\n        return shifts.reduce((acc, shift) => {\n            acc[shift] = daysOfWeek.reduce((dayAcc, day) => {\n                dayAcc[day] = {\n                    isAvailable: existingAvailability[shift]?.[day]?.isAvailable || false,\n                    status: existingAvailability[shift]?.[day]?.status || 'default'\n                };\n                return dayAcc;\n            }, {});\n            return acc;\n        }, {});\n    };\n\n    const handleAvailabilityChange = (shift, day) => {\n        setAvailability((prev) => ({\n            ...prev,\n            [shift]: {\n                ...prev[shift],\n                [day]: {\n                    ...prev[shift][day],\n                    isAvailable: !prev[shift][day].isAvailable,\n                },\n            },\n        }));\n    };\n\n    const handleDayColumnClick = (day) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = shifts.every((shift) => updatedAvailability[shift]?.[day]?.isAvailable);\n\n            shifts.forEach((shift) => {\n                updatedAvailability[shift][day].isAvailable = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleShiftRowClick = (shift) => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = daysOfWeek.every((day) => updatedAvailability[shift]?.[day]?.isAvailable);\n\n            daysOfWeek.forEach((day) => {\n                updatedAvailability[shift][day].isAvailable = !allSelected;\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleSelectAll = () => {\n        setAvailability((prev) => {\n            const updatedAvailability = JSON.parse(JSON.stringify(prev));\n            const allSelected = shifts.every((shift) =>\n                daysOfWeek.every((day) => updatedAvailability[shift][day].isAvailable)\n            );\n\n            shifts.forEach((shift) => {\n                daysOfWeek.forEach((day) => {\n                    updatedAvailability[shift][day].isAvailable = !allSelected;\n                });\n            });\n\n            return updatedAvailability;\n        });\n    };\n\n    const handleSubmit = async () => {\n        if (!selectedEmployeeId) {\n            toast.error('Please select an employee to save availability.');\n            return;\n        }\n\n        const companyId = userData.company.id;\n        const weekKey = calculateWeekKey(currentWeek);\n\n        try {\n            const editStatus = await fetchEditStatus(companyId, weekKey);\n            if (!editStatus?.isEditAllowed) {\n                toast.error('Editing availability is currently locked for this week.');\n                return;\n            }\n\n            const dataToSave = {\n                ...availability,\n                notes,\n            };\n            await saveAvailability(companyId, weekKey, selectedEmployeeId, dataToSave);\n\n            let necessaryEmployees = await getNecessaryEmployees(companyId, weekKey);\n\n            if (!necessaryEmployees || Object.keys(necessaryEmployees).length === 0) {\n                necessaryEmployees = daysOfWeek.reduce((acc, day) => {\n                    acc[day] = {\n                        Morning: 0,\n                        Noon: 0,\n                        Evening: 0,\n                        Night: 0,\n                    };\n                    return acc;\n                }, {});\n\n                await saveNecessaryEmployees(companyId, weekKey, necessaryEmployees);\n            }\n\n            toast.success('Availability and notes saved successfully!');\n        } catch (error) {\n            console.error('Error saving availability or necessary employees:', error);\n            toast.error('Failed to save data. Please try again.');\n        }\n    };\n\n    const handleVacationRequestSubmit = async (e) => {\n        e.preventDefault();\n\n        if (!vacationStartDate || !vacationEndDate) {\n            toast.error('Please select valid dates');\n            return;\n        }\n\n        try {\n            const companyId = userData.company.id;\n            const userId = selectedEmployeeId;\n            const requestId = uuidv4();\n\n            const employee = employees.find((e) => e.id === userId);\n            const employeeName = employee?.name || 'Unknown';\n\n            await saveVacationRequest(companyId, userId, requestId, {\n                startDate: vacationStartDate.toISOString(),\n                endDate: vacationEndDate.toISOString(),\n                status: 'pending',\n                requestedBy: {\n                    id: userId,\n                    name: employeeName,\n                },\n            });\n\n            const allUsers = await getUsers();\n            const companyAdmin = Object.entries(allUsers).find(\n                ([, user]) =>\n                    user.role === 'admin' &&\n                    user.companyIds?.some(c => c.companyId === companyId)\n            );\n\n            if (companyAdmin) {\n                const adminId = companyAdmin[0];\n                await sendNotification(\n                    companyId,\n                    adminId,\n                    `${employeeName} requested vacation from ${formatDate(vacationStartDate)} to ${formatDate(vacationEndDate)}. Please approve or decline the request.`,\n                    '/admin/vacation-requests',\n                    {\n                        vacationUserId: userId,\n                        vacationRequestId: requestId\n                    }\n                );\n            }\n\n            toast.success('Vacation request sent successfully');\n            setVacationModalOpen(false);\n            setVacationStartDate(null);\n            setVacationEndDate(null);\n        } catch (error) {\n            console.error('Vacation request error:', error);\n            toast.error('Error submitting vacation request');\n        }\n    };\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prevOffset) => prevOffset + direction);\n    };\n\n    if (!userData) {\n        return <Loader />;\n    }\n\n    const sortedEmployees = [...employees].sort((a, b) =>\n        a.name.localeCompare(b.name, 'he', { sensitivity: 'base' })\n    );\n\n    return (\n        <BackgroundWrapper>\n            <div>\n                <Navbar />\n                <div className=\"navbar-placeholder\"></div>\n                <div className=\"availability-wrapper\">\n\n                    <div className=\"availability-container\">\n\n                        <div className=\"availability-header\">\n                            <h1>Weekly Availability</h1>\n                            <img\n                                src=\"/images/ShiftWise_Owl_Availability.png\"\n                                alt=\"ShiftWise Owl\"\n                                className=\"availability-logo\"\n                            />\n                        </div>\n\n                        {userData.user.role === 'admin' && (\n                            <div className=\"employee-selector\">\n                                <div className=\"dropdown-container\">\n                                    <label htmlFor=\"employeeDropdown\">Select Employee:</label>\n                                    <Select\n                                        className=\"employee-dropdown\"\n                                        classNamePrefix=\"react-select\"\n                                        options={sortedEmployees.map((e) => ({ value: e.id, label: e.name }))}\n                                        onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                        placeholder=\"Select an employee\"\n                                        menuPlacement=\"bottom\"\n                                        value={\n                                            sortedEmployees\n                                                .map((e) => ({ value: e.id, label: e.name }))\n                                                .find((o) => o.value === selectedEmployeeId) || null\n                                        }\n                                    />\n                                </div>\n\n                                {selectedEmployeeId && (() => {\n                                    const selected = employees.find(emp => emp.id === selectedEmployeeId);\n                                    return (\n                                        <img\n                                            src={selected?.photoData || '/images/Profile.jpeg'}\n                                            alt={`${selected?.name || 'Employee'}'s profile`}\n                                            className=\"employee-photo-preview\"\n                                        />\n                                    );\n                                })()}\n                            </div>\n                        )}\n\n                        {userData.user.role !== 'admin' && (\n                            <div className=\"employee-selector\">\n                                <div className=\"employee-photo-wrapper\">\n                                    {(() => {\n                                        const currentUser = employees.find(emp => emp.id === selectedEmployeeId);\n                                        return (\n                                            <img\n                                                src={currentUser?.photoData || '/images/Profile.jpeg'}\n                                                alt={`${currentUser?.name || 'Your'} profile`}\n                                                className=\"employee-photo-preview\"\n                                            />\n                                        );\n                                    })()}\n                                </div>\n                            </div>\n                        )}\n\n                        {selectedEmployeeId && (\n                            <>\n                                <div className=\"week-navigation\">\n                                    <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                                        Previous Week\n                                    </button>\n                                    <h2 className=\"week-range\">{calculateWeekRange(currentWeek)}</h2>\n                                    <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                                        Next Week\n                                    </button>\n                                </div>\n                                <table className=\"availability-table\">\n                                    <thead>\n                                        <tr>\n                                            <th onClick={handleSelectAll} className=\"clickable\">Select All</th>\n                                            {weekDays.map(({ name, date }) => (\n                                                <th key={name} onClick={() => handleDayColumnClick(name)} className=\"clickable\">\n                                                    {name}\n                                                    <br />\n                                                    <span style={{ fontSize: '0.85em', color: '#555' }}>{date}</span>\n                                                </th>\n                                            ))}\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        {shifts.map((shift) => (\n                                            <tr key={shift}>\n                                                <td onClick={() => handleShiftRowClick(shift)} className=\"clickable\">\n                                                    {shift}\n                                                </td>\n                                                {weekDays.map(({ name }) => (\n                                                    <td key={name}>\n                                                        <input\n                                                            type=\"checkbox\"\n                                                            checked={availability?.[shift]?.[name]?.isAvailable || false}\n                                                            onChange={() => handleAvailabilityChange(shift, name)}\n                                                        />\n                                                    </td>\n                                                ))}\n                                            </tr>\n                                        ))}\n                                    </tbody>\n\n                                </table>\n                                <div className=\"direction-toggle\">\n                                    <label htmlFor=\"textDirection\">Text direction:</label>\n                                    <Select\n                                        id=\"textDirection\"\n                                        className=\"employee-dropdown\"\n                                        classNamePrefix=\"react-select\"\n                                        options={[\n                                            { value: 'rtl', label: 'RTL (Hebrew)' },\n                                            { value: 'ltr', label: 'LTR (English)' },\n                                        ]}\n                                        value={\n                                            [{ value: 'rtl', label: 'RTL (Hebrew)' }, { value: 'ltr', label: 'LTR (English)' }]\n                                                .find(option => option.value === textDirection)\n                                        }\n                                        onChange={(selectedOption) => setTextDirection(selectedOption.value)}\n                                        placeholder=\"Select direction\"\n                                        menuPlacement=\"bottom\"\n                                    />\n                                </div>\n\n                                <textarea\n                                    className=\"notes-textarea\"\n                                    placeholder={textDirection === 'rtl' ? 'כתוב כאן את ההערות השבועיות...' : 'Write weekly notes here...'}\n                                    dir={textDirection}\n                                    style={{ textAlign: textDirection === 'rtl' ? 'right' : 'left' }}\n                                    value={notes}\n                                    onChange={(e) => setNotes(e.target.value)}\n                                ></textarea>\n\n                                <p style={{ textAlign: 'center', color: isEditAllowed ? 'green' : 'red', fontWeight: 'bold' }}>\n                                    {isEditAllowed ? 'Availability editing is currently open.' : 'Availability editing is currently locked.'}\n                                </p>\n\n                                <button className=\"submit-button\" onClick={handleSubmit}>\n                                    Submit\n                                </button>\n                                <button\n                                    className=\"submit-button\"\n                                    style={{ marginTop: '10px' }}\n                                    onClick={() => setVacationModalOpen(true)}\n                                >\n                                    Request Vacation\n                                </button>\n                            </>\n                        )}\n                    </div>\n                </div>\n\n                <ToastContainer />\n                <VacationRequestModal\n                    isOpen={vacationModalOpen}\n                    onClose={() => setVacationModalOpen(false)}\n                    vacationStartDate={vacationStartDate}\n                    vacationEndDate={vacationEndDate}\n                    setVacationStartDate={setVacationStartDate}\n                    setVacationEndDate={setVacationEndDate}\n                    handleVacationRequestSubmit={handleVacationRequestSubmit}\n                />\n\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default AvailabilityScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}