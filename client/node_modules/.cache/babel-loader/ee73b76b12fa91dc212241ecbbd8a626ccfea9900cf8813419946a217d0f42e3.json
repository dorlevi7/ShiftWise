{"ast":null,"code":"var _jsxFileName = \"/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js\",\n  _s = $RefreshSig$();\n// React and core libraries\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Internal components and styles\nimport Navbar from './Navbar';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport '../styles/StatisticsScreen.css';\n\n// Services\nimport { getUsers } from '../services/userService';\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utils\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatisticsScreen = () => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [employees, setEmployees] = useState([]);\n  const [mode, setMode] = useState('single'); // 'single' or 'compare'\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const [secondEmployeeId, setSecondEmployeeId] = useState(null);\n  const [stats, setStats] = useState(null);\n  const [secondStats, setSecondStats] = useState(null);\n  const [weekOffset, setWeekOffset] = useState(0);\n  const [weeksRange, setWeeksRange] = useState(1);\n  const navigate = useNavigate();\n  const [allStats, setAllStats] = useState([]);\n  const [sortKey, setSortKey] = useState('name');\n  const [sortDirection, setSortDirection] = useState('asc');\n  useEffect(() => {\n    window.scrollTo({\n      top: 0\n    });\n  }, []);\n  useEffect(() => {\n    const loggedUser = JSON.parse(localStorage.getItem('user'));\n    if (!loggedUser) {\n      navigate('/');\n    } else {\n      setUserData(loggedUser);\n      const fetchEmployees = async () => {\n        try {\n          const usersData = await getUsers();\n          const companyId = loggedUser.company.id;\n          const filteredEmployees = Object.entries(usersData).map(([id, user]) => ({\n            id,\n            ...user\n          })).filter(user => {\n            var _user$companyIds;\n            return (_user$companyIds = user.companyIds) === null || _user$companyIds === void 0 ? void 0 : _user$companyIds.some(c => c.companyId === companyId);\n          });\n          setEmployees(filteredEmployees);\n        } catch (error) {\n          console.error('Error fetching employees:', error);\n        }\n      };\n      fetchEmployees();\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const fetchStats = async (employeeId, setter) => {\n      try {\n        const companyId = userData.company.id;\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = now.getMonth() + 1;\n        let totalNight = 0;\n        let totalShabbat = 0;\n        let totalRegular = 0;\n        for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n          const weekKey = calculateWeekKey(offset);\n          const data = await getWeeklyStats(companyId, year, month, weekKey, employeeId);\n          if (data) {\n            totalNight += data.nightShifts || 0;\n            totalShabbat += data.shabbatShifts || 0;\n            totalRegular += data.regularShifts || 0;\n          }\n        }\n        const totalAllShifts = totalNight + totalShabbat + totalRegular;\n        setter({\n          nightShifts: totalNight,\n          shabbatShifts: totalShabbat,\n          regularShifts: totalRegular,\n          avgNight: totalNight / weeksRange,\n          avgShabbat: totalShabbat / weeksRange,\n          avgRegular: totalRegular / weeksRange,\n          totalAll: totalAllShifts,\n          avgAll: totalAllShifts / weeksRange\n        });\n      } catch (error) {\n        console.error('Error fetching stats:', error);\n        toast.error('Failed to fetch statistics');\n      }\n    };\n    if (!userData) return;\n    if (mode === 'single' && selectedEmployeeId) {\n      fetchStats(selectedEmployeeId, setStats);\n    } else if (mode === 'compare' && selectedEmployeeId && secondEmployeeId) {\n      fetchStats(selectedEmployeeId, setStats);\n      fetchStats(secondEmployeeId, setSecondStats);\n    } else if (mode === 'table' && employees.length > 0) {\n      const fetchAllStats = async () => {\n        try {\n          const companyId = userData.company.id;\n          const now = new Date();\n          const year = now.getFullYear();\n          const month = now.getMonth() + 1;\n          const results = await Promise.all(employees.map(async employee => {\n            let totalNight = 0;\n            let totalShabbat = 0;\n            let totalRegular = 0;\n            for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n              const weekKey = calculateWeekKey(offset);\n              const data = await getWeeklyStats(companyId, year, month, weekKey, employee.id);\n              if (data) {\n                totalNight += data.nightShifts || 0;\n                totalShabbat += data.shabbatShifts || 0;\n                totalRegular += data.regularShifts || 0;\n              }\n            }\n            const totalAll = totalNight + totalShabbat + totalRegular;\n            return {\n              id: employee.id,\n              name: employee.name,\n              night: totalNight,\n              shabbat: totalShabbat,\n              regular: totalRegular,\n              total: totalAll,\n              avgNight: totalAll === 0 ? '0%' : `${(totalNight / totalAll * 100).toFixed(1)}%`,\n              avgShabbat: totalAll === 0 ? '0%' : `${(totalShabbat / totalAll * 100).toFixed(1)}%`,\n              avgRegular: totalAll === 0 ? '0%' : `${(totalRegular / totalAll * 100).toFixed(1)}%`,\n              avgTotal: (totalAll / weeksRange).toFixed(2)\n            };\n          }));\n          setAllStats(results);\n        } catch (error) {\n          console.error('Error fetching all employees stats:', error);\n          toast.error('Failed to fetch all statistics');\n        }\n      };\n      fetchAllStats();\n    }\n  }, [userData, selectedEmployeeId, secondEmployeeId, weekOffset, weeksRange, mode, employees]);\n  const handleWeekChange = direction => {\n    setWeekOffset(prev => prev + direction);\n  };\n  const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n  const sortedStats = [...allStats].sort((a, b) => {\n    const valA = a[sortKey];\n    const valB = b[sortKey];\n    const parseValue = val => {\n      if (typeof val === 'string' && val.includes('%')) {\n        return parseFloat(val.replace('%', ''));\n      }\n      return isNaN(val) ? String(val) : val;\n    };\n    const parsedA = parseValue(valA);\n    const parsedB = parseValue(valB);\n    if (typeof parsedA === 'number' && typeof parsedB === 'number') {\n      return sortDirection === 'asc' ? parsedA - parsedB : parsedB - parsedA;\n    } else {\n      return sortDirection === 'asc' ? String(parsedA).localeCompare(parsedB, 'he') : String(parsedB).localeCompare(parsedA, 'he');\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"statistics-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"statistics-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Statistics \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"week-navigation centered-navigation\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(-1),\n              children: \"Previous Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"week-range\",\n              children: weeksRange === 1 ? `Week: ${calculateWeekRange(weekOffset)}` : `Weeks: ${calculateWeekRange(weekOffset - weeksRange + 1)} To ${calculateWeekRange(weekOffset)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"navigation-button\",\n              onClick: () => handleWeekChange(1),\n              children: \"Next Week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weeks-range-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"weeksRange\",\n              children: \"Number of weeks to include:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              id: \"weeksRange\",\n              min: \"1\",\n              value: weeksRange,\n              onChange: e => {\n                const value = parseInt(e.target.value);\n                if (!isNaN(value) && value > 0) {\n                  setWeeksRange(value);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mode-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"single\",\n                checked: mode === 'single',\n                onChange: () => setMode('single')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 29\n              }, this), \" Single\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"compare\",\n                checked: mode === 'compare',\n                onChange: () => setMode('compare')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 29\n              }, this), \" Compare\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: \"table\",\n                checked: mode === 'table',\n                onChange: () => setMode('table')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 29\n              }, this), \" Table\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats-box\",\n            children: mode === 'compare' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comparison-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employee-comparison-box\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"employee-selector\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Select First Employee:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    className: \"employee-dropdown\",\n                    classNamePrefix: \"react-select\",\n                    options: sortedEmployees.map(e => ({\n                      value: e.id,\n                      label: e.name\n                    })),\n                    onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                    value: sortedEmployees.map(e => ({\n                      value: e.id,\n                      label: e.name\n                    })).find(o => o.value === selectedEmployeeId) || null,\n                    placeholder: \"Choose employee\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 268,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 37\n                }, this), stats && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"statistics-summary\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Night Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 279,\n                      columnNumber: 48\n                    }, this), \" \", stats.nightShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 279,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Shabbat Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 280,\n                      columnNumber: 48\n                    }, this), \" \", stats.shabbatShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Regular Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 281,\n                      columnNumber: 48\n                    }, this), \" \", stats.regularShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total All Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 282,\n                      columnNumber: 48\n                    }, this), \" \", stats.totalAll]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Average per Week:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 284,\n                      columnNumber: 48\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Night: \", stats.avgNight.toFixed(2), \" (\", (stats.nightShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 285,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Shabbat: \", stats.avgShabbat.toFixed(2), \" (\", (stats.shabbatShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Regular: \", stats.avgRegular.toFixed(2), \" (\", (stats.regularShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"All Shifts: \", stats.avgAll.toFixed(2)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"vertical-divider\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employee-comparison-box\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"employee-selector\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Select Second Employee:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    className: \"employee-dropdown\",\n                    classNamePrefix: \"react-select\",\n                    options: sortedEmployees.map(e => ({\n                      value: e.id,\n                      label: e.name\n                    })),\n                    onChange: option => setSecondEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                    value: sortedEmployees.map(e => ({\n                      value: e.id,\n                      label: e.name\n                    })).find(o => o.value === secondEmployeeId) || null,\n                    placeholder: \"Choose employee\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 298,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 37\n                }, this), secondStats && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"statistics-summary\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Night Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 309,\n                      columnNumber: 48\n                    }, this), \" \", secondStats.nightShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 309,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Shabbat Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 310,\n                      columnNumber: 48\n                    }, this), \" \", secondStats.shabbatShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Regular Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 311,\n                      columnNumber: 48\n                    }, this), \" \", secondStats.regularShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total All Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 312,\n                      columnNumber: 48\n                    }, this), \" \", secondStats.totalAll]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Average per Week:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 314,\n                      columnNumber: 48\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Night: \", secondStats.avgNight.toFixed(2), \" (\", (secondStats.nightShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Shabbat: \", secondStats.avgShabbat.toFixed(2), \" (\", (secondStats.shabbatShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 316,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Regular: \", secondStats.avgRegular.toFixed(2), \" (\", (secondStats.regularShifts / secondStats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"All Shifts: \", secondStats.avgAll.toFixed(2)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 29\n            }, this) : mode === 'table' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table-container\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"statistics-table\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [{\n                      key: 'name',\n                      label: 'Name'\n                    }, {\n                      key: 'night',\n                      label: 'Night'\n                    }, {\n                      key: 'shabbat',\n                      label: 'Shabbat'\n                    }, {\n                      key: 'regular',\n                      label: 'Regular'\n                    }, {\n                      key: 'total',\n                      label: 'Total'\n                    }, {\n                      key: 'avgNight',\n                      label: 'Avg Night'\n                    }, {\n                      key: 'avgShabbat',\n                      label: 'Avg Shabbat'\n                    }, {\n                      key: 'avgRegular',\n                      label: 'Avg Regular'\n                    }, {\n                      key: 'avgTotal',\n                      label: 'Avg Total'\n                    }].map(({\n                      key,\n                      label\n                    }) => /*#__PURE__*/_jsxDEV(\"th\", {\n                      onClick: () => {\n                        if (sortKey === key) {\n                          setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc');\n                        } else {\n                          setSortKey(key);\n                          setSortDirection('desc');\n                        }\n                      },\n                      style: {\n                        cursor: 'pointer'\n                      },\n                      children: [label, \" \", sortKey === key && (sortDirection === 'asc' ? '🔼' : '🔽')]\n                    }, key, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 339,\n                      columnNumber: 49\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 327,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: sortedStats.map(stat => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 360,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.night\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 361,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.shabbat\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 362,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.regular\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 363,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.total\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 364,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.avgNight\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 365,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.avgShabbat\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 366,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.avgRegular\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 367,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: stat.avgTotal\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 368,\n                      columnNumber: 49\n                    }, this)]\n                  }, stat.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 359,\n                    columnNumber: 45\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-container\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"employee-comparison-box\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"employee-selector\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Select Employee:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 379,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Select, {\n                    className: \"employee-dropdown\",\n                    classNamePrefix: \"react-select\",\n                    options: sortedEmployees.map(e => ({\n                      value: e.id,\n                      label: e.name\n                    })),\n                    onChange: option => setSelectedEmployeeId((option === null || option === void 0 ? void 0 : option.value) || ''),\n                    value: sortedEmployees.map(e => ({\n                      value: e.id,\n                      label: e.name\n                    })).find(o => o.value === selectedEmployeeId) || null,\n                    placeholder: \"Choose employee\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 37\n                }, this), stats && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"statistics-summary\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Night Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 391,\n                      columnNumber: 48\n                    }, this), \" \", stats.nightShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Shabbat Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 392,\n                      columnNumber: 48\n                    }, this), \" \", stats.shabbatShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total Regular Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 393,\n                      columnNumber: 48\n                    }, this), \" \", stats.regularShifts]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 393,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Total All Shifts:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 394,\n                      columnNumber: 48\n                    }, this), \" \", stats.totalAll]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 394,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 395,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Average per Week:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 396,\n                      columnNumber: 48\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 396,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Night: \", stats.avgNight.toFixed(2), \" (\", (stats.nightShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 397,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Shabbat: \", stats.avgShabbat.toFixed(2), \" (\", (stats.shabbatShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 398,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Regular: \", stats.avgRegular.toFixed(2), \" (\", (stats.regularShifts / stats.totalAll * 100).toFixed(1), \"%)\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 399,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"All Shifts: \", stats.avgAll.toFixed(2)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n};\n_s(StatisticsScreen, \"sQIJgQdF8KIXyb7waFvHNlyaAk0=\", false, function () {\n  return [useNavigate];\n});\n_c = StatisticsScreen;\nexport default StatisticsScreen;\nvar _c;\n$RefreshReg$(_c, \"StatisticsScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","toast","ToastContainer","Select","Navbar","BackgroundWrapper","getUsers","getWeeklyStats","calculateWeekKey","calculateWeekRange","jsxDEV","_jsxDEV","StatisticsScreen","_s","userData","setUserData","employees","setEmployees","mode","setMode","selectedEmployeeId","setSelectedEmployeeId","secondEmployeeId","setSecondEmployeeId","stats","setStats","secondStats","setSecondStats","weekOffset","setWeekOffset","weeksRange","setWeeksRange","navigate","allStats","setAllStats","sortKey","setSortKey","sortDirection","setSortDirection","window","scrollTo","top","loggedUser","JSON","parse","localStorage","getItem","fetchEmployees","usersData","companyId","company","id","filteredEmployees","Object","entries","map","user","filter","_user$companyIds","companyIds","some","c","error","console","fetchStats","employeeId","setter","now","Date","year","getFullYear","month","getMonth","totalNight","totalShabbat","totalRegular","offset","weekKey","data","nightShifts","shabbatShifts","regularShifts","totalAllShifts","avgNight","avgShabbat","avgRegular","totalAll","avgAll","length","fetchAllStats","results","Promise","all","employee","name","night","shabbat","regular","total","toFixed","avgTotal","handleWeekChange","direction","prev","sortedEmployees","sort","a","b","localeCompare","sortedStats","valA","valB","parseValue","val","includes","parseFloat","replace","isNaN","String","parsedA","parsedB","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","htmlFor","type","min","value","onChange","e","parseInt","target","checked","classNamePrefix","options","label","option","find","o","placeholder","key","style","cursor","stat","_c","$RefreshReg$"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/components/StatisticsScreen.js"],"sourcesContent":["// React and core libraries\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Third-party libraries\nimport { toast, ToastContainer } from 'react-toastify';\nimport Select from 'react-select';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Internal components and styles\nimport Navbar from './Navbar';\nimport BackgroundWrapper from './Layouts/BackgroundWrapper';\nimport '../styles/StatisticsScreen.css';\n\n// Services\nimport { getUsers } from '../services/userService';\nimport { getWeeklyStats } from '../services/statsService';\n\n// Utils\nimport { calculateWeekKey, calculateWeekRange } from '../utils/utils';\n\nconst StatisticsScreen = () => {\n    const [userData, setUserData] = useState(null);\n    const [employees, setEmployees] = useState([]);\n    const [mode, setMode] = useState('single'); // 'single' or 'compare'\n    const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n    const [secondEmployeeId, setSecondEmployeeId] = useState(null);\n    const [stats, setStats] = useState(null);\n    const [secondStats, setSecondStats] = useState(null);\n    const [weekOffset, setWeekOffset] = useState(0);\n    const [weeksRange, setWeeksRange] = useState(1);\n    const navigate = useNavigate();\n    const [allStats, setAllStats] = useState([]);\n    const [sortKey, setSortKey] = useState('name');\n    const [sortDirection, setSortDirection] = useState('asc');\n\n    useEffect(() => {\n        window.scrollTo({ top: 0 });\n    }, []);\n\n    useEffect(() => {\n        const loggedUser = JSON.parse(localStorage.getItem('user'));\n        if (!loggedUser) {\n            navigate('/');\n        } else {\n            setUserData(loggedUser);\n            const fetchEmployees = async () => {\n\n                try {\n                    const usersData = await getUsers();\n                    const companyId = loggedUser.company.id;\n                    const filteredEmployees = Object.entries(usersData)\n                        .map(([id, user]) => ({ id, ...user }))\n                        .filter((user) => user.companyIds?.some((c) => c.companyId === companyId));\n                    setEmployees(filteredEmployees);\n                } catch (error) {\n                    console.error('Error fetching employees:', error);\n                }\n            };\n            fetchEmployees();\n        }\n    }, [navigate]);\n\n    useEffect(() => {\n        const fetchStats = async (employeeId, setter) => {\n            try {\n                const companyId = userData.company.id;\n                const now = new Date();\n                const year = now.getFullYear();\n                const month = now.getMonth() + 1;\n\n                let totalNight = 0;\n                let totalShabbat = 0;\n                let totalRegular = 0;\n\n                for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n                    const weekKey = calculateWeekKey(offset);\n                    const data = await getWeeklyStats(companyId, year, month, weekKey, employeeId);\n\n                    if (data) {\n                        totalNight += data.nightShifts || 0;\n                        totalShabbat += data.shabbatShifts || 0;\n                        totalRegular += data.regularShifts || 0;\n                    }\n                }\n\n                const totalAllShifts = totalNight + totalShabbat + totalRegular;\n\n                setter({\n                    nightShifts: totalNight,\n                    shabbatShifts: totalShabbat,\n                    regularShifts: totalRegular,\n                    avgNight: totalNight / weeksRange,\n                    avgShabbat: totalShabbat / weeksRange,\n                    avgRegular: totalRegular / weeksRange,\n                    totalAll: totalAllShifts,\n                    avgAll: totalAllShifts / weeksRange\n                });\n            } catch (error) {\n                console.error('Error fetching stats:', error);\n                toast.error('Failed to fetch statistics');\n            }\n        };\n\n        if (!userData) return;\n\n        if (mode === 'single' && selectedEmployeeId) {\n            fetchStats(selectedEmployeeId, setStats);\n        } else if (mode === 'compare' && selectedEmployeeId && secondEmployeeId) {\n            fetchStats(selectedEmployeeId, setStats);\n            fetchStats(secondEmployeeId, setSecondStats);\n        } else if (mode === 'table' && employees.length > 0) {\n            const fetchAllStats = async () => {\n                try {\n                    const companyId = userData.company.id;\n                    const now = new Date();\n                    const year = now.getFullYear();\n                    const month = now.getMonth() + 1;\n\n                    const results = await Promise.all(\n                        employees.map(async (employee) => {\n                            let totalNight = 0;\n                            let totalShabbat = 0;\n                            let totalRegular = 0;\n\n                            for (let offset = weekOffset; offset > weekOffset - weeksRange; offset--) {\n                                const weekKey = calculateWeekKey(offset);\n                                const data = await getWeeklyStats(companyId, year, month, weekKey, employee.id);\n\n                                if (data) {\n                                    totalNight += data.nightShifts || 0;\n                                    totalShabbat += data.shabbatShifts || 0;\n                                    totalRegular += data.regularShifts || 0;\n                                }\n                            }\n\n                            const totalAll = totalNight + totalShabbat + totalRegular;\n\n                            return {\n                                id: employee.id,\n                                name: employee.name,\n                                night: totalNight,\n                                shabbat: totalShabbat,\n                                regular: totalRegular,\n                                total: totalAll,\n                                avgNight: totalAll === 0 ? '0%' : `${((totalNight / totalAll) * 100).toFixed(1)}%`,\n                                avgShabbat: totalAll === 0 ? '0%' : `${((totalShabbat / totalAll) * 100).toFixed(1)}%`,\n                                avgRegular: totalAll === 0 ? '0%' : `${((totalRegular / totalAll) * 100).toFixed(1)}%`,\n                                avgTotal: (totalAll / weeksRange).toFixed(2)\n                            };\n                        })\n                    );\n\n                    setAllStats(results);\n                } catch (error) {\n                    console.error('Error fetching all employees stats:', error);\n                    toast.error('Failed to fetch all statistics');\n                }\n            };\n\n            fetchAllStats();\n        }\n    }, [userData, selectedEmployeeId, secondEmployeeId, weekOffset, weeksRange, mode, employees]);\n\n    const handleWeekChange = (direction) => {\n        setWeekOffset((prev) => prev + direction);\n    };\n\n    const sortedEmployees = [...employees].sort((a, b) => a.name.localeCompare(b.name, 'he'));\n\n    const sortedStats = [...allStats].sort((a, b) => {\n        const valA = a[sortKey];\n        const valB = b[sortKey];\n\n        const parseValue = (val) => {\n            if (typeof val === 'string' && val.includes('%')) {\n                return parseFloat(val.replace('%', ''));\n            }\n            return isNaN(val) ? String(val) : val;\n        };\n\n        const parsedA = parseValue(valA);\n        const parsedB = parseValue(valB);\n\n        if (typeof parsedA === 'number' && typeof parsedB === 'number') {\n            return sortDirection === 'asc' ? parsedA - parsedB : parsedB - parsedA;\n        } else {\n            return sortDirection === 'asc'\n                ? String(parsedA).localeCompare(parsedB, 'he')\n                : String(parsedB).localeCompare(parsedA, 'he');\n        }\n    });\n\n    return (\n        <BackgroundWrapper>\n            <div>\n                <Navbar />\n                <div className=\"navbar-placeholder\"></div>\n\n                <div className=\"statistics-wrapper\">\n\n                <div className=\"statistics-container\">\n                    <h1> Statistics </h1>\n\n                    <div className=\"week-navigation centered-navigation\">\n                        <button className=\"navigation-button\" onClick={() => handleWeekChange(-1)}>\n                            Previous Week\n                        </button>\n                        <h2 className=\"week-range\">\n                            {weeksRange === 1\n                                ? `Week: ${calculateWeekRange(weekOffset)}`\n                                : `Weeks: ${calculateWeekRange(weekOffset - weeksRange + 1)} To ${calculateWeekRange(weekOffset)}`}\n                        </h2>\n                        <button className=\"navigation-button\" onClick={() => handleWeekChange(1)}>\n                            Next Week\n                        </button>\n                    </div>\n\n                    <div className=\"weeks-range-selector\">\n                        <label htmlFor=\"weeksRange\">Number of weeks to include:</label>\n                        <input\n                            type=\"number\"\n                            id=\"weeksRange\"\n                            min=\"1\"\n                            value={weeksRange}\n                            onChange={(e) => {\n                                const value = parseInt(e.target.value);\n                                if (!isNaN(value) && value > 0) {\n                                    setWeeksRange(value);\n                                }\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"mode-toggle\">\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"single\"\n                                checked={mode === 'single'}\n                                onChange={() => setMode('single')}\n                            /> Single\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"compare\"\n                                checked={mode === 'compare'}\n                                onChange={() => setMode('compare')}\n                            /> Compare\n                        </label>\n                        <label>\n                            <input\n                                type=\"radio\"\n                                value=\"table\"\n                                checked={mode === 'table'}\n                                onChange={() => setMode('table')}\n                            /> Table\n                        </label>\n                    </div>\n\n                    <div className=\"stats-box\">\n                        {mode === 'compare' ? (\n                            <div className=\"comparison-container\">\n                                <div className=\"employee-comparison-box\">\n                                    <div className=\"employee-selector\">\n                                        <label>Select First Employee:</label>\n                                        <Select\n                                            className=\"employee-dropdown\"\n                                            classNamePrefix=\"react-select\"\n                                            options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                            onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                            value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                                            placeholder=\"Choose employee\"\n                                        />\n                                    </div>\n                                    {stats && (\n                                        <div className=\"statistics-summary\">\n                                            <p><strong>Total Night Shifts:</strong> {stats.nightShifts}</p>\n                                            <p><strong>Total Shabbat Shifts:</strong> {stats.shabbatShifts}</p>\n                                            <p><strong>Total Regular Shifts:</strong> {stats.regularShifts}</p>\n                                            <p><strong>Total All Shifts:</strong> {stats.totalAll}</p>\n                                            <hr />\n                                            <p><strong>Average per Week:</strong></p>\n                                            <p>Night: {stats.avgNight.toFixed(2)} ({((stats.nightShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Shabbat: {stats.avgShabbat.toFixed(2)} ({((stats.shabbatShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Regular: {stats.avgRegular.toFixed(2)} ({((stats.regularShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>All Shifts: {stats.avgAll.toFixed(2)}</p>\n                                        </div>\n                                    )}\n                                </div>\n\n                                <div className=\"vertical-divider\"></div>\n\n                                <div className=\"employee-comparison-box\">\n                                    <div className=\"employee-selector\">\n                                        <label>Select Second Employee:</label>\n                                        <Select\n                                            className=\"employee-dropdown\"\n                                            classNamePrefix=\"react-select\"\n                                            options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                            onChange={(option) => setSecondEmployeeId(option?.value || '')}\n                                            value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === secondEmployeeId) || null}\n                                            placeholder=\"Choose employee\"\n                                        />\n                                    </div>\n                                    {secondStats && (\n                                        <div className=\"statistics-summary\">\n                                            <p><strong>Total Night Shifts:</strong> {secondStats.nightShifts}</p>\n                                            <p><strong>Total Shabbat Shifts:</strong> {secondStats.shabbatShifts}</p>\n                                            <p><strong>Total Regular Shifts:</strong> {secondStats.regularShifts}</p>\n                                            <p><strong>Total All Shifts:</strong> {secondStats.totalAll}</p>\n                                            <hr />\n                                            <p><strong>Average per Week:</strong></p>\n                                            <p>Night: {secondStats.avgNight.toFixed(2)} ({((secondStats.nightShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Shabbat: {secondStats.avgShabbat.toFixed(2)} ({((secondStats.shabbatShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Regular: {secondStats.avgRegular.toFixed(2)} ({((secondStats.regularShifts / secondStats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>All Shifts: {secondStats.avgAll.toFixed(2)}</p>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        ) : mode === 'table' ? (\n                            <div className=\"table-container\">\n                                <table className=\"statistics-table\">\n                                    <thead>\n                                        <tr>\n                                            {[\n                                                { key: 'name', label: 'Name' },\n                                                { key: 'night', label: 'Night' },\n                                                { key: 'shabbat', label: 'Shabbat' },\n                                                { key: 'regular', label: 'Regular' },\n                                                { key: 'total', label: 'Total' },\n                                                { key: 'avgNight', label: 'Avg Night' },\n                                                { key: 'avgShabbat', label: 'Avg Shabbat' },\n                                                { key: 'avgRegular', label: 'Avg Regular' },\n                                                { key: 'avgTotal', label: 'Avg Total' },\n                                            ].map(({ key, label }) => (\n                                                <th\n                                                    key={key}\n                                                    onClick={() => {\n                                                        if (sortKey === key) {\n                                                            setSortDirection(sortDirection === 'desc' ? 'asc' : 'desc');\n                                                        } else {\n                                                            setSortKey(key);\n                                                            setSortDirection('desc');\n                                                        }\n                                                    }}\n                                                    style={{ cursor: 'pointer' }}\n                                                >\n                                                    {label} {sortKey === key && (sortDirection === 'asc' ? '🔼' : '🔽')}\n                                                </th>\n                                            ))}\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        {sortedStats.map((stat) => (\n                                            <tr key={stat.id}>\n                                                <td>{stat.name}</td>\n                                                <td>{stat.night}</td>\n                                                <td>{stat.shabbat}</td>\n                                                <td>{stat.regular}</td>\n                                                <td>{stat.total}</td>\n                                                <td>{stat.avgNight}</td>\n                                                <td>{stat.avgShabbat}</td>\n                                                <td>{stat.avgRegular}</td>\n                                                <td>{stat.avgTotal}</td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n\n                                </table>\n                            </div>\n                        ) : (\n                            <div className=\"single-container\">\n                                <div className=\"employee-comparison-box\">\n                                    <div className=\"employee-selector\">\n                                        <label>Select Employee:</label>\n                                        <Select\n                                            className=\"employee-dropdown\"\n                                            classNamePrefix=\"react-select\"\n                                            options={sortedEmployees.map(e => ({ value: e.id, label: e.name }))}\n                                            onChange={(option) => setSelectedEmployeeId(option?.value || '')}\n                                            value={sortedEmployees.map(e => ({ value: e.id, label: e.name })).find(o => o.value === selectedEmployeeId) || null}\n                                            placeholder=\"Choose employee\"\n                                        />\n                                    </div>\n                                    {stats && (\n                                        <div className=\"statistics-summary\">\n                                            <p><strong>Total Night Shifts:</strong> {stats.nightShifts}</p>\n                                            <p><strong>Total Shabbat Shifts:</strong> {stats.shabbatShifts}</p>\n                                            <p><strong>Total Regular Shifts:</strong> {stats.regularShifts}</p>\n                                            <p><strong>Total All Shifts:</strong> {stats.totalAll}</p>\n                                            <hr />\n                                            <p><strong>Average per Week:</strong></p>\n                                            <p>Night: {stats.avgNight.toFixed(2)} ({((stats.nightShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Shabbat: {stats.avgShabbat.toFixed(2)} ({((stats.shabbatShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>Regular: {stats.avgRegular.toFixed(2)} ({((stats.regularShifts / stats.totalAll) * 100).toFixed(1)}%)</p>\n                                            <p>All Shifts: {stats.avgAll.toFixed(2)}</p>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n\n                </div>\n\n                </div>\n                <ToastContainer />\n            </div>\n        </BackgroundWrapper>\n    );\n};\n\nexport default StatisticsScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}