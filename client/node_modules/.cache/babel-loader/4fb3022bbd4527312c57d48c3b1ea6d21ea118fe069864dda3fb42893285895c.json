{"ast":null,"code":"export const isValidEmail = email => {\n  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return typeof email === 'string' && regex.test(email.trim());\n};\nexport const isValidPhone = phone => {\n  const regex = /^\\+?\\d{9,15}$/;\n  return typeof phone === 'string' && regex.test(phone.trim()) && !/^0+$/.test(phone.trim()) // לא מאפשר מספר שמכיל רק אפסים\n  ;\n};\nexport const isNonEmpty = value => {\n  return typeof value === 'string' && value.trim().replace(/\\s/g, '') !== '';\n};\nexport const isValidName = name => {\n  // רק אותיות (כולל בעברית או אנגלית) ורווחים\n  const regex = /^[A-Za-zא-ת\\s]+$/;\n  return typeof name === 'string' && regex.test(name.trim());\n};\nexport const isStrongPassword = password => {\n  // לפחות 8 תווים, אות גדולה, אות קטנה וספרה\n  const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\n  return typeof password === 'string' && regex.test(password);\n};\nexport const validateSignupForm = (company, admin) => {\n  const errors = [];\n\n  // Company\n  if (!isNonEmpty(company.name)) errors.push('Company name is required.');\n  if (!isNonEmpty(company.address)) errors.push('Company address is required.');\n  if (!isValidPhone(company.phone)) errors.push('Invalid company phone number.');\n  if (!isValidEmail(company.email)) errors.push('Invalid company email address.');\n\n  // Admin\n  if (!isValidName(admin.name)) errors.push('Admin name must contain only letters and spaces.');\n  if (!isValidPhone(admin.phone)) errors.push('Invalid admin phone number.');\n  if (!isValidEmail(admin.email)) errors.push('Invalid admin email address.');\n  if (!isStrongPassword(admin.password)) {\n    errors.push('Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, and one digit.');\n  }\n  return errors;\n};","map":{"version":3,"names":["isValidEmail","email","regex","test","trim","isValidPhone","phone","isNonEmpty","value","replace","isValidName","name","isStrongPassword","password","validateSignupForm","company","admin","errors","push","address"],"sources":["/Users/dorlevi/IdeaProjects/newShiftWise/client/src/utils/validationUtils.js"],"sourcesContent":["export const isValidEmail = (email) => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return typeof email === 'string' && regex.test(email.trim());\n};\n\nexport const isValidPhone = (phone) => {\n    const regex = /^\\+?\\d{9,15}$/;\n    return (\n        typeof phone === 'string' &&\n        regex.test(phone.trim()) &&\n        !/^0+$/.test(phone.trim()) // לא מאפשר מספר שמכיל רק אפסים\n    );\n};\n\nexport const isNonEmpty = (value) => {\n    return typeof value === 'string' && value.trim().replace(/\\s/g, '') !== '';\n};\n\n\nexport const isValidName = (name) => {\n    // רק אותיות (כולל בעברית או אנגלית) ורווחים\n    const regex = /^[A-Za-zא-ת\\s]+$/;\n    return typeof name === 'string' && regex.test(name.trim());\n};\n\nexport const isStrongPassword = (password) => {\n    // לפחות 8 תווים, אות גדולה, אות קטנה וספרה\n    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\n    return typeof password === 'string' && regex.test(password);\n};\n\nexport const validateSignupForm = (company, admin) => {\n    const errors = [];\n\n    // Company\n    if (!isNonEmpty(company.name)) errors.push('Company name is required.');\n    if (!isNonEmpty(company.address)) errors.push('Company address is required.');\n    if (!isValidPhone(company.phone)) errors.push('Invalid company phone number.');\n    if (!isValidEmail(company.email)) errors.push('Invalid company email address.');\n\n    // Admin\n    if (!isValidName(admin.name)) errors.push('Admin name must contain only letters and spaces.');\n    if (!isValidPhone(admin.phone)) errors.push('Invalid admin phone number.');\n    if (!isValidEmail(admin.email)) errors.push('Invalid admin email address.');\n    if (!isStrongPassword(admin.password)) {\n        errors.push('Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, and one digit.');\n    }\n\n    return errors;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,KAAK,IAAK;EACnC,MAAMC,KAAK,GAAG,kDAAkD;EAChE,OAAO,OAAOD,KAAK,KAAK,QAAQ,IAAIC,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC;AAChE,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACnC,MAAMJ,KAAK,GAAG,eAAe;EAC7B,OACI,OAAOI,KAAK,KAAK,QAAQ,IACzBJ,KAAK,CAACC,IAAI,CAACG,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC,IACxB,CAAC,MAAM,CAACD,IAAI,CAACG,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;EAAA;AAEnC,CAAC;AAED,OAAO,MAAMG,UAAU,GAAIC,KAAK,IAAK;EACjC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACJ,IAAI,CAAC,CAAC,CAACK,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE;AAC9E,CAAC;AAGD,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACjC;EACA,MAAMT,KAAK,GAAG,kBAAkB;EAChC,OAAO,OAAOS,IAAI,KAAK,QAAQ,IAAIT,KAAK,CAACC,IAAI,CAACQ,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC;AAC9D,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAIC,QAAQ,IAAK;EAC1C;EACA,MAAMX,KAAK,GAAG,uCAAuC;EACrD,OAAO,OAAOW,QAAQ,KAAK,QAAQ,IAAIX,KAAK,CAACC,IAAI,CAACU,QAAQ,CAAC;AAC/D,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,OAAO,EAAEC,KAAK,KAAK;EAClD,MAAMC,MAAM,GAAG,EAAE;;EAEjB;EACA,IAAI,CAACV,UAAU,CAACQ,OAAO,CAACJ,IAAI,CAAC,EAAEM,MAAM,CAACC,IAAI,CAAC,2BAA2B,CAAC;EACvE,IAAI,CAACX,UAAU,CAACQ,OAAO,CAACI,OAAO,CAAC,EAAEF,MAAM,CAACC,IAAI,CAAC,8BAA8B,CAAC;EAC7E,IAAI,CAACb,YAAY,CAACU,OAAO,CAACT,KAAK,CAAC,EAAEW,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC;EAC9E,IAAI,CAAClB,YAAY,CAACe,OAAO,CAACd,KAAK,CAAC,EAAEgB,MAAM,CAACC,IAAI,CAAC,gCAAgC,CAAC;;EAE/E;EACA,IAAI,CAACR,WAAW,CAACM,KAAK,CAACL,IAAI,CAAC,EAAEM,MAAM,CAACC,IAAI,CAAC,kDAAkD,CAAC;EAC7F,IAAI,CAACb,YAAY,CAACW,KAAK,CAACV,KAAK,CAAC,EAAEW,MAAM,CAACC,IAAI,CAAC,6BAA6B,CAAC;EAC1E,IAAI,CAAClB,YAAY,CAACgB,KAAK,CAACf,KAAK,CAAC,EAAEgB,MAAM,CAACC,IAAI,CAAC,8BAA8B,CAAC;EAC3E,IAAI,CAACN,gBAAgB,CAACI,KAAK,CAACH,QAAQ,CAAC,EAAE;IACnCI,MAAM,CAACC,IAAI,CAAC,6HAA6H,CAAC;EAC9I;EAEA,OAAOD,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}